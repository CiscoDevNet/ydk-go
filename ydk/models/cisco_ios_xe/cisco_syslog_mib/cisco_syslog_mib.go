// The MIB module to describe and store the system
// messages generated by the IOS and any other
// OS which supports syslogs.
package cisco_syslog_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_syslog_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-SYSLOG-MIB CISCO-SYSLOG-MIB}", reflect.TypeOf(CISCOSYSLOGMIB{}))
    ydk.RegisterEntity("CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB", reflect.TypeOf(CISCOSYSLOGMIB{}))
}

// SyslogSeverity represents  'debug'        : debug-level messages.
type SyslogSeverity string

const (
    SyslogSeverity_emergency SyslogSeverity = "emergency"

    SyslogSeverity_alert SyslogSeverity = "alert"

    SyslogSeverity_critical SyslogSeverity = "critical"

    SyslogSeverity_error SyslogSeverity = "error"

    SyslogSeverity_warning SyslogSeverity = "warning"

    SyslogSeverity_notice SyslogSeverity = "notice"

    SyslogSeverity_info SyslogSeverity = "info"

    SyslogSeverity_debug SyslogSeverity = "debug"
)

// CISCOSYSLOGMIB
type CISCOSYSLOGMIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Clogbasic CISCOSYSLOGMIB_Clogbasic

    
    Cloghistory CISCOSYSLOGMIB_Cloghistory

    
    Clogserver CISCOSYSLOGMIB_Clogserver

    // A table of syslog messages generated by this device. All 'interesting'
    // syslog messages (i.e. severity <= clogMaxSeverity) are entered into this
    // table.
    Cloghistorytable CISCOSYSLOGMIB_Cloghistorytable

    // This table contains entries that allow application to configure syslog
    // servers for the system.  The maximum number of entries that can be created
    // for this table is limited by the object clogMaxServers.
    Clogserverconfigtable CISCOSYSLOGMIB_Clogserverconfigtable
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetFilter() yfilter.YFilter { return cISCOSYSLOGMIB.YFilter }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) SetFilter(yf yfilter.YFilter) { cISCOSYSLOGMIB.YFilter = yf }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetGoName(yname string) string {
    if yname == "clogBasic" { return "Clogbasic" }
    if yname == "clogHistory" { return "Cloghistory" }
    if yname == "clogServer" { return "Clogserver" }
    if yname == "clogHistoryTable" { return "Cloghistorytable" }
    if yname == "clogServerConfigTable" { return "Clogserverconfigtable" }
    return ""
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetSegmentPath() string {
    return "CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB"
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clogBasic" {
        return &cISCOSYSLOGMIB.Clogbasic
    }
    if childYangName == "clogHistory" {
        return &cISCOSYSLOGMIB.Cloghistory
    }
    if childYangName == "clogServer" {
        return &cISCOSYSLOGMIB.Clogserver
    }
    if childYangName == "clogHistoryTable" {
        return &cISCOSYSLOGMIB.Cloghistorytable
    }
    if childYangName == "clogServerConfigTable" {
        return &cISCOSYSLOGMIB.Clogserverconfigtable
    }
    return nil
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["clogBasic"] = &cISCOSYSLOGMIB.Clogbasic
    children["clogHistory"] = &cISCOSYSLOGMIB.Cloghistory
    children["clogServer"] = &cISCOSYSLOGMIB.Clogserver
    children["clogHistoryTable"] = &cISCOSYSLOGMIB.Cloghistorytable
    children["clogServerConfigTable"] = &cISCOSYSLOGMIB.Clogserverconfigtable
    return children
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetYangName() string { return "CISCO-SYSLOG-MIB" }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) SetParent(parent types.Entity) { cISCOSYSLOGMIB.parent = parent }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetParent() types.Entity { return cISCOSYSLOGMIB.parent }

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Clogbasic
type CISCOSYSLOGMIB_Clogbasic struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The number of clogMessageGenerated notifications that have been sent. This
    // number may include notifications that were prevented from being transmitted
    // due to reasons such as resource limitations and/or non-connectivity.  If
    // one is receiving notifications, one can periodically poll this object to
    // determine if any notifications were missed.  If so, a poll of the
    // clogHistoryTable might be appropriate. The type is interface{} with range:
    // 0..4294967295. Units are notifications.
    Clognotificationssent interface{}

    // Indicates whether clogMessageGenerated notifications will or will not be
    // sent when a syslog message is generated by the device.  Disabling
    // notifications does not prevent syslog messages from being added to the
    // clogHistoryTable. The type is bool.
    Clognotificationsenabled interface{}

    // Indicates which syslog severity levels will be processed.  Any syslog
    // message with a severity value greater than this value will be ignored by
    // the agent. note: severity numeric values increase as their severity
    // decreases, e.g. 'error' is more severe than 'debug'. The type is
    // SyslogSeverity.
    Clogmaxseverity interface{}

    // The number of syslog messages which were ignored.  A message will be
    // ignored if it has a severity value greater than clogMaxSeverity. The type
    // is interface{} with range: 0..4294967295. Units are messages.
    Clogmsgignores interface{}

    // The number of syslog messages which could not be processed due to lack of
    // system resources. Most likely this will occur at the same time that syslog
    // messages are generated to indicate this lack of resources.  Increases in
    // this object's value may serve as an indication that system resource levels
    // should be examined via other mib objects.  A message that is dropped will
    // not appear in the history table and no notification will be sent for this
    // message. The type is interface{} with range: 0..4294967295. Units are
    // messages.
    Clogmsgdrops interface{}

    // This object identifies the type of value that will be contained in
    // clogOriginID object.  The possible value(s) are:    'none'       : do not
    // send origin identifier in                    syslog messages.    'other'   
    // : type that is not identified by other                    values specified
    // in this object.    'hostName'   : Send hostname of the system in syslog    
    // messages.    'ipv4Address': Send IP address of the sending interface.   
    // 'contextName': Send context name of the security device.    'userDefined':
    // Send user configured string in                   syslog message.     The
    // value 'other' and 'none' can not be set but    can only be read. The type
    // is Clogoriginidtype.
    Clogoriginidtype interface{}

    // This object is used for configuring the origin identifier for the syslog
    // messages.  The origin identifier is useful for identifying  the source of
    // system logging messages in cases  syslog messages from multiple devices are
    // sent  to a single syslog host. The origin identifier is added to the
    // beginning of all system logging (syslog) messages sent to remote  hosts. 
    // The type of the identifier is specified by clogOriginIDType object.  This
    // object can be written by the SNMP manager only when clogOriginIDType is set
    // to 'userDefined'.  For following value(s) of clogOriginIDType, this object
    // can not be set; the value of this object is derived by the system in these
    // cases:    'contextName'     'ipv4Address'    'hostName'    'other'        
    // 'none'       This object contains the context name of the device, when
    // clogOriginIDType is  set to 'contextName'.  This object contains IPv4
    // address (in dotted decimal notation) of the sending  interface when
    // clogOriginIDType is set to 'ipv4Address'.  This object contains hostname of
    // the system when clogOriginIDType is set to 'hostName'.  This object will
    // contain zero length octet string when clogOriginIDType is either 'none' or
    // 'other'. The type is string.
    Clogoriginid interface{}
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetFilter() yfilter.YFilter { return clogbasic.YFilter }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) SetFilter(yf yfilter.YFilter) { clogbasic.YFilter = yf }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetGoName(yname string) string {
    if yname == "clogNotificationsSent" { return "Clognotificationssent" }
    if yname == "clogNotificationsEnabled" { return "Clognotificationsenabled" }
    if yname == "clogMaxSeverity" { return "Clogmaxseverity" }
    if yname == "clogMsgIgnores" { return "Clogmsgignores" }
    if yname == "clogMsgDrops" { return "Clogmsgdrops" }
    if yname == "clogOriginIDType" { return "Clogoriginidtype" }
    if yname == "clogOriginID" { return "Clogoriginid" }
    return ""
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetSegmentPath() string {
    return "clogBasic"
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clogNotificationsSent"] = clogbasic.Clognotificationssent
    leafs["clogNotificationsEnabled"] = clogbasic.Clognotificationsenabled
    leafs["clogMaxSeverity"] = clogbasic.Clogmaxseverity
    leafs["clogMsgIgnores"] = clogbasic.Clogmsgignores
    leafs["clogMsgDrops"] = clogbasic.Clogmsgdrops
    leafs["clogOriginIDType"] = clogbasic.Clogoriginidtype
    leafs["clogOriginID"] = clogbasic.Clogoriginid
    return leafs
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetBundleName() string { return "cisco_ios_xe" }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetYangName() string { return "clogBasic" }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) SetParent(parent types.Entity) { clogbasic.parent = parent }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetParent() types.Entity { return clogbasic.parent }

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype represents    can only be read.
type CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype string

const (
    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_none CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "none"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_other CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "other"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_hostName CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "hostName"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_ipv4Address CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "ipv4Address"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_contextName CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "contextName"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_userDefined CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "userDefined"
)

// CISCOSYSLOGMIB_Cloghistory
type CISCOSYSLOGMIB_Cloghistory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The upper limit on the number of entries that the clogHistoryTable may
    // contain.  A value of 0 will prevent any history from being retained. When
    // this table is full, the oldest entry will be deleted and a new one will be
    // created. The type is interface{} with range: 0..500. Units are entries.
    Cloghisttablemaxlength interface{}

    // The number of entries that have been removed from the clogHistoryTable in
    // order to make room for new entries. This object can be utilized to
    // determine whether your polling frequency on the history table is fast
    // enough and/or the size of your history table is large enough such that you
    // are not missing messages. The type is interface{} with range:
    // 0..4294967295. Units are messages.
    Cloghistmsgsflushed interface{}
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetFilter() yfilter.YFilter { return cloghistory.YFilter }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) SetFilter(yf yfilter.YFilter) { cloghistory.YFilter = yf }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetGoName(yname string) string {
    if yname == "clogHistTableMaxLength" { return "Cloghisttablemaxlength" }
    if yname == "clogHistMsgsFlushed" { return "Cloghistmsgsflushed" }
    return ""
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetSegmentPath() string {
    return "clogHistory"
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clogHistTableMaxLength"] = cloghistory.Cloghisttablemaxlength
    leafs["clogHistMsgsFlushed"] = cloghistory.Cloghistmsgsflushed
    return leafs
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetBundleName() string { return "cisco_ios_xe" }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetYangName() string { return "clogHistory" }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) SetParent(parent types.Entity) { cloghistory.parent = parent }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetParent() types.Entity { return cloghistory.parent }

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Clogserver
type CISCOSYSLOGMIB_Clogserver struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The maximum number of syslog servers that can be configured for the system
    // in clogServerConfigTable.  A value of zero for this object indicates there
    // is no specified limit for the system and is only dictated by system
    // resources. The type is interface{} with range: 0..4294967295.
    Clogmaxservers interface{}
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetFilter() yfilter.YFilter { return clogserver.YFilter }

func (clogserver *CISCOSYSLOGMIB_Clogserver) SetFilter(yf yfilter.YFilter) { clogserver.YFilter = yf }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetGoName(yname string) string {
    if yname == "clogMaxServers" { return "Clogmaxservers" }
    return ""
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetSegmentPath() string {
    return "clogServer"
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clogMaxServers"] = clogserver.Clogmaxservers
    return leafs
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetBundleName() string { return "cisco_ios_xe" }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetYangName() string { return "clogServer" }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (clogserver *CISCOSYSLOGMIB_Clogserver) SetParent(parent types.Entity) { clogserver.parent = parent }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetParent() types.Entity { return clogserver.parent }

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Cloghistorytable
// A table of syslog messages generated by this device.
// All 'interesting' syslog messages (i.e. severity <=
// clogMaxSeverity) are entered into this table.
type CISCOSYSLOGMIB_Cloghistorytable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A syslog message that was previously generated by this device. Each entry
    // is indexed by a message index. The type is slice of
    // CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry.
    Cloghistoryentry []CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetFilter() yfilter.YFilter { return cloghistorytable.YFilter }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) SetFilter(yf yfilter.YFilter) { cloghistorytable.YFilter = yf }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetGoName(yname string) string {
    if yname == "clogHistoryEntry" { return "Cloghistoryentry" }
    return ""
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetSegmentPath() string {
    return "clogHistoryTable"
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clogHistoryEntry" {
        for _, c := range cloghistorytable.Cloghistoryentry {
            if cloghistorytable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry{}
        cloghistorytable.Cloghistoryentry = append(cloghistorytable.Cloghistoryentry, child)
        return &cloghistorytable.Cloghistoryentry[len(cloghistorytable.Cloghistoryentry)-1]
    }
    return nil
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cloghistorytable.Cloghistoryentry {
        children[cloghistorytable.Cloghistoryentry[i].GetSegmentPath()] = &cloghistorytable.Cloghistoryentry[i]
    }
    return children
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetBundleName() string { return "cisco_ios_xe" }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetYangName() string { return "clogHistoryTable" }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) SetParent(parent types.Entity) { cloghistorytable.parent = parent }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetParent() types.Entity { return cloghistorytable.parent }

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry
// A syslog message that was previously generated by this
// device. Each entry is indexed by a message index.
type CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing integer for the sole
    // purpose of indexing messages.  When it reaches the maximum value the agent
    // flushes the table and wraps the value back to 1. The type is interface{}
    // with range: 1..2147483647.
    Cloghistindex interface{}

    // Name of the facility that generated this message. For example: 'SYS'. The
    // type is string with length: 1..20.
    Cloghistfacility interface{}

    // The severity of the message. The type is SyslogSeverity.
    Cloghistseverity interface{}

    // A textual identification for the message type. A facility name in
    // conjunction with a message name uniquely identifies a message type. The
    // type is string with length: 1..30.
    Cloghistmsgname interface{}

    // The text of the message.  If the text of the message exceeds 255 bytes, the
    // message will be truncated to 254 bytes and a '*' character will be appended
    // - indicating that the message has been truncated. The type is string with
    // length: 1..255.
    Cloghistmsgtext interface{}

    // The value of sysUpTime when this message was generated. The type is
    // interface{} with range: 0..4294967295.
    Cloghisttimestamp interface{}
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetFilter() yfilter.YFilter { return cloghistoryentry.YFilter }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) SetFilter(yf yfilter.YFilter) { cloghistoryentry.YFilter = yf }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetGoName(yname string) string {
    if yname == "clogHistIndex" { return "Cloghistindex" }
    if yname == "clogHistFacility" { return "Cloghistfacility" }
    if yname == "clogHistSeverity" { return "Cloghistseverity" }
    if yname == "clogHistMsgName" { return "Cloghistmsgname" }
    if yname == "clogHistMsgText" { return "Cloghistmsgtext" }
    if yname == "clogHistTimestamp" { return "Cloghisttimestamp" }
    return ""
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetSegmentPath() string {
    return "clogHistoryEntry" + "[clogHistIndex='" + fmt.Sprintf("%v", cloghistoryentry.Cloghistindex) + "']"
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clogHistIndex"] = cloghistoryentry.Cloghistindex
    leafs["clogHistFacility"] = cloghistoryentry.Cloghistfacility
    leafs["clogHistSeverity"] = cloghistoryentry.Cloghistseverity
    leafs["clogHistMsgName"] = cloghistoryentry.Cloghistmsgname
    leafs["clogHistMsgText"] = cloghistoryentry.Cloghistmsgtext
    leafs["clogHistTimestamp"] = cloghistoryentry.Cloghisttimestamp
    return leafs
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetBundleName() string { return "cisco_ios_xe" }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetYangName() string { return "clogHistoryEntry" }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) SetParent(parent types.Entity) { cloghistoryentry.parent = parent }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetParent() types.Entity { return cloghistoryentry.parent }

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetParentYangName() string { return "clogHistoryTable" }

// CISCOSYSLOGMIB_Clogserverconfigtable
// This table contains entries that allow application
// to configure syslog servers for the system.
// 
// The maximum number of entries that can be created
// for this table is limited by the object
// clogMaxServers.
type CISCOSYSLOGMIB_Clogserverconfigtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An entry containing information about syslog servers configured for the
    // system. The type is slice of
    // CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry.
    Clogserverconfigentry []CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetFilter() yfilter.YFilter { return clogserverconfigtable.YFilter }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) SetFilter(yf yfilter.YFilter) { clogserverconfigtable.YFilter = yf }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetGoName(yname string) string {
    if yname == "clogServerConfigEntry" { return "Clogserverconfigentry" }
    return ""
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetSegmentPath() string {
    return "clogServerConfigTable"
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "clogServerConfigEntry" {
        for _, c := range clogserverconfigtable.Clogserverconfigentry {
            if clogserverconfigtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry{}
        clogserverconfigtable.Clogserverconfigentry = append(clogserverconfigtable.Clogserverconfigentry, child)
        return &clogserverconfigtable.Clogserverconfigentry[len(clogserverconfigtable.Clogserverconfigentry)-1]
    }
    return nil
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range clogserverconfigtable.Clogserverconfigentry {
        children[clogserverconfigtable.Clogserverconfigentry[i].GetSegmentPath()] = &clogserverconfigtable.Clogserverconfigentry[i]
    }
    return children
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetBundleName() string { return "cisco_ios_xe" }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetYangName() string { return "clogServerConfigTable" }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) SetParent(parent types.Entity) { clogserverconfigtable.parent = parent }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetParent() types.Entity { return clogserverconfigtable.parent }

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetParentYangName() string { return "CISCO-SYSLOG-MIB" }

// CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry
// An entry containing information about syslog servers
// configured for the system.
type CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of Internet address of this syslog
    // server. The type is InetAddressType.
    Clogserveraddrtype interface{}

    // This attribute is a key. The Internet address of this syslog server. The
    // type of this address is determined by the value of the clogServerAddrType
    // object. The type is string with length: 0..64.
    Clogserveraddr interface{}

    // The status object used to manage rows in this table.  A row may only be
    // created by setting this object to 'createAndGo'.  A row may only be deleted
    // by setting this object to 'destroy'. The type is RowStatus.
    Clogserverstatus interface{}
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetFilter() yfilter.YFilter { return clogserverconfigentry.YFilter }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) SetFilter(yf yfilter.YFilter) { clogserverconfigentry.YFilter = yf }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetGoName(yname string) string {
    if yname == "clogServerAddrType" { return "Clogserveraddrtype" }
    if yname == "clogServerAddr" { return "Clogserveraddr" }
    if yname == "clogServerStatus" { return "Clogserverstatus" }
    return ""
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetSegmentPath() string {
    return "clogServerConfigEntry" + "[clogServerAddrType='" + fmt.Sprintf("%v", clogserverconfigentry.Clogserveraddrtype) + "']" + "[clogServerAddr='" + fmt.Sprintf("%v", clogserverconfigentry.Clogserveraddr) + "']"
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["clogServerAddrType"] = clogserverconfigentry.Clogserveraddrtype
    leafs["clogServerAddr"] = clogserverconfigentry.Clogserveraddr
    leafs["clogServerStatus"] = clogserverconfigentry.Clogserverstatus
    return leafs
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetBundleName() string { return "cisco_ios_xe" }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetYangName() string { return "clogServerConfigEntry" }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) SetParent(parent types.Entity) { clogserverconfigentry.parent = parent }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetParent() types.Entity { return clogserverconfigentry.parent }

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetParentYangName() string { return "clogServerConfigTable" }

