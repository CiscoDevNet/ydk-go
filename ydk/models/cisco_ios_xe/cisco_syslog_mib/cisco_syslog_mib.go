// The MIB module to describe and store the system
// messages generated by the IOS and any other
// OS which supports syslogs.
package cisco_syslog_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_syslog_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-SYSLOG-MIB CISCO-SYSLOG-MIB}", reflect.TypeOf(CISCOSYSLOGMIB{}))
    ydk.RegisterEntity("CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB", reflect.TypeOf(CISCOSYSLOGMIB{}))
}

// SyslogSeverity represents  'debug'        : debug-level messages.
type SyslogSeverity string

const (
    SyslogSeverity_emergency SyslogSeverity = "emergency"

    SyslogSeverity_alert SyslogSeverity = "alert"

    SyslogSeverity_critical SyslogSeverity = "critical"

    SyslogSeverity_error SyslogSeverity = "error"

    SyslogSeverity_warning SyslogSeverity = "warning"

    SyslogSeverity_notice SyslogSeverity = "notice"

    SyslogSeverity_info SyslogSeverity = "info"

    SyslogSeverity_debug SyslogSeverity = "debug"
)

// CISCOSYSLOGMIB
type CISCOSYSLOGMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Clogbasic CISCOSYSLOGMIB_Clogbasic

    
    Cloghistory CISCOSYSLOGMIB_Cloghistory

    
    Clogserver CISCOSYSLOGMIB_Clogserver

    // A table of syslog messages generated by this device. All 'interesting'
    // syslog messages (i.e. severity <= clogMaxSeverity) are entered into this
    // table.
    Cloghistorytable CISCOSYSLOGMIB_Cloghistorytable

    // This table contains entries that allow application to configure syslog
    // servers for the system.  The maximum number of entries that can be created
    // for this table is limited by the object clogMaxServers.
    Clogserverconfigtable CISCOSYSLOGMIB_Clogserverconfigtable
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetEntityData() *types.CommonEntityData {
    cISCOSYSLOGMIB.EntityData.YFilter = cISCOSYSLOGMIB.YFilter
    cISCOSYSLOGMIB.EntityData.YangName = "CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOSYSLOGMIB.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.SegmentPath = "CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOSYSLOGMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOSYSLOGMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOSYSLOGMIB.EntityData.Children = make(map[string]types.YChild)
    cISCOSYSLOGMIB.EntityData.Children["clogBasic"] = types.YChild{"Clogbasic", &cISCOSYSLOGMIB.Clogbasic}
    cISCOSYSLOGMIB.EntityData.Children["clogHistory"] = types.YChild{"Cloghistory", &cISCOSYSLOGMIB.Cloghistory}
    cISCOSYSLOGMIB.EntityData.Children["clogServer"] = types.YChild{"Clogserver", &cISCOSYSLOGMIB.Clogserver}
    cISCOSYSLOGMIB.EntityData.Children["clogHistoryTable"] = types.YChild{"Cloghistorytable", &cISCOSYSLOGMIB.Cloghistorytable}
    cISCOSYSLOGMIB.EntityData.Children["clogServerConfigTable"] = types.YChild{"Clogserverconfigtable", &cISCOSYSLOGMIB.Clogserverconfigtable}
    cISCOSYSLOGMIB.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cISCOSYSLOGMIB.EntityData)
}

// CISCOSYSLOGMIB_Clogbasic
type CISCOSYSLOGMIB_Clogbasic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of clogMessageGenerated notifications that have been sent. This
    // number may include notifications that were prevented from being transmitted
    // due to reasons such as resource limitations and/or non-connectivity.  If
    // one is receiving notifications, one can periodically poll this object to
    // determine if any notifications were missed.  If so, a poll of the
    // clogHistoryTable might be appropriate. The type is interface{} with range:
    // 0..4294967295. Units are notifications.
    Clognotificationssent interface{}

    // Indicates whether clogMessageGenerated notifications will or will not be
    // sent when a syslog message is generated by the device.  Disabling
    // notifications does not prevent syslog messages from being added to the
    // clogHistoryTable. The type is bool.
    Clognotificationsenabled interface{}

    // Indicates which syslog severity levels will be processed.  Any syslog
    // message with a severity value greater than this value will be ignored by
    // the agent. note: severity numeric values increase as their severity
    // decreases, e.g. 'error' is more severe than 'debug'. The type is
    // SyslogSeverity.
    Clogmaxseverity interface{}

    // The number of syslog messages which were ignored.  A message will be
    // ignored if it has a severity value greater than clogMaxSeverity. The type
    // is interface{} with range: 0..4294967295. Units are messages.
    Clogmsgignores interface{}

    // The number of syslog messages which could not be processed due to lack of
    // system resources. Most likely this will occur at the same time that syslog
    // messages are generated to indicate this lack of resources.  Increases in
    // this object's value may serve as an indication that system resource levels
    // should be examined via other mib objects.  A message that is dropped will
    // not appear in the history table and no notification will be sent for this
    // message. The type is interface{} with range: 0..4294967295. Units are
    // messages.
    Clogmsgdrops interface{}

    // This object identifies the type of value that will be contained in
    // clogOriginID object.  The possible value(s) are:    'none'       : do not
    // send origin identifier in                    syslog messages.    'other'   
    // : type that is not identified by other                    values specified
    // in this object.    'hostName'   : Send hostname of the system in syslog    
    // messages.    'ipv4Address': Send IP address of the sending interface.   
    // 'contextName': Send context name of the security device.    'userDefined':
    // Send user configured string in                   syslog message.     The
    // value 'other' and 'none' can not be set but    can only be read. The type
    // is Clogoriginidtype.
    Clogoriginidtype interface{}

    // This object is used for configuring the origin identifier for the syslog
    // messages.  The origin identifier is useful for identifying  the source of
    // system logging messages in cases  syslog messages from multiple devices are
    // sent  to a single syslog host. The origin identifier is added to the
    // beginning of all system logging (syslog) messages sent to remote  hosts. 
    // The type of the identifier is specified by clogOriginIDType object.  This
    // object can be written by the SNMP manager only when clogOriginIDType is set
    // to 'userDefined'.  For following value(s) of clogOriginIDType, this object
    // can not be set; the value of this object is derived by the system in these
    // cases:    'contextName'     'ipv4Address'    'hostName'    'other'        
    // 'none'       This object contains the context name of the device, when
    // clogOriginIDType is  set to 'contextName'.  This object contains IPv4
    // address (in dotted decimal notation) of the sending  interface when
    // clogOriginIDType is set to 'ipv4Address'.  This object contains hostname of
    // the system when clogOriginIDType is set to 'hostName'.  This object will
    // contain zero length octet string when clogOriginIDType is either 'none' or
    // 'other'. The type is string.
    Clogoriginid interface{}
}

func (clogbasic *CISCOSYSLOGMIB_Clogbasic) GetEntityData() *types.CommonEntityData {
    clogbasic.EntityData.YFilter = clogbasic.YFilter
    clogbasic.EntityData.YangName = "clogBasic"
    clogbasic.EntityData.BundleName = "cisco_ios_xe"
    clogbasic.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogbasic.EntityData.SegmentPath = "clogBasic"
    clogbasic.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogbasic.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogbasic.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogbasic.EntityData.Children = make(map[string]types.YChild)
    clogbasic.EntityData.Leafs = make(map[string]types.YLeaf)
    clogbasic.EntityData.Leafs["clogNotificationsSent"] = types.YLeaf{"Clognotificationssent", clogbasic.Clognotificationssent}
    clogbasic.EntityData.Leafs["clogNotificationsEnabled"] = types.YLeaf{"Clognotificationsenabled", clogbasic.Clognotificationsenabled}
    clogbasic.EntityData.Leafs["clogMaxSeverity"] = types.YLeaf{"Clogmaxseverity", clogbasic.Clogmaxseverity}
    clogbasic.EntityData.Leafs["clogMsgIgnores"] = types.YLeaf{"Clogmsgignores", clogbasic.Clogmsgignores}
    clogbasic.EntityData.Leafs["clogMsgDrops"] = types.YLeaf{"Clogmsgdrops", clogbasic.Clogmsgdrops}
    clogbasic.EntityData.Leafs["clogOriginIDType"] = types.YLeaf{"Clogoriginidtype", clogbasic.Clogoriginidtype}
    clogbasic.EntityData.Leafs["clogOriginID"] = types.YLeaf{"Clogoriginid", clogbasic.Clogoriginid}
    return &(clogbasic.EntityData)
}

// CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype represents    can only be read.
type CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype string

const (
    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_none CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "none"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_other CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "other"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_hostName CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "hostName"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_ipv4Address CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "ipv4Address"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_contextName CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "contextName"

    CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype_userDefined CISCOSYSLOGMIB_Clogbasic_Clogoriginidtype = "userDefined"
)

// CISCOSYSLOGMIB_Cloghistory
type CISCOSYSLOGMIB_Cloghistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The upper limit on the number of entries that the clogHistoryTable may
    // contain.  A value of 0 will prevent any history from being retained. When
    // this table is full, the oldest entry will be deleted and a new one will be
    // created. The type is interface{} with range: 0..500. Units are entries.
    Cloghisttablemaxlength interface{}

    // The number of entries that have been removed from the clogHistoryTable in
    // order to make room for new entries. This object can be utilized to
    // determine whether your polling frequency on the history table is fast
    // enough and/or the size of your history table is large enough such that you
    // are not missing messages. The type is interface{} with range:
    // 0..4294967295. Units are messages.
    Cloghistmsgsflushed interface{}
}

func (cloghistory *CISCOSYSLOGMIB_Cloghistory) GetEntityData() *types.CommonEntityData {
    cloghistory.EntityData.YFilter = cloghistory.YFilter
    cloghistory.EntityData.YangName = "clogHistory"
    cloghistory.EntityData.BundleName = "cisco_ios_xe"
    cloghistory.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    cloghistory.EntityData.SegmentPath = "clogHistory"
    cloghistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cloghistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cloghistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cloghistory.EntityData.Children = make(map[string]types.YChild)
    cloghistory.EntityData.Leafs = make(map[string]types.YLeaf)
    cloghistory.EntityData.Leafs["clogHistTableMaxLength"] = types.YLeaf{"Cloghisttablemaxlength", cloghistory.Cloghisttablemaxlength}
    cloghistory.EntityData.Leafs["clogHistMsgsFlushed"] = types.YLeaf{"Cloghistmsgsflushed", cloghistory.Cloghistmsgsflushed}
    return &(cloghistory.EntityData)
}

// CISCOSYSLOGMIB_Clogserver
type CISCOSYSLOGMIB_Clogserver struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum number of syslog servers that can be configured for the system
    // in clogServerConfigTable.  A value of zero for this object indicates there
    // is no specified limit for the system and is only dictated by system
    // resources. The type is interface{} with range: 0..4294967295.
    Clogmaxservers interface{}
}

func (clogserver *CISCOSYSLOGMIB_Clogserver) GetEntityData() *types.CommonEntityData {
    clogserver.EntityData.YFilter = clogserver.YFilter
    clogserver.EntityData.YangName = "clogServer"
    clogserver.EntityData.BundleName = "cisco_ios_xe"
    clogserver.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogserver.EntityData.SegmentPath = "clogServer"
    clogserver.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogserver.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogserver.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogserver.EntityData.Children = make(map[string]types.YChild)
    clogserver.EntityData.Leafs = make(map[string]types.YLeaf)
    clogserver.EntityData.Leafs["clogMaxServers"] = types.YLeaf{"Clogmaxservers", clogserver.Clogmaxservers}
    return &(clogserver.EntityData)
}

// CISCOSYSLOGMIB_Cloghistorytable
// A table of syslog messages generated by this device.
// All 'interesting' syslog messages (i.e. severity <=
// clogMaxSeverity) are entered into this table.
type CISCOSYSLOGMIB_Cloghistorytable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A syslog message that was previously generated by this device. Each entry
    // is indexed by a message index. The type is slice of
    // CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry.
    Cloghistoryentry []CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry
}

func (cloghistorytable *CISCOSYSLOGMIB_Cloghistorytable) GetEntityData() *types.CommonEntityData {
    cloghistorytable.EntityData.YFilter = cloghistorytable.YFilter
    cloghistorytable.EntityData.YangName = "clogHistoryTable"
    cloghistorytable.EntityData.BundleName = "cisco_ios_xe"
    cloghistorytable.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    cloghistorytable.EntityData.SegmentPath = "clogHistoryTable"
    cloghistorytable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cloghistorytable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cloghistorytable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cloghistorytable.EntityData.Children = make(map[string]types.YChild)
    cloghistorytable.EntityData.Children["clogHistoryEntry"] = types.YChild{"Cloghistoryentry", nil}
    for i := range cloghistorytable.Cloghistoryentry {
        cloghistorytable.EntityData.Children[types.GetSegmentPath(&cloghistorytable.Cloghistoryentry[i])] = types.YChild{"Cloghistoryentry", &cloghistorytable.Cloghistoryentry[i]}
    }
    cloghistorytable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cloghistorytable.EntityData)
}

// CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry
// A syslog message that was previously generated by this
// device. Each entry is indexed by a message index.
type CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing integer for the sole
    // purpose of indexing messages.  When it reaches the maximum value the agent
    // flushes the table and wraps the value back to 1. The type is interface{}
    // with range: 1..2147483647.
    Cloghistindex interface{}

    // Name of the facility that generated this message. For example: 'SYS'. The
    // type is string with length: 1..20.
    Cloghistfacility interface{}

    // The severity of the message. The type is SyslogSeverity.
    Cloghistseverity interface{}

    // A textual identification for the message type. A facility name in
    // conjunction with a message name uniquely identifies a message type. The
    // type is string with length: 1..30.
    Cloghistmsgname interface{}

    // The text of the message.  If the text of the message exceeds 255 bytes, the
    // message will be truncated to 254 bytes and a '*' character will be appended
    // - indicating that the message has been truncated. The type is string with
    // length: 1..255.
    Cloghistmsgtext interface{}

    // The value of sysUpTime when this message was generated. The type is
    // interface{} with range: 0..4294967295.
    Cloghisttimestamp interface{}
}

func (cloghistoryentry *CISCOSYSLOGMIB_Cloghistorytable_Cloghistoryentry) GetEntityData() *types.CommonEntityData {
    cloghistoryentry.EntityData.YFilter = cloghistoryentry.YFilter
    cloghistoryentry.EntityData.YangName = "clogHistoryEntry"
    cloghistoryentry.EntityData.BundleName = "cisco_ios_xe"
    cloghistoryentry.EntityData.ParentYangName = "clogHistoryTable"
    cloghistoryentry.EntityData.SegmentPath = "clogHistoryEntry" + "[clogHistIndex='" + fmt.Sprintf("%v", cloghistoryentry.Cloghistindex) + "']"
    cloghistoryentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cloghistoryentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cloghistoryentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cloghistoryentry.EntityData.Children = make(map[string]types.YChild)
    cloghistoryentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cloghistoryentry.EntityData.Leafs["clogHistIndex"] = types.YLeaf{"Cloghistindex", cloghistoryentry.Cloghistindex}
    cloghistoryentry.EntityData.Leafs["clogHistFacility"] = types.YLeaf{"Cloghistfacility", cloghistoryentry.Cloghistfacility}
    cloghistoryentry.EntityData.Leafs["clogHistSeverity"] = types.YLeaf{"Cloghistseverity", cloghistoryentry.Cloghistseverity}
    cloghistoryentry.EntityData.Leafs["clogHistMsgName"] = types.YLeaf{"Cloghistmsgname", cloghistoryentry.Cloghistmsgname}
    cloghistoryentry.EntityData.Leafs["clogHistMsgText"] = types.YLeaf{"Cloghistmsgtext", cloghistoryentry.Cloghistmsgtext}
    cloghistoryentry.EntityData.Leafs["clogHistTimestamp"] = types.YLeaf{"Cloghisttimestamp", cloghistoryentry.Cloghisttimestamp}
    return &(cloghistoryentry.EntityData)
}

// CISCOSYSLOGMIB_Clogserverconfigtable
// This table contains entries that allow application
// to configure syslog servers for the system.
// 
// The maximum number of entries that can be created
// for this table is limited by the object
// clogMaxServers.
type CISCOSYSLOGMIB_Clogserverconfigtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An entry containing information about syslog servers configured for the
    // system. The type is slice of
    // CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry.
    Clogserverconfigentry []CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry
}

func (clogserverconfigtable *CISCOSYSLOGMIB_Clogserverconfigtable) GetEntityData() *types.CommonEntityData {
    clogserverconfigtable.EntityData.YFilter = clogserverconfigtable.YFilter
    clogserverconfigtable.EntityData.YangName = "clogServerConfigTable"
    clogserverconfigtable.EntityData.BundleName = "cisco_ios_xe"
    clogserverconfigtable.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogserverconfigtable.EntityData.SegmentPath = "clogServerConfigTable"
    clogserverconfigtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogserverconfigtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogserverconfigtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogserverconfigtable.EntityData.Children = make(map[string]types.YChild)
    clogserverconfigtable.EntityData.Children["clogServerConfigEntry"] = types.YChild{"Clogserverconfigentry", nil}
    for i := range clogserverconfigtable.Clogserverconfigentry {
        clogserverconfigtable.EntityData.Children[types.GetSegmentPath(&clogserverconfigtable.Clogserverconfigentry[i])] = types.YChild{"Clogserverconfigentry", &clogserverconfigtable.Clogserverconfigentry[i]}
    }
    clogserverconfigtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(clogserverconfigtable.EntityData)
}

// CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry
// An entry containing information about syslog servers
// configured for the system.
type CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of Internet address of this syslog
    // server. The type is InetAddressType.
    Clogserveraddrtype interface{}

    // This attribute is a key. The Internet address of this syslog server. The
    // type of this address is determined by the value of the clogServerAddrType
    // object. The type is string with length: 0..64.
    Clogserveraddr interface{}

    // The status object used to manage rows in this table.  A row may only be
    // created by setting this object to 'createAndGo'.  A row may only be deleted
    // by setting this object to 'destroy'. The type is RowStatus.
    Clogserverstatus interface{}
}

func (clogserverconfigentry *CISCOSYSLOGMIB_Clogserverconfigtable_Clogserverconfigentry) GetEntityData() *types.CommonEntityData {
    clogserverconfigentry.EntityData.YFilter = clogserverconfigentry.YFilter
    clogserverconfigentry.EntityData.YangName = "clogServerConfigEntry"
    clogserverconfigentry.EntityData.BundleName = "cisco_ios_xe"
    clogserverconfigentry.EntityData.ParentYangName = "clogServerConfigTable"
    clogserverconfigentry.EntityData.SegmentPath = "clogServerConfigEntry" + "[clogServerAddrType='" + fmt.Sprintf("%v", clogserverconfigentry.Clogserveraddrtype) + "']" + "[clogServerAddr='" + fmt.Sprintf("%v", clogserverconfigentry.Clogserveraddr) + "']"
    clogserverconfigentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogserverconfigentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogserverconfigentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogserverconfigentry.EntityData.Children = make(map[string]types.YChild)
    clogserverconfigentry.EntityData.Leafs = make(map[string]types.YLeaf)
    clogserverconfigentry.EntityData.Leafs["clogServerAddrType"] = types.YLeaf{"Clogserveraddrtype", clogserverconfigentry.Clogserveraddrtype}
    clogserverconfigentry.EntityData.Leafs["clogServerAddr"] = types.YLeaf{"Clogserveraddr", clogserverconfigentry.Clogserveraddr}
    clogserverconfigentry.EntityData.Leafs["clogServerStatus"] = types.YLeaf{"Clogserverstatus", clogserverconfigentry.Clogserverstatus}
    return &(clogserverconfigentry.EntityData)
}

