// This MIB module defines the managed objects 
// and notifications for Ethernet Connectivity 
// Fault Management (CFM).
// 
// CFM is an end-to-end per service instance Ethernet layer 
// Operations, Administration and Management (OAM) protocol. 
// 
// CFM events include: 
// 
// - Maintenance End-Point (MEP) coming up: establishing 
//   connectivity
// 
// - Maintenance End-Point going down: losing connectivity
// 
// - Maintenance End-Point unknown: unexpected
// 
// - Maintenance End-Point missing: expected but not reachable
// 
// - Continuity Check Configuration Error: collision in MEP IDs
// 
// - Continuity Check Loop: forwarding loop in network
// 
// - Continuity Check Cross-connect: cross-connected 
//   forwarding path.
// 
// The following acronyms are used in this module:
// 
// - MEP: Maintenance End Point
// 
// - MEPID: Maintenance End Point Identifier
// 
// - CC: Continuity Check
// 
// - CCDB: Continuity Check Database
// 
// - SVLAN: Service Provider Virtual Local Area Network
// 
// - VLAN: Virtual Local Area Network
// 
// - CLI: Command Line Interface.
// 
// - OAM: Operations Administration and Management.
package cisco_ether_cfm_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_ether_cfm_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-ETHER-CFM-MIB CISCO-ETHER-CFM-MIB}", reflect.TypeOf(CISCOETHERCFMMIB{}))
    ydk.RegisterEntity("CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB", reflect.TypeOf(CISCOETHERCFMMIB{}))
}

// CISCOETHERCFMMIB
type CISCOETHERCFMMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CecCfmEvents CISCOETHERCFMMIB_CecCfmEvents

    // This table contains a collection of Ethernet CFM notifications generated by
    // the device. The notifications correspond to events recognized by the device
    // and fall into the following classes:  - MEP-Up  - MEP-Down  - Configuration
    // Error  - Forwarding Loop  - Cross-connected Ethernet Connection  -
    // Crosscheck Missing MEP  - Crosscheck Unknown MEP  - Crosscheck Service Up 
    // A conceptual row is created in this table whenever the device  encounters
    // one of the events listed above. Rows can only be created by the agent, and
    // not at the request of the management station.  Rows are deleted at the
    // request of a management station by  setting the cEtherCfmEventDeleteRow
    // object to 'delete'. Another way of deleting rows is through the CLI. 
    // Although this table may be indexed uniquely by the  cEtherCfmEventIndex
    // index, the first two indices  (cEtherCfmEventDomainIndex and
    // cEtherCfmEventSvlan) are used to speed-up queries per maintenance domain
    // and per customer service instance. Furthermore, these two indices will help
    // in defining the MIB views easily in order to restrict access to the MIB to
    // particular entities (be it a service provider, or operator, or customer).
    CEtherCfmEventTable CISCOETHERCFMMIB_CEtherCfmEventTable
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetEntityData() *types.CommonEntityData {
    cISCOETHERCFMMIB.EntityData.YFilter = cISCOETHERCFMMIB.YFilter
    cISCOETHERCFMMIB.EntityData.YangName = "CISCO-ETHER-CFM-MIB"
    cISCOETHERCFMMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOETHERCFMMIB.EntityData.ParentYangName = "CISCO-ETHER-CFM-MIB"
    cISCOETHERCFMMIB.EntityData.SegmentPath = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB"
    cISCOETHERCFMMIB.EntityData.AbsolutePath = cISCOETHERCFMMIB.EntityData.SegmentPath
    cISCOETHERCFMMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOETHERCFMMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOETHERCFMMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOETHERCFMMIB.EntityData.Children = types.NewOrderedMap()
    cISCOETHERCFMMIB.EntityData.Children.Append("cecCfmEvents", types.YChild{"CecCfmEvents", &cISCOETHERCFMMIB.CecCfmEvents})
    cISCOETHERCFMMIB.EntityData.Children.Append("cEtherCfmEventTable", types.YChild{"CEtherCfmEventTable", &cISCOETHERCFMMIB.CEtherCfmEventTable})
    cISCOETHERCFMMIB.EntityData.Leafs = types.NewOrderedMap()

    cISCOETHERCFMMIB.EntityData.YListKeys = []string {}

    return &(cISCOETHERCFMMIB.EntityData)
}

// CISCOETHERCFMMIB_CecCfmEvents
type CISCOETHERCFMMIB_CecCfmEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object specifies the maximum upper value supported  for the
    // cEtherCfmEventIndex index by this agent. The type is interface{} with
    // range: 1..4294967295.
    CEtherCfmMaxEventIndex interface{}
}

func (cecCfmEvents *CISCOETHERCFMMIB_CecCfmEvents) GetEntityData() *types.CommonEntityData {
    cecCfmEvents.EntityData.YFilter = cecCfmEvents.YFilter
    cecCfmEvents.EntityData.YangName = "cecCfmEvents"
    cecCfmEvents.EntityData.BundleName = "cisco_ios_xe"
    cecCfmEvents.EntityData.ParentYangName = "CISCO-ETHER-CFM-MIB"
    cecCfmEvents.EntityData.SegmentPath = "cecCfmEvents"
    cecCfmEvents.EntityData.AbsolutePath = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/" + cecCfmEvents.EntityData.SegmentPath
    cecCfmEvents.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cecCfmEvents.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cecCfmEvents.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cecCfmEvents.EntityData.Children = types.NewOrderedMap()
    cecCfmEvents.EntityData.Leafs = types.NewOrderedMap()
    cecCfmEvents.EntityData.Leafs.Append("cEtherCfmMaxEventIndex", types.YLeaf{"CEtherCfmMaxEventIndex", cecCfmEvents.CEtherCfmMaxEventIndex})

    cecCfmEvents.EntityData.YListKeys = []string {}

    return &(cecCfmEvents.EntityData)
}

// CISCOETHERCFMMIB_CEtherCfmEventTable
// This table contains a collection of Ethernet CFM notifications
// generated by the device. The notifications correspond to events
// recognized by the device and fall into the following classes:
// 
// - MEP-Up
// 
// - MEP-Down
// 
// - Configuration Error
// 
// - Forwarding Loop
// 
// - Cross-connected Ethernet Connection
// 
// - Crosscheck Missing MEP
// 
// - Crosscheck Unknown MEP
// 
// - Crosscheck Service Up
// 
// A conceptual row is created in this table whenever the device 
// encounters one of the events listed above. Rows can only be
// created by the agent, and not at the request of the management
// station.
// 
// Rows are deleted at the request of a management station by 
// setting the cEtherCfmEventDeleteRow object to 'delete'.
// Another way of deleting rows is through the CLI.
// 
// Although this table may be indexed uniquely by the 
// cEtherCfmEventIndex index, the first two indices 
// (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used
// to speed-up queries per maintenance domain and per customer
// service instance. Furthermore, these two indices will help
// in defining the MIB views easily in order to restrict access
// to the MIB to particular entities (be it a service provider,
// or operator, or customer).
type CISCOETHERCFMMIB_CEtherCfmEventTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An entry in this table is created for every event reported by Ethernet CFM.
    // The type is slice of
    // CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry.
    CEtherCfmEventEntry []*CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry
}

func (cEtherCfmEventTable *CISCOETHERCFMMIB_CEtherCfmEventTable) GetEntityData() *types.CommonEntityData {
    cEtherCfmEventTable.EntityData.YFilter = cEtherCfmEventTable.YFilter
    cEtherCfmEventTable.EntityData.YangName = "cEtherCfmEventTable"
    cEtherCfmEventTable.EntityData.BundleName = "cisco_ios_xe"
    cEtherCfmEventTable.EntityData.ParentYangName = "CISCO-ETHER-CFM-MIB"
    cEtherCfmEventTable.EntityData.SegmentPath = "cEtherCfmEventTable"
    cEtherCfmEventTable.EntityData.AbsolutePath = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/" + cEtherCfmEventTable.EntityData.SegmentPath
    cEtherCfmEventTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cEtherCfmEventTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cEtherCfmEventTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cEtherCfmEventTable.EntityData.Children = types.NewOrderedMap()
    cEtherCfmEventTable.EntityData.Children.Append("cEtherCfmEventEntry", types.YChild{"CEtherCfmEventEntry", nil})
    for i := range cEtherCfmEventTable.CEtherCfmEventEntry {
        cEtherCfmEventTable.EntityData.Children.Append(types.GetSegmentPath(cEtherCfmEventTable.CEtherCfmEventEntry[i]), types.YChild{"CEtherCfmEventEntry", cEtherCfmEventTable.CEtherCfmEventEntry[i]})
    }
    cEtherCfmEventTable.EntityData.Leafs = types.NewOrderedMap()

    cEtherCfmEventTable.EntityData.YListKeys = []string {}

    return &(cEtherCfmEventTable.EntityData)
}

// CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry
// An entry in this table is created for every event reported
// by Ethernet CFM.
type CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. This object represents the ID which uniquely
    // identifies  a CFM maintenance domain on the device. Every domain can be
    // uniquely identified by its user-defined  name (cEtherCfmEventDomainName) or
    // device-assigned ID (this object). The type is interface{} with range:
    // 1..4294967295.
    CEtherCfmEventDomainIndex interface{}

    // This attribute is a key. The service VLAN identifier of the customer
    // service  instance to which the event belongs. The type is interface{} with
    // range: 1..4094.
    CEtherCfmEventSvlan interface{}

    // This attribute is a key. A monotonically increasing integer for the sole
    // purpose of indexing CFM events.  When it reaches the maximum value 
    // supported by the agent, as defined in the  cEtherCfmMaxEventIndex object,
    // the agent wraps the value back to 1 and may flush existing entries. The
    // type is interface{} with range: 1..4294967295.
    CEtherCfmEventIndex interface{}

    // The name of the CFM maintenance domain. The type is string.
    CEtherCfmEventDomainName interface{}

    // This object informs the management station of how to interpret the rest of
    // the objects within a row, as summarized in the  following table:  Legend I:
    // Ignored Object         V: Valid Object  Object                             
    // cEtherCfmEventType                                | 1 | 2 | 3 | 4 | 5 | 6 |
    // 7 | 8 ================================================================     
    // |   |   |   |   |   |   |   | cEtherCfmEventDomainIndex      | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventSvlan            | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventIndex            | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLastChange       | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventServiceId        | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventDomainName       | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventLclMepid         | I | I | I |
    // V | V | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLclMacAddress    | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventLclMepCount      | V | V | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLclIfCount       | V | V | I | I | I | I | I | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventRmtMepid         | V | V | V |
    // I | I | V | V | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventRmtMacAddress    | V | V | V | I | V | V | V | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventRmtPortState     | V | I | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventRmtServiceId     | I | I | V | I | I | I | I | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventCode             | V | V | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventDeleteRow        | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   |  Note: When reading any ignored object, a
    // value of 0 will  be returned by the agent. The type is CEtherCfmEventType.
    CEtherCfmEventType interface{}

    // The value of sysUpTime at the time when this row was created. The type is
    // interface{} with range: 0..4294967295.
    CEtherCfmEventLastChange interface{}

    // The customer service instance to which the event belongs. The type is
    // string with length: 1..100.
    CEtherCfmEventServiceId interface{}

    // The identifier of the local MEP impacted by the event. The type is
    // interface{} with range: 0..8191.
    CEtherCfmEventLclMepid interface{}

    // The MAC address of the device reporting the event. The type is string with
    // pattern: b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    CEtherCfmEventLclMacAddress interface{}

    // The number of local MEPs affected by the event. The type is interface{}
    // with range: 0..4294967295.
    CEtherCfmEventLclMepCount interface{}

    // The number of local interfaces affected by the event. The type is
    // interface{} with range: 0..4294967295.
    CEtherCfmEventLclIfCount interface{}

    // The maintenance end-point identifier of the remote  MEP causing the event
    // entry to be logged. The type is interface{} with range: 0..8191.
    CEtherCfmEventRmtMepid interface{}

    // The MAC address of the remote maintenance point for which the event entry
    // is being logged. The type is string with pattern:
    // b'[0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}'.
    CEtherCfmEventRmtMacAddress interface{}

    // The operational state of the port on which the  remote MEP is configured.
    // This information is  derived from the port-state as indicated in the  CC
    // message. The possible values are:  'up'                    - The port is
    // operationally up.  'down'                  - The port is operationally (but
    // not                           administratively) down.  'adminDown'         
    // - The port is administratively down.  'test'                  - The port is
    // in test mode (perhaps                            due to an IEEE Standard
    // 802.3ah OAM                           intrusive loopback operation). 
    // 'remoteExcessiveErrors' - 802.3ah OAM reports that the other               
    // end of the link is receiving an                            excessive number
    // of invalid frames.  'localExcessiveErrors'  - 802.3ah OAM reports that this
    // end of                           the link is receiving an excessive        
    // number of invalid frames.  'localNoData'           - No data and no CFM
    // messages have been                           received for an excessive
    // length of                            time. The type is
    // CEtherCfmEventRmtPortState.
    CEtherCfmEventRmtPortState interface{}

    // The ID that the remote device has configured for the  customer service
    // instance (VLAN). The type is string with length: 1..100.
    CEtherCfmEventRmtServiceId interface{}

    // This object is used in decoding 'mepUp' and 'mepDown' events.   ** For
    // 'mepUp', the following codes are relevant:      'new'           - This is
    // the very first time the device                        receives a CC message
    // from the remote MEP.      'returning'     - The device received a CC
    // message from a                        remote MEP for which it had an
    // expired                        CCDB entry.      'portState'     - The
    // device received a CC message from a                        remote MEP for
    // which it has a valid CCDB                        entry, and the message
    // indicates a port                        status change.  ** For 'mepDown',
    // the following codes are relevant:      'lastGasp'      - The device
    // received a CC message from a                       remote MEP with zero
    // lifetime.      'timeout'       - The local CCDB entry for the remote MEP   
    // expired.      'configClear'   - A previous CC message from a MEP that      
    // triggered a configuration error event                       is cleared.    
    // 'loopClear'     - A previous CC message from a MEP that                    
    // triggered a loop error event is cleared.      'xconnectClear' - A previous
    // CC message from a MEP that                       triggered a crossconnect
    // error event                        is cleared.      'unknownClear'  - A
    // previous CC message from a MEP that                       triggered an
    // unknown MEP event is                        cleared. The type is
    // CEtherCfmEventCode.
    CEtherCfmEventCode interface{}

    // This object allows the management station to  delete a row in the
    // cEtherCfmEventTable in order to free system resources.  When reading this
    // object the value of 'noop' will be  returned. This object can only be set
    // to 'delete'.   When this object is set to 'delete', the conceptual row
    // corresponding to this object will be deleted to free system resources. This
    // is equivalent to clearing the event log. Should the trigger that caused the
    // event to be logged reoccur, the event will be re-asserted but in a
    // different conceptual row. The type is CEtherCfmEventDeleteRow.
    CEtherCfmEventDeleteRow interface{}
}

func (cEtherCfmEventEntry *CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry) GetEntityData() *types.CommonEntityData {
    cEtherCfmEventEntry.EntityData.YFilter = cEtherCfmEventEntry.YFilter
    cEtherCfmEventEntry.EntityData.YangName = "cEtherCfmEventEntry"
    cEtherCfmEventEntry.EntityData.BundleName = "cisco_ios_xe"
    cEtherCfmEventEntry.EntityData.ParentYangName = "cEtherCfmEventTable"
    cEtherCfmEventEntry.EntityData.SegmentPath = "cEtherCfmEventEntry" + types.AddKeyToken(cEtherCfmEventEntry.CEtherCfmEventDomainIndex, "cEtherCfmEventDomainIndex") + types.AddKeyToken(cEtherCfmEventEntry.CEtherCfmEventSvlan, "cEtherCfmEventSvlan") + types.AddKeyToken(cEtherCfmEventEntry.CEtherCfmEventIndex, "cEtherCfmEventIndex")
    cEtherCfmEventEntry.EntityData.AbsolutePath = "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB/cEtherCfmEventTable/" + cEtherCfmEventEntry.EntityData.SegmentPath
    cEtherCfmEventEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cEtherCfmEventEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cEtherCfmEventEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cEtherCfmEventEntry.EntityData.Children = types.NewOrderedMap()
    cEtherCfmEventEntry.EntityData.Leafs = types.NewOrderedMap()
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventDomainIndex", types.YLeaf{"CEtherCfmEventDomainIndex", cEtherCfmEventEntry.CEtherCfmEventDomainIndex})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventSvlan", types.YLeaf{"CEtherCfmEventSvlan", cEtherCfmEventEntry.CEtherCfmEventSvlan})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventIndex", types.YLeaf{"CEtherCfmEventIndex", cEtherCfmEventEntry.CEtherCfmEventIndex})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventDomainName", types.YLeaf{"CEtherCfmEventDomainName", cEtherCfmEventEntry.CEtherCfmEventDomainName})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventType", types.YLeaf{"CEtherCfmEventType", cEtherCfmEventEntry.CEtherCfmEventType})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventLastChange", types.YLeaf{"CEtherCfmEventLastChange", cEtherCfmEventEntry.CEtherCfmEventLastChange})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventServiceId", types.YLeaf{"CEtherCfmEventServiceId", cEtherCfmEventEntry.CEtherCfmEventServiceId})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventLclMepid", types.YLeaf{"CEtherCfmEventLclMepid", cEtherCfmEventEntry.CEtherCfmEventLclMepid})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventLclMacAddress", types.YLeaf{"CEtherCfmEventLclMacAddress", cEtherCfmEventEntry.CEtherCfmEventLclMacAddress})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventLclMepCount", types.YLeaf{"CEtherCfmEventLclMepCount", cEtherCfmEventEntry.CEtherCfmEventLclMepCount})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventLclIfCount", types.YLeaf{"CEtherCfmEventLclIfCount", cEtherCfmEventEntry.CEtherCfmEventLclIfCount})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventRmtMepid", types.YLeaf{"CEtherCfmEventRmtMepid", cEtherCfmEventEntry.CEtherCfmEventRmtMepid})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventRmtMacAddress", types.YLeaf{"CEtherCfmEventRmtMacAddress", cEtherCfmEventEntry.CEtherCfmEventRmtMacAddress})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventRmtPortState", types.YLeaf{"CEtherCfmEventRmtPortState", cEtherCfmEventEntry.CEtherCfmEventRmtPortState})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventRmtServiceId", types.YLeaf{"CEtherCfmEventRmtServiceId", cEtherCfmEventEntry.CEtherCfmEventRmtServiceId})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventCode", types.YLeaf{"CEtherCfmEventCode", cEtherCfmEventEntry.CEtherCfmEventCode})
    cEtherCfmEventEntry.EntityData.Leafs.Append("cEtherCfmEventDeleteRow", types.YLeaf{"CEtherCfmEventDeleteRow", cEtherCfmEventEntry.CEtherCfmEventDeleteRow})

    cEtherCfmEventEntry.EntityData.YListKeys = []string {"CEtherCfmEventDomainIndex", "CEtherCfmEventSvlan", "CEtherCfmEventIndex"}

    return &(cEtherCfmEventEntry.EntityData)
}

// CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode represents                       cleared.
type CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode string

const (
    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_new_ CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "new"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_returning CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "returning"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_portState CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "portState"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_lastGasp CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "lastGasp"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_timeout CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "timeout"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_configClear CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "configClear"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_loopClear CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "loopClear"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_xconnectClear CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "xconnectClear"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode_unknownClear CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventCode = "unknownClear"
)

// CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow represents in a different conceptual row.
type CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow string

const (
    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow_noop CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow = "noop"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow_delete_ CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventDeleteRow = "delete"
)

// CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState represents                           time.
type CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState string

const (
    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_up CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "up"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_down CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "down"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_adminDown CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "adminDown"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_test CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "test"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_remoteExcessiveErrors CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "remoteExcessiveErrors"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_localExcessiveErrors CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "localExcessiveErrors"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState_localNoData CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventRmtPortState = "localNoData"
)

// CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType represents be returned by the agent.
type CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType string

const (
    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_mepUp CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "mepUp"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_mepDown CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "mepDown"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_xconnect CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "xconnect"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_loop CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "loop"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_config CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "config"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_xcheckMissing CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "xcheckMissing"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_xcheckUnknown CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "xcheckUnknown"

    CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType_xcheckServiceUp CISCOETHERCFMMIB_CEtherCfmEventTable_CEtherCfmEventEntry_CEtherCfmEventType = "xcheckServiceUp"
)

