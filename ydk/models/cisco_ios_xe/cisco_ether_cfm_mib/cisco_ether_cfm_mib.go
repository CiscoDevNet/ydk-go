// This MIB module defines the managed objects 
// and notifications for Ethernet Connectivity 
// Fault Management (CFM).
// 
// CFM is an end-to-end per service instance Ethernet layer 
// Operations, Administration and Management (OAM) protocol. 
// 
// CFM events include: 
// 
// - Maintenance End-Point (MEP) coming up: establishing 
//   connectivity
// 
// - Maintenance End-Point going down: losing connectivity
// 
// - Maintenance End-Point unknown: unexpected
// 
// - Maintenance End-Point missing: expected but not reachable
// 
// - Continuity Check Configuration Error: collision in MEP IDs
// 
// - Continuity Check Loop: forwarding loop in network
// 
// - Continuity Check Cross-connect: cross-connected 
//   forwarding path.
// 
// The following acronyms are used in this module:
// 
// - MEP: Maintenance End Point
// 
// - MEPID: Maintenance End Point Identifier
// 
// - CC: Continuity Check
// 
// - CCDB: Continuity Check Database
// 
// - SVLAN: Service Provider Virtual Local Area Network
// 
// - VLAN: Virtual Local Area Network
// 
// - CLI: Command Line Interface.
// 
// - OAM: Operations Administration and Management.
package cisco_ether_cfm_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_ether_cfm_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-ETHER-CFM-MIB CISCO-ETHER-CFM-MIB}", reflect.TypeOf(CISCOETHERCFMMIB{}))
    ydk.RegisterEntity("CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB", reflect.TypeOf(CISCOETHERCFMMIB{}))
}

// CISCOETHERCFMMIB
type CISCOETHERCFMMIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Ceccfmevents CISCOETHERCFMMIB_Ceccfmevents

    // This table contains a collection of Ethernet CFM notifications generated by
    // the device. The notifications correspond to events recognized by the device
    // and fall into the following classes:  - MEP-Up  - MEP-Down  - Configuration
    // Error  - Forwarding Loop  - Cross-connected Ethernet Connection  -
    // Crosscheck Missing MEP  - Crosscheck Unknown MEP  - Crosscheck Service Up 
    // A conceptual row is created in this table whenever the device  encounters
    // one of the events listed above. Rows can only be created by the agent, and
    // not at the request of the management station.  Rows are deleted at the
    // request of a management station by  setting the cEtherCfmEventDeleteRow
    // object to 'delete'. Another way of deleting rows is through the CLI. 
    // Although this table may be indexed uniquely by the  cEtherCfmEventIndex
    // index, the first two indices  (cEtherCfmEventDomainIndex and
    // cEtherCfmEventSvlan) are used to speed-up queries per maintenance domain
    // and per customer service instance. Furthermore, these two indices will help
    // in defining the MIB views easily in order to restrict access to the MIB to
    // particular entities (be it a service provider, or operator, or customer).
    Cethercfmeventtable CISCOETHERCFMMIB_Cethercfmeventtable
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetFilter() yfilter.YFilter { return cISCOETHERCFMMIB.YFilter }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) SetFilter(yf yfilter.YFilter) { cISCOETHERCFMMIB.YFilter = yf }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetGoName(yname string) string {
    if yname == "cecCfmEvents" { return "Ceccfmevents" }
    if yname == "cEtherCfmEventTable" { return "Cethercfmeventtable" }
    return ""
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetSegmentPath() string {
    return "CISCO-ETHER-CFM-MIB:CISCO-ETHER-CFM-MIB"
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cecCfmEvents" {
        return &cISCOETHERCFMMIB.Ceccfmevents
    }
    if childYangName == "cEtherCfmEventTable" {
        return &cISCOETHERCFMMIB.Cethercfmeventtable
    }
    return nil
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cecCfmEvents"] = &cISCOETHERCFMMIB.Ceccfmevents
    children["cEtherCfmEventTable"] = &cISCOETHERCFMMIB.Cethercfmeventtable
    return children
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetYangName() string { return "CISCO-ETHER-CFM-MIB" }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) SetParent(parent types.Entity) { cISCOETHERCFMMIB.parent = parent }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetParent() types.Entity { return cISCOETHERCFMMIB.parent }

func (cISCOETHERCFMMIB *CISCOETHERCFMMIB) GetParentYangName() string { return "CISCO-ETHER-CFM-MIB" }

// CISCOETHERCFMMIB_Ceccfmevents
type CISCOETHERCFMMIB_Ceccfmevents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object specifies the maximum upper value supported  for the
    // cEtherCfmEventIndex index by this agent. The type is interface{} with
    // range: 1..4294967295.
    Cethercfmmaxeventindex interface{}
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetFilter() yfilter.YFilter { return ceccfmevents.YFilter }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) SetFilter(yf yfilter.YFilter) { ceccfmevents.YFilter = yf }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetGoName(yname string) string {
    if yname == "cEtherCfmMaxEventIndex" { return "Cethercfmmaxeventindex" }
    return ""
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetSegmentPath() string {
    return "cecCfmEvents"
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cEtherCfmMaxEventIndex"] = ceccfmevents.Cethercfmmaxeventindex
    return leafs
}

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetBundleName() string { return "cisco_ios_xe" }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetYangName() string { return "cecCfmEvents" }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) SetParent(parent types.Entity) { ceccfmevents.parent = parent }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetParent() types.Entity { return ceccfmevents.parent }

func (ceccfmevents *CISCOETHERCFMMIB_Ceccfmevents) GetParentYangName() string { return "CISCO-ETHER-CFM-MIB" }

// CISCOETHERCFMMIB_Cethercfmeventtable
// This table contains a collection of Ethernet CFM notifications
// generated by the device. The notifications correspond to events
// recognized by the device and fall into the following classes:
// 
// - MEP-Up
// 
// - MEP-Down
// 
// - Configuration Error
// 
// - Forwarding Loop
// 
// - Cross-connected Ethernet Connection
// 
// - Crosscheck Missing MEP
// 
// - Crosscheck Unknown MEP
// 
// - Crosscheck Service Up
// 
// A conceptual row is created in this table whenever the device 
// encounters one of the events listed above. Rows can only be
// created by the agent, and not at the request of the management
// station.
// 
// Rows are deleted at the request of a management station by 
// setting the cEtherCfmEventDeleteRow object to 'delete'.
// Another way of deleting rows is through the CLI.
// 
// Although this table may be indexed uniquely by the 
// cEtherCfmEventIndex index, the first two indices 
// (cEtherCfmEventDomainIndex and cEtherCfmEventSvlan) are used
// to speed-up queries per maintenance domain and per customer
// service instance. Furthermore, these two indices will help
// in defining the MIB views easily in order to restrict access
// to the MIB to particular entities (be it a service provider,
// or operator, or customer).
type CISCOETHERCFMMIB_Cethercfmeventtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An entry in this table is created for every event reported by Ethernet CFM.
    // The type is slice of
    // CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry.
    Cethercfmevententry []CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetFilter() yfilter.YFilter { return cethercfmeventtable.YFilter }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) SetFilter(yf yfilter.YFilter) { cethercfmeventtable.YFilter = yf }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetGoName(yname string) string {
    if yname == "cEtherCfmEventEntry" { return "Cethercfmevententry" }
    return ""
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetSegmentPath() string {
    return "cEtherCfmEventTable"
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cEtherCfmEventEntry" {
        for _, c := range cethercfmeventtable.Cethercfmevententry {
            if cethercfmeventtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry{}
        cethercfmeventtable.Cethercfmevententry = append(cethercfmeventtable.Cethercfmevententry, child)
        return &cethercfmeventtable.Cethercfmevententry[len(cethercfmeventtable.Cethercfmevententry)-1]
    }
    return nil
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cethercfmeventtable.Cethercfmevententry {
        children[cethercfmeventtable.Cethercfmevententry[i].GetSegmentPath()] = &cethercfmeventtable.Cethercfmevententry[i]
    }
    return children
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetBundleName() string { return "cisco_ios_xe" }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetYangName() string { return "cEtherCfmEventTable" }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) SetParent(parent types.Entity) { cethercfmeventtable.parent = parent }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetParent() types.Entity { return cethercfmeventtable.parent }

func (cethercfmeventtable *CISCOETHERCFMMIB_Cethercfmeventtable) GetParentYangName() string { return "CISCO-ETHER-CFM-MIB" }

// CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry
// An entry in this table is created for every event reported
// by Ethernet CFM.
type CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. This object represents the ID which uniquely
    // identifies  a CFM maintenance domain on the device. Every domain can be
    // uniquely identified by its user-defined  name (cEtherCfmEventDomainName) or
    // device-assigned ID (this object). The type is interface{} with range:
    // 1..4294967295.
    Cethercfmeventdomainindex interface{}

    // This attribute is a key. The service VLAN identifier of the customer
    // service  instance to which the event belongs. The type is interface{} with
    // range: 1..4094.
    Cethercfmeventsvlan interface{}

    // This attribute is a key. A monotonically increasing integer for the sole
    // purpose of indexing CFM events.  When it reaches the maximum value 
    // supported by the agent, as defined in the  cEtherCfmMaxEventIndex object,
    // the agent wraps the value back to 1 and may flush existing entries. The
    // type is interface{} with range: 1..4294967295.
    Cethercfmeventindex interface{}

    // The name of the CFM maintenance domain. The type is string.
    Cethercfmeventdomainname interface{}

    // This object informs the management station of how to interpret the rest of
    // the objects within a row, as summarized in the  following table:  Legend I:
    // Ignored Object         V: Valid Object  Object                             
    // cEtherCfmEventType                                | 1 | 2 | 3 | 4 | 5 | 6 |
    // 7 | 8 ================================================================     
    // |   |   |   |   |   |   |   | cEtherCfmEventDomainIndex      | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventSvlan            | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventIndex            | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLastChange       | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventServiceId        | V | V | V |
    // V | V | V | V | V                                |   |   |   |   |   |   | 
    // | cEtherCfmEventDomainName       | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventLclMepid         | I | I | I |
    // V | V | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLclMacAddress    | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   | cEtherCfmEventLclMepCount      | V | V | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventLclIfCount       | V | V | I | I | I | I | I | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventRmtMepid         | V | V | V |
    // I | I | V | V | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventRmtMacAddress    | V | V | V | I | V | V | V | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventRmtPortState     | V | I | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventRmtServiceId     | I | I | V | I | I | I | I | I           
    // |   |   |   |   |   |   |   | cEtherCfmEventCode             | V | V | I |
    // I | I | I | I | I                                |   |   |   |   |   |   | 
    // | cEtherCfmEventDeleteRow        | V | V | V | V | V | V | V | V           
    // |   |   |   |   |   |   |   |  Note: When reading any ignored object, a
    // value of 0 will  be returned by the agent. The type is Cethercfmeventtype.
    Cethercfmeventtype interface{}

    // The value of sysUpTime at the time when this row was created. The type is
    // interface{} with range: 0..4294967295.
    Cethercfmeventlastchange interface{}

    // The customer service instance to which the event belongs. The type is
    // string with length: 1..100.
    Cethercfmeventserviceid interface{}

    // The identifier of the local MEP impacted by the event. The type is
    // interface{} with range: 0..8191.
    Cethercfmeventlclmepid interface{}

    // The MAC address of the device reporting the event. The type is string with
    // pattern: [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Cethercfmeventlclmacaddress interface{}

    // The number of local MEPs affected by the event. The type is interface{}
    // with range: 0..4294967295.
    Cethercfmeventlclmepcount interface{}

    // The number of local interfaces affected by the event. The type is
    // interface{} with range: 0..4294967295.
    Cethercfmeventlclifcount interface{}

    // The maintenance end-point identifier of the remote  MEP causing the event
    // entry to be logged. The type is interface{} with range: 0..8191.
    Cethercfmeventrmtmepid interface{}

    // The MAC address of the remote maintenance point for which the event entry
    // is being logged. The type is string with pattern:
    // [0-9a-fA-F]{2}(:[0-9a-fA-F]{2}){5}.
    Cethercfmeventrmtmacaddress interface{}

    // The operational state of the port on which the  remote MEP is configured.
    // This information is  derived from the port-state as indicated in the  CC
    // message. The possible values are:  'up'                    - The port is
    // operationally up.  'down'                  - The port is operationally (but
    // not                           administratively) down.  'adminDown'         
    // - The port is administratively down.  'test'                  - The port is
    // in test mode (perhaps                            due to an IEEE Standard
    // 802.3ah OAM                           intrusive loopback operation). 
    // 'remoteExcessiveErrors' - 802.3ah OAM reports that the other               
    // end of the link is receiving an                            excessive number
    // of invalid frames.  'localExcessiveErrors'  - 802.3ah OAM reports that this
    // end of                           the link is receiving an excessive        
    // number of invalid frames.  'localNoData'           - No data and no CFM
    // messages have been                           received for an excessive
    // length of                            time. The type is
    // Cethercfmeventrmtportstate.
    Cethercfmeventrmtportstate interface{}

    // The ID that the remote device has configured for the  customer service
    // instance (VLAN). The type is string with length: 1..100.
    Cethercfmeventrmtserviceid interface{}

    // This object is used in decoding 'mepUp' and 'mepDown' events.   ** For
    // 'mepUp', the following codes are relevant:      'new'           - This is
    // the very first time the device                        receives a CC message
    // from the remote MEP.      'returning'     - The device received a CC
    // message from a                        remote MEP for which it had an
    // expired                        CCDB entry.      'portState'     - The
    // device received a CC message from a                        remote MEP for
    // which it has a valid CCDB                        entry, and the message
    // indicates a port                        status change.  ** For 'mepDown',
    // the following codes are relevant:      'lastGasp'      - The device
    // received a CC message from a                       remote MEP with zero
    // lifetime.      'timeout'       - The local CCDB entry for the remote MEP   
    // expired.      'configClear'   - A previous CC message from a MEP that      
    // triggered a configuration error event                       is cleared.    
    // 'loopClear'     - A previous CC message from a MEP that                    
    // triggered a loop error event is cleared.      'xconnectClear' - A previous
    // CC message from a MEP that                       triggered a crossconnect
    // error event                        is cleared.      'unknownClear'  - A
    // previous CC message from a MEP that                       triggered an
    // unknown MEP event is                        cleared. The type is
    // Cethercfmeventcode.
    Cethercfmeventcode interface{}

    // This object allows the management station to  delete a row in the
    // cEtherCfmEventTable in order to free system resources.  When reading this
    // object the value of 'noop' will be  returned. This object can only be set
    // to 'delete'.   When this object is set to 'delete', the conceptual row
    // corresponding to this object will be deleted to free system resources. This
    // is equivalent to clearing the event log. Should the trigger that caused the
    // event to be logged reoccur, the event will be re-asserted but in a
    // different conceptual row. The type is Cethercfmeventdeleterow.
    Cethercfmeventdeleterow interface{}
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetFilter() yfilter.YFilter { return cethercfmevententry.YFilter }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) SetFilter(yf yfilter.YFilter) { cethercfmevententry.YFilter = yf }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetGoName(yname string) string {
    if yname == "cEtherCfmEventDomainIndex" { return "Cethercfmeventdomainindex" }
    if yname == "cEtherCfmEventSvlan" { return "Cethercfmeventsvlan" }
    if yname == "cEtherCfmEventIndex" { return "Cethercfmeventindex" }
    if yname == "cEtherCfmEventDomainName" { return "Cethercfmeventdomainname" }
    if yname == "cEtherCfmEventType" { return "Cethercfmeventtype" }
    if yname == "cEtherCfmEventLastChange" { return "Cethercfmeventlastchange" }
    if yname == "cEtherCfmEventServiceId" { return "Cethercfmeventserviceid" }
    if yname == "cEtherCfmEventLclMepid" { return "Cethercfmeventlclmepid" }
    if yname == "cEtherCfmEventLclMacAddress" { return "Cethercfmeventlclmacaddress" }
    if yname == "cEtherCfmEventLclMepCount" { return "Cethercfmeventlclmepcount" }
    if yname == "cEtherCfmEventLclIfCount" { return "Cethercfmeventlclifcount" }
    if yname == "cEtherCfmEventRmtMepid" { return "Cethercfmeventrmtmepid" }
    if yname == "cEtherCfmEventRmtMacAddress" { return "Cethercfmeventrmtmacaddress" }
    if yname == "cEtherCfmEventRmtPortState" { return "Cethercfmeventrmtportstate" }
    if yname == "cEtherCfmEventRmtServiceId" { return "Cethercfmeventrmtserviceid" }
    if yname == "cEtherCfmEventCode" { return "Cethercfmeventcode" }
    if yname == "cEtherCfmEventDeleteRow" { return "Cethercfmeventdeleterow" }
    return ""
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetSegmentPath() string {
    return "cEtherCfmEventEntry" + "[cEtherCfmEventDomainIndex='" + fmt.Sprintf("%v", cethercfmevententry.Cethercfmeventdomainindex) + "']" + "[cEtherCfmEventSvlan='" + fmt.Sprintf("%v", cethercfmevententry.Cethercfmeventsvlan) + "']" + "[cEtherCfmEventIndex='" + fmt.Sprintf("%v", cethercfmevententry.Cethercfmeventindex) + "']"
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cEtherCfmEventDomainIndex"] = cethercfmevententry.Cethercfmeventdomainindex
    leafs["cEtherCfmEventSvlan"] = cethercfmevententry.Cethercfmeventsvlan
    leafs["cEtherCfmEventIndex"] = cethercfmevententry.Cethercfmeventindex
    leafs["cEtherCfmEventDomainName"] = cethercfmevententry.Cethercfmeventdomainname
    leafs["cEtherCfmEventType"] = cethercfmevententry.Cethercfmeventtype
    leafs["cEtherCfmEventLastChange"] = cethercfmevententry.Cethercfmeventlastchange
    leafs["cEtherCfmEventServiceId"] = cethercfmevententry.Cethercfmeventserviceid
    leafs["cEtherCfmEventLclMepid"] = cethercfmevententry.Cethercfmeventlclmepid
    leafs["cEtherCfmEventLclMacAddress"] = cethercfmevententry.Cethercfmeventlclmacaddress
    leafs["cEtherCfmEventLclMepCount"] = cethercfmevententry.Cethercfmeventlclmepcount
    leafs["cEtherCfmEventLclIfCount"] = cethercfmevententry.Cethercfmeventlclifcount
    leafs["cEtherCfmEventRmtMepid"] = cethercfmevententry.Cethercfmeventrmtmepid
    leafs["cEtherCfmEventRmtMacAddress"] = cethercfmevententry.Cethercfmeventrmtmacaddress
    leafs["cEtherCfmEventRmtPortState"] = cethercfmevententry.Cethercfmeventrmtportstate
    leafs["cEtherCfmEventRmtServiceId"] = cethercfmevententry.Cethercfmeventrmtserviceid
    leafs["cEtherCfmEventCode"] = cethercfmevententry.Cethercfmeventcode
    leafs["cEtherCfmEventDeleteRow"] = cethercfmevententry.Cethercfmeventdeleterow
    return leafs
}

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetBundleName() string { return "cisco_ios_xe" }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetYangName() string { return "cEtherCfmEventEntry" }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) SetParent(parent types.Entity) { cethercfmevententry.parent = parent }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetParent() types.Entity { return cethercfmevententry.parent }

func (cethercfmevententry *CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry) GetParentYangName() string { return "cEtherCfmEventTable" }

// CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode represents                       cleared.
type CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode string

const (
    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_new CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "new"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_returning CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "returning"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_portState CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "portState"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_lastGasp CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "lastGasp"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_timeout CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "timeout"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_configClear CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "configClear"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_loopClear CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "loopClear"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_xconnectClear CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "xconnectClear"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode_unknownClear CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventcode = "unknownClear"
)

// CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow represents in a different conceptual row.
type CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow string

const (
    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow_noop CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow = "noop"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow_delete CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventdeleterow = "delete"
)

// CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate represents                           time.
type CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate string

const (
    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_up CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "up"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_down CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "down"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_adminDown CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "adminDown"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_test CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "test"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_remoteExcessiveErrors CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "remoteExcessiveErrors"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_localExcessiveErrors CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "localExcessiveErrors"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate_localNoData CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventrmtportstate = "localNoData"
)

// CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype represents be returned by the agent.
type CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype string

const (
    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_mepUp CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "mepUp"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_mepDown CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "mepDown"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_xconnect CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "xconnect"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_loop CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "loop"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_config CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "config"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_xcheckMissing CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "xcheckMissing"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_xcheckUnknown CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "xcheckUnknown"

    CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype_xcheckServiceUp CISCOETHERCFMMIB_Cethercfmeventtable_Cethercfmevententry_Cethercfmeventtype = "xcheckServiceUp"
)

