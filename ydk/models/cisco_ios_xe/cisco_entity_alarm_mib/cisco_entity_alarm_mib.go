// This MIB module defines the managed objects that support the
// monitoring of alarms generated by physical entities contained
// by the system, including chassis, slots, modules, ports, power
// supplies, and fans.  In order to monitor alarms generated by a
// physical entity, it must be represented by a row in the
// entPhysicalTable (see ENTITY-MIB).
package cisco_entity_alarm_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_entity_alarm_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-ENTITY-ALARM-MIB CISCO-ENTITY-ALARM-MIB}", reflect.TypeOf(CISCOENTITYALARMMIB{}))
    ydk.RegisterEntity("CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB", reflect.TypeOf(CISCOENTITYALARMMIB{}))
}

// AlarmSeverity represents             operation.
type AlarmSeverity string

const (
    AlarmSeverity_critical AlarmSeverity = "critical"

    AlarmSeverity_major AlarmSeverity = "major"

    AlarmSeverity_minor AlarmSeverity = "minor"

    AlarmSeverity_info AlarmSeverity = "info"
)

// CISCOENTITYALARMMIB
type CISCOENTITYALARMMIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Cealarmmonitoring CISCOENTITYALARMMIB_Cealarmmonitoring

    
    Cealarmhistory CISCOENTITYALARMMIB_Cealarmhistory

    
    Cealarmfiltering CISCOENTITYALARMMIB_Cealarmfiltering

    // For each type of entity (represented entPhysicalVendorType OID), this table
    // contains a mapping between a unique  ceAlarmDescrIndex and
    // entPhysicalvendorType OID.
    Cealarmdescrmaptable CISCOENTITYALARMMIB_Cealarmdescrmaptable

    // This table contains a description for each alarm type defined by each
    // vendor type employed by the system. Observe that this table is sparse in
    // nature, as it is rarely the case that a physical entity type needs to 
    // define every alarm in its alarm space.
    Cealarmdescrtable CISCOENTITYALARMMIB_Cealarmdescrtable

    // This table specifies alarm control and status information related to each
    // physical entity contained by the system, including the alarms currently
    // being asserted by each physical entity capable of generating alarms.
    Cealarmtable CISCOENTITYALARMMIB_Cealarmtable

    // This table contains a history of ceAlarmIndicate and ceAlarmClear traps
    // generated by the agent.
    Cealarmhisttable CISCOENTITYALARMMIB_Cealarmhisttable

    // This table contains a list of alarm filter profiles.
    Cealarmfilterprofiletable CISCOENTITYALARMMIB_Cealarmfilterprofiletable
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetFilter() yfilter.YFilter { return cISCOENTITYALARMMIB.YFilter }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) SetFilter(yf yfilter.YFilter) { cISCOENTITYALARMMIB.YFilter = yf }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetGoName(yname string) string {
    if yname == "ceAlarmMonitoring" { return "Cealarmmonitoring" }
    if yname == "ceAlarmHistory" { return "Cealarmhistory" }
    if yname == "ceAlarmFiltering" { return "Cealarmfiltering" }
    if yname == "ceAlarmDescrMapTable" { return "Cealarmdescrmaptable" }
    if yname == "ceAlarmDescrTable" { return "Cealarmdescrtable" }
    if yname == "ceAlarmTable" { return "Cealarmtable" }
    if yname == "ceAlarmHistTable" { return "Cealarmhisttable" }
    if yname == "ceAlarmFilterProfileTable" { return "Cealarmfilterprofiletable" }
    return ""
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetSegmentPath() string {
    return "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB"
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmMonitoring" {
        return &cISCOENTITYALARMMIB.Cealarmmonitoring
    }
    if childYangName == "ceAlarmHistory" {
        return &cISCOENTITYALARMMIB.Cealarmhistory
    }
    if childYangName == "ceAlarmFiltering" {
        return &cISCOENTITYALARMMIB.Cealarmfiltering
    }
    if childYangName == "ceAlarmDescrMapTable" {
        return &cISCOENTITYALARMMIB.Cealarmdescrmaptable
    }
    if childYangName == "ceAlarmDescrTable" {
        return &cISCOENTITYALARMMIB.Cealarmdescrtable
    }
    if childYangName == "ceAlarmTable" {
        return &cISCOENTITYALARMMIB.Cealarmtable
    }
    if childYangName == "ceAlarmHistTable" {
        return &cISCOENTITYALARMMIB.Cealarmhisttable
    }
    if childYangName == "ceAlarmFilterProfileTable" {
        return &cISCOENTITYALARMMIB.Cealarmfilterprofiletable
    }
    return nil
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ceAlarmMonitoring"] = &cISCOENTITYALARMMIB.Cealarmmonitoring
    children["ceAlarmHistory"] = &cISCOENTITYALARMMIB.Cealarmhistory
    children["ceAlarmFiltering"] = &cISCOENTITYALARMMIB.Cealarmfiltering
    children["ceAlarmDescrMapTable"] = &cISCOENTITYALARMMIB.Cealarmdescrmaptable
    children["ceAlarmDescrTable"] = &cISCOENTITYALARMMIB.Cealarmdescrtable
    children["ceAlarmTable"] = &cISCOENTITYALARMMIB.Cealarmtable
    children["ceAlarmHistTable"] = &cISCOENTITYALARMMIB.Cealarmhisttable
    children["ceAlarmFilterProfileTable"] = &cISCOENTITYALARMMIB.Cealarmfilterprofiletable
    return children
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) SetParent(parent types.Entity) { cISCOENTITYALARMMIB.parent = parent }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetParent() types.Entity { return cISCOENTITYALARMMIB.parent }

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmmonitoring
type CISCOENTITYALARMMIB_Cealarmmonitoring struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'critical'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmcriticalcount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'major'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmmajorcount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'minor'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmminorcount interface{}

    // If the management client writes a value of 'true' to this object, the agent
    // stops signalling all external audible alarms under the control of the
    // agent.  Reading this object should always result in a value of 'false'. 
    // Observe that alarm cutoff does not have an effect on monitoring, history
    // logging, generation of notifications, or syslog message generation.  It
    // also does not prevent the agent from signalling external audible alarms for
    // alarms asserted after alarm-cutoff.  This object emulates the 'alarm
    // cut-off' mechanism typically installed in a central office (e.g., a big red
    // button).  Observe this object should neither affect external visual alarms
    // under the control of the agent, nor should it affect the current state of
    // alarms being asserted by the system. The type is bool.
    Cealarmcutoff interface{}
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetFilter() yfilter.YFilter { return cealarmmonitoring.YFilter }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) SetFilter(yf yfilter.YFilter) { cealarmmonitoring.YFilter = yf }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetGoName(yname string) string {
    if yname == "ceAlarmCriticalCount" { return "Cealarmcriticalcount" }
    if yname == "ceAlarmMajorCount" { return "Cealarmmajorcount" }
    if yname == "ceAlarmMinorCount" { return "Cealarmminorcount" }
    if yname == "ceAlarmCutOff" { return "Cealarmcutoff" }
    return ""
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetSegmentPath() string {
    return "ceAlarmMonitoring"
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmCriticalCount"] = cealarmmonitoring.Cealarmcriticalcount
    leafs["ceAlarmMajorCount"] = cealarmmonitoring.Cealarmmajorcount
    leafs["ceAlarmMinorCount"] = cealarmmonitoring.Cealarmminorcount
    leafs["ceAlarmCutOff"] = cealarmmonitoring.Cealarmcutoff
    return leafs
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetYangName() string { return "ceAlarmMonitoring" }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) SetParent(parent types.Entity) { cealarmmonitoring.parent = parent }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetParent() types.Entity { return cealarmmonitoring.parent }

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmhistory
type CISCOENTITYALARMMIB_Cealarmhistory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object specifies the number of entries that the  ceAlarmHistTable can
    // contain.  When a physical entity generates an unfiltered alarm, and the
    // capacity of the ceAlarmHistTable has reached the value specified by this
    // object, then the agent deletes the oldest entity in order to accommodate
    // the new entry. A value of '0' prevents any history from being retained.  .
    // The type is interface{} with range: 0..500.
    Cealarmhisttablesize interface{}

    // This object specifies the value of the ceAlarmHistIndex object
    // corresponding to the last entry added to the table by the agent.  If the
    // management client uses the notifications defined by this module, then it
    // can poll this object to determine whether it has missed a notification sent
    // by the agent. The type is interface{} with range: 0..4294967295.
    Cealarmhistlastindex interface{}
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetFilter() yfilter.YFilter { return cealarmhistory.YFilter }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) SetFilter(yf yfilter.YFilter) { cealarmhistory.YFilter = yf }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetGoName(yname string) string {
    if yname == "ceAlarmHistTableSize" { return "Cealarmhisttablesize" }
    if yname == "ceAlarmHistLastIndex" { return "Cealarmhistlastindex" }
    return ""
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetSegmentPath() string {
    return "ceAlarmHistory"
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmHistTableSize"] = cealarmhistory.Cealarmhisttablesize
    leafs["ceAlarmHistLastIndex"] = cealarmhistory.Cealarmhistlastindex
    return leafs
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetYangName() string { return "ceAlarmHistory" }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) SetParent(parent types.Entity) { cealarmhistory.parent = parent }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetParent() types.Entity { return cealarmhistory.parent }

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmfiltering
type CISCOENTITYALARMMIB_Cealarmfiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object specifies a severity threshold governing the generation of
    // ceAlarmAsserted and ceAlarmCleared notifications.  For example, if the
    // value of this object is set to 'major', then the agent generates these
    // notifications if and only if the severity of the alarm being indicated is
    // 'major' or 'critical'.  The value of '0' disables the  generation of
    // notifications.  Observe that this setting overrides the value of the 
    // ceAlarmFilterNotifiesEnabled object.  This object affects notification
    // generation only; that is, it does not affect monitoring, history logging,
    // and syslog message generation. The type is interface{} with range: 0..4.
    Cealarmnotifiesenable interface{}

    // This object specifies a severity threshold governing the generation of
    // syslog messages corresponding to alarms.  For example, if the value of this
    // object is set to 'major', then the agent generates these a syslog message
    // if and only if the severity of the alarm being indicated is 'major' or
    // 'critical'. The value of '0' disables the generation of syslog messages
    // corresponding to alarms.  Observe that this setting overrides the value of
    // the  ceAlarmFilterSyslogEnabled object.  This object affects syslog message
    // generation only; that is, it does not have an effect on monitoring, history
    // logging, and generation of notifications. The type is interface{} with
    // range: 0..4.
    Cealarmsyslogenable interface{}

    // This object contains an appropriate value to be used for ceAlarmFilterIndex
    // when creating entries in the ceAlarmFilterProfileTable.  The value '0'
    // indicates that no unassigned entries are available.  To obtain a
    // ceAlarmFilterIndex, the management client issues a get request.  The agent
    // has the responsibility of  modifying the value of this object following
    // each  successful get request. The type is interface{} with range:
    // 0..4294967295.
    Cealarmfilterprofileindexnext interface{}
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetFilter() yfilter.YFilter { return cealarmfiltering.YFilter }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) SetFilter(yf yfilter.YFilter) { cealarmfiltering.YFilter = yf }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetGoName(yname string) string {
    if yname == "ceAlarmNotifiesEnable" { return "Cealarmnotifiesenable" }
    if yname == "ceAlarmSyslogEnable" { return "Cealarmsyslogenable" }
    if yname == "ceAlarmFilterProfileIndexNext" { return "Cealarmfilterprofileindexnext" }
    return ""
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetSegmentPath() string {
    return "ceAlarmFiltering"
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmNotifiesEnable"] = cealarmfiltering.Cealarmnotifiesenable
    leafs["ceAlarmSyslogEnable"] = cealarmfiltering.Cealarmsyslogenable
    leafs["ceAlarmFilterProfileIndexNext"] = cealarmfiltering.Cealarmfilterprofileindexnext
    return leafs
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetYangName() string { return "ceAlarmFiltering" }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) SetParent(parent types.Entity) { cealarmfiltering.parent = parent }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetParent() types.Entity { return cealarmfiltering.parent }

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmdescrmaptable
// For each type of entity (represented entPhysicalVendorType
// OID), this table contains a mapping between a unique 
// ceAlarmDescrIndex and entPhysicalvendorType OID.
type CISCOENTITYALARMMIB_Cealarmdescrmaptable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A mapping between an alarm description and a vendor type. The type is slice
    // of CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry.
    Cealarmdescrmapentry []CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetFilter() yfilter.YFilter { return cealarmdescrmaptable.YFilter }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) SetFilter(yf yfilter.YFilter) { cealarmdescrmaptable.YFilter = yf }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetGoName(yname string) string {
    if yname == "ceAlarmDescrMapEntry" { return "Cealarmdescrmapentry" }
    return ""
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetSegmentPath() string {
    return "ceAlarmDescrMapTable"
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmDescrMapEntry" {
        for _, c := range cealarmdescrmaptable.Cealarmdescrmapentry {
            if cealarmdescrmaptable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry{}
        cealarmdescrmaptable.Cealarmdescrmapentry = append(cealarmdescrmaptable.Cealarmdescrmapentry, child)
        return &cealarmdescrmaptable.Cealarmdescrmapentry[len(cealarmdescrmaptable.Cealarmdescrmapentry)-1]
    }
    return nil
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cealarmdescrmaptable.Cealarmdescrmapentry {
        children[cealarmdescrmaptable.Cealarmdescrmapentry[i].GetSegmentPath()] = &cealarmdescrmaptable.Cealarmdescrmapentry[i]
    }
    return children
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetYangName() string { return "ceAlarmDescrMapTable" }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) SetParent(parent types.Entity) { cealarmdescrmaptable.parent = parent }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetParent() types.Entity { return cealarmdescrmaptable.parent }

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry
// A mapping between an alarm description and a vendor type.
type CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies an alarm
    // description. The type is interface{} with range: 0..4294967295.
    Cealarmdescrindex interface{}

    // This object specifies an object identifier (typically an
    // enterprise-specific OID) that uniquely identifies the vendor type of those
    // physical entities that this alarm description applies to. The type is
    // string with pattern:
    // (([0-1](\.[1-3]?[0-9]))|(2\.(0|([1-9]\d*))))(\.(0|([1-9]\d*)))*.
    Cealarmdescrvendortype interface{}
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetFilter() yfilter.YFilter { return cealarmdescrmapentry.YFilter }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) SetFilter(yf yfilter.YFilter) { cealarmdescrmapentry.YFilter = yf }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetGoName(yname string) string {
    if yname == "ceAlarmDescrIndex" { return "Cealarmdescrindex" }
    if yname == "ceAlarmDescrVendorType" { return "Cealarmdescrvendortype" }
    return ""
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetSegmentPath() string {
    return "ceAlarmDescrMapEntry" + "[ceAlarmDescrIndex='" + fmt.Sprintf("%v", cealarmdescrmapentry.Cealarmdescrindex) + "']"
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmDescrIndex"] = cealarmdescrmapentry.Cealarmdescrindex
    leafs["ceAlarmDescrVendorType"] = cealarmdescrmapentry.Cealarmdescrvendortype
    return leafs
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetYangName() string { return "ceAlarmDescrMapEntry" }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) SetParent(parent types.Entity) { cealarmdescrmapentry.parent = parent }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetParent() types.Entity { return cealarmdescrmapentry.parent }

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetParentYangName() string { return "ceAlarmDescrMapTable" }

// CISCOENTITYALARMMIB_Cealarmdescrtable
// This table contains a description for each alarm type
// defined by each vendor type employed by the system.
// Observe that this table is sparse in nature, as it is
// rarely the case that a physical entity type needs to 
// define every alarm in its alarm space.
type CISCOENTITYALARMMIB_Cealarmdescrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A collection of attributes that describe an alarm type. The type is slice
    // of CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry.
    Cealarmdescrentry []CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetFilter() yfilter.YFilter { return cealarmdescrtable.YFilter }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) SetFilter(yf yfilter.YFilter) { cealarmdescrtable.YFilter = yf }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetGoName(yname string) string {
    if yname == "ceAlarmDescrEntry" { return "Cealarmdescrentry" }
    return ""
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetSegmentPath() string {
    return "ceAlarmDescrTable"
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmDescrEntry" {
        for _, c := range cealarmdescrtable.Cealarmdescrentry {
            if cealarmdescrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry{}
        cealarmdescrtable.Cealarmdescrentry = append(cealarmdescrtable.Cealarmdescrentry, child)
        return &cealarmdescrtable.Cealarmdescrentry[len(cealarmdescrtable.Cealarmdescrentry)-1]
    }
    return nil
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cealarmdescrtable.Cealarmdescrentry {
        children[cealarmdescrtable.Cealarmdescrentry[i].GetSegmentPath()] = &cealarmdescrtable.Cealarmdescrentry[i]
    }
    return children
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetYangName() string { return "ceAlarmDescrTable" }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) SetParent(parent types.Entity) { cealarmdescrtable.parent = parent }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetParent() types.Entity { return cealarmdescrtable.parent }

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry
// A collection of attributes that describe an alarm type.
type CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 0..4294967295.
    // Refers to
    // cisco_entity_alarm_mib.CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry_Cealarmdescrindex
    Cealarmdescrindex interface{}

    // This attribute is a key. This object specifies the alarm type being
    // described. The type is interface{} with range: 0..255.
    Cealarmdescralarmtype interface{}

    // This object specifies the severity associated with the alarm type.  An
    // implementation may chose to not allow dynamic severity assignment, in which
    // case it would restrict access to this object to be read-only.  If an
    // implementation allows dynamic severity assignment, then a management client
    // can revert to the default severity by writing the value '0' to this object.
    // There exists a class of systems that should implement dynamic severity
    // assignment.  For example, consider a DSLAM (Digital Subscriber Loop Access
    // Multiplexor) designed for both the central office and pedestal
    // environments.  A 'pedestal' is typically a dark-green metal box mounted on
    // a concrete or stone foundation in which carrier-class companies house
    // equipment. The central office typically controls the temperature and
    // humidity of the environment, reducing reliance on a system's fans.  Thus,
    // the customer probably has a desire to reduce the  severity of alarms
    // indicating the failure of a fan.  However, a pedestal environment has a
    // much greater reliance on a system's fans.  Thus, the customer probably has
    // a desire to increase the severity of alarms indicating the failure of a
    // fan. The type is interface{} with range: 0..4.
    Cealarmdescrseverity interface{}

    // This object specifies a human-readable message describing the alarm. The
    // type is string.
    Cealarmdescrtext interface{}
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetFilter() yfilter.YFilter { return cealarmdescrentry.YFilter }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) SetFilter(yf yfilter.YFilter) { cealarmdescrentry.YFilter = yf }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetGoName(yname string) string {
    if yname == "ceAlarmDescrIndex" { return "Cealarmdescrindex" }
    if yname == "ceAlarmDescrAlarmType" { return "Cealarmdescralarmtype" }
    if yname == "ceAlarmDescrSeverity" { return "Cealarmdescrseverity" }
    if yname == "ceAlarmDescrText" { return "Cealarmdescrtext" }
    return ""
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetSegmentPath() string {
    return "ceAlarmDescrEntry" + "[ceAlarmDescrIndex='" + fmt.Sprintf("%v", cealarmdescrentry.Cealarmdescrindex) + "']" + "[ceAlarmDescrAlarmType='" + fmt.Sprintf("%v", cealarmdescrentry.Cealarmdescralarmtype) + "']"
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmDescrIndex"] = cealarmdescrentry.Cealarmdescrindex
    leafs["ceAlarmDescrAlarmType"] = cealarmdescrentry.Cealarmdescralarmtype
    leafs["ceAlarmDescrSeverity"] = cealarmdescrentry.Cealarmdescrseverity
    leafs["ceAlarmDescrText"] = cealarmdescrentry.Cealarmdescrtext
    return leafs
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetYangName() string { return "ceAlarmDescrEntry" }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) SetParent(parent types.Entity) { cealarmdescrentry.parent = parent }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetParent() types.Entity { return cealarmdescrentry.parent }

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetParentYangName() string { return "ceAlarmDescrTable" }

// CISCOENTITYALARMMIB_Cealarmtable
// This table specifies alarm control and status information
// related to each physical entity contained by the system,
// including the alarms currently being asserted by each physical
// entity capable of generating alarms.
type CISCOENTITYALARMMIB_Cealarmtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Alarm control and status information related to the  corresponding physical
    // entity, including a list of those alarms currently being asserted by that
    // physical entity. The type is slice of
    // CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry.
    Cealarmentry []CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetFilter() yfilter.YFilter { return cealarmtable.YFilter }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) SetFilter(yf yfilter.YFilter) { cealarmtable.YFilter = yf }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetGoName(yname string) string {
    if yname == "ceAlarmEntry" { return "Cealarmentry" }
    return ""
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetSegmentPath() string {
    return "ceAlarmTable"
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmEntry" {
        for _, c := range cealarmtable.Cealarmentry {
            if cealarmtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry{}
        cealarmtable.Cealarmentry = append(cealarmtable.Cealarmentry, child)
        return &cealarmtable.Cealarmentry[len(cealarmtable.Cealarmentry)-1]
    }
    return nil
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cealarmtable.Cealarmentry {
        children[cealarmtable.Cealarmentry[i].GetSegmentPath()] = &cealarmtable.Cealarmentry[i]
    }
    return children
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetYangName() string { return "ceAlarmTable" }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) SetParent(parent types.Entity) { cealarmtable.parent = parent }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetParent() types.Entity { return cealarmtable.parent }

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry
// Alarm control and status information related to the 
// corresponding physical entity, including a list of those
// alarms currently being asserted by that physical entity.
type CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // entity_mib.ENTITYMIB_Entphysicaltable_Entphysicalentry_Entphysicalindex
    Entphysicalindex interface{}

    // This object specifies the alarm filter profile associated with the
    // corresponding physical entity.  An alarm filter profile controls which
    // alarm types the agent will monitor and signal for the corresponding
    // physical entity.  If the value of this object is '0', then the agent
    // monitors and signals all alarms associated with the corresponding physical
    // entity. The type is interface{} with range: 0..4294967295.
    Cealarmfilterprofile interface{}

    // This object specifies the highest severity alarm currently being asserted
    // by the corresponding physical entity.  A value of '0' indicates that there
    // the corresponding physical entity currently is not asserting any alarms.
    // The type is interface{} with range: 0..4.
    Cealarmseverity interface{}

    // This object specifies those alarms currently being asserted by the
    // corresponding physical entity.  Note, an alarm indicates a condition, not
    // an event.  An alarm has two states:      'asserted'  Indicates that the
    // condition described by the                 alarm exists.      'cleared'  
    // Indicates that the condition described by the                 alarm does
    // not exist.  For example, a slot in a chassis may define an alarm that
    // specifies whether the slot contains a module.  At the time of module
    // insertion, the physical entity corresponding to the slot asserts this
    // alarm, and the alarm remains asserted until the  slot becomes empty.  If an
    // alarm is being asserted by the physical entity, then the corresponding bit
    // in the alarm list is set to a one. Observe that if the physical entity is
    // not currently asserting any alarms, then the list will have a length of
    // zero. The type is string with length: 0..32.
    Cealarmlist interface{}
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetFilter() yfilter.YFilter { return cealarmentry.YFilter }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) SetFilter(yf yfilter.YFilter) { cealarmentry.YFilter = yf }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetGoName(yname string) string {
    if yname == "entPhysicalIndex" { return "Entphysicalindex" }
    if yname == "ceAlarmFilterProfile" { return "Cealarmfilterprofile" }
    if yname == "ceAlarmSeverity" { return "Cealarmseverity" }
    if yname == "ceAlarmList" { return "Cealarmlist" }
    return ""
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetSegmentPath() string {
    return "ceAlarmEntry" + "[entPhysicalIndex='" + fmt.Sprintf("%v", cealarmentry.Entphysicalindex) + "']"
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["entPhysicalIndex"] = cealarmentry.Entphysicalindex
    leafs["ceAlarmFilterProfile"] = cealarmentry.Cealarmfilterprofile
    leafs["ceAlarmSeverity"] = cealarmentry.Cealarmseverity
    leafs["ceAlarmList"] = cealarmentry.Cealarmlist
    return leafs
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetYangName() string { return "ceAlarmEntry" }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) SetParent(parent types.Entity) { cealarmentry.parent = parent }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetParent() types.Entity { return cealarmentry.parent }

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetParentYangName() string { return "ceAlarmTable" }

// CISCOENTITYALARMMIB_Cealarmhisttable
// This table contains a history of ceAlarmIndicate and
// ceAlarmClear traps generated by the agent.
type CISCOENTITYALARMMIB_Cealarmhisttable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The information conveyed by a ceAlarmIndicate or ceAlarmClear trap. The
    // type is slice of CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry.
    Cealarmhistentry []CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetFilter() yfilter.YFilter { return cealarmhisttable.YFilter }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) SetFilter(yf yfilter.YFilter) { cealarmhisttable.YFilter = yf }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetGoName(yname string) string {
    if yname == "ceAlarmHistEntry" { return "Cealarmhistentry" }
    return ""
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetSegmentPath() string {
    return "ceAlarmHistTable"
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmHistEntry" {
        for _, c := range cealarmhisttable.Cealarmhistentry {
            if cealarmhisttable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry{}
        cealarmhisttable.Cealarmhistentry = append(cealarmhisttable.Cealarmhistentry, child)
        return &cealarmhisttable.Cealarmhistentry[len(cealarmhisttable.Cealarmhistentry)-1]
    }
    return nil
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cealarmhisttable.Cealarmhistentry {
        children[cealarmhisttable.Cealarmhistentry[i].GetSegmentPath()] = &cealarmhisttable.Cealarmhistentry[i]
    }
    return children
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetYangName() string { return "ceAlarmHistTable" }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) SetParent(parent types.Entity) { cealarmhisttable.parent = parent }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetParent() types.Entity { return cealarmhisttable.parent }

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry
// The information conveyed by a ceAlarmIndicate or
// ceAlarmClear trap.
type CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. An integer value uniquely identifying the entry in
    // the table. The value of this object starts at '1' and monotonically
    // increases for each alarm condition transition monitored by the agent.  If
    // the value of this object is '4294967295', the agent will reset it to '1'
    // upon monitoring the next alarm condition transition. The type is
    // interface{} with range: 0..4294967295.
    Cealarmhistindex interface{}

    // This object specifies whether the agent created the entry as the result of
    // an alarm being asserted or cleared. The type is Cealarmhisttype.
    Cealarmhisttype interface{}

    // This object specifies the physical entity that generated the alarm. The
    // type is interface{} with range: 1..2147483647.
    Cealarmhistentphysicalindex interface{}

    // This object specifies the type of alarm generated. The type is interface{}
    // with range: 0..255.
    Cealarmhistalarmtype interface{}

    // This object specifies the severity of the alarm generated. The type is
    // AlarmSeverity.
    Cealarmhistseverity interface{}

    // This object specifies the value of the sysUpTime object at the time the
    // alarm was generated. The type is interface{} with range: 0..4294967295.
    Cealarmhisttimestamp interface{}
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetFilter() yfilter.YFilter { return cealarmhistentry.YFilter }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) SetFilter(yf yfilter.YFilter) { cealarmhistentry.YFilter = yf }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetGoName(yname string) string {
    if yname == "ceAlarmHistIndex" { return "Cealarmhistindex" }
    if yname == "ceAlarmHistType" { return "Cealarmhisttype" }
    if yname == "ceAlarmHistEntPhysicalIndex" { return "Cealarmhistentphysicalindex" }
    if yname == "ceAlarmHistAlarmType" { return "Cealarmhistalarmtype" }
    if yname == "ceAlarmHistSeverity" { return "Cealarmhistseverity" }
    if yname == "ceAlarmHistTimeStamp" { return "Cealarmhisttimestamp" }
    return ""
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetSegmentPath() string {
    return "ceAlarmHistEntry" + "[ceAlarmHistIndex='" + fmt.Sprintf("%v", cealarmhistentry.Cealarmhistindex) + "']"
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmHistIndex"] = cealarmhistentry.Cealarmhistindex
    leafs["ceAlarmHistType"] = cealarmhistentry.Cealarmhisttype
    leafs["ceAlarmHistEntPhysicalIndex"] = cealarmhistentry.Cealarmhistentphysicalindex
    leafs["ceAlarmHistAlarmType"] = cealarmhistentry.Cealarmhistalarmtype
    leafs["ceAlarmHistSeverity"] = cealarmhistentry.Cealarmhistseverity
    leafs["ceAlarmHistTimeStamp"] = cealarmhistentry.Cealarmhisttimestamp
    return leafs
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetYangName() string { return "ceAlarmHistEntry" }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) SetParent(parent types.Entity) { cealarmhistentry.parent = parent }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetParent() types.Entity { return cealarmhistentry.parent }

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetParentYangName() string { return "ceAlarmHistTable" }

// CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype represents the result of an alarm being asserted or cleared.
type CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype string

const (
    CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype_asserted CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype = "asserted"

    CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype_cleared CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype = "cleared"
)

// CISCOENTITYALARMMIB_Cealarmfilterprofiletable
// This table contains a list of alarm filter profiles.
type CISCOENTITYALARMMIB_Cealarmfilterprofiletable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // When a physical entity asserts/clears an alarm AND the ceAlarmFilterProfile
    // object is not '0', the agent applies the specified alarm filter profile in
    // processing the alarm. The agent uses the following procedure in processing
    // the transition of an alarm condition of a given type:  1)  If the alarm
    // list specified by the alarm filter profile's     ceAlarmFilterAlarmsEnabled
    // object specifies that the alarm     type is disabled, then the agent
    // performs no further     processing.  2)  The agent creates an entry in the
    // ceAlarmHistTable.  3)  If the alarm list specified by the alarm filter
    // profile's      ceAlarmFilterNotifiesEnabled object specifies that the alarm
    // type is enabled, then the agent generates the appropriate     notification.
    // 4)  If the alarm list specified by the alarm filter profile's    
    // ceAlarmFilterSyslogEnabled object specifies that the alarm     type is
    // enabled, then the agent generates the appropriate     syslog message. The
    // type is slice of
    // CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry.
    Cealarmfilterprofileentry []CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetFilter() yfilter.YFilter { return cealarmfilterprofiletable.YFilter }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) SetFilter(yf yfilter.YFilter) { cealarmfilterprofiletable.YFilter = yf }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetGoName(yname string) string {
    if yname == "ceAlarmFilterProfileEntry" { return "Cealarmfilterprofileentry" }
    return ""
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetSegmentPath() string {
    return "ceAlarmFilterProfileTable"
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceAlarmFilterProfileEntry" {
        for _, c := range cealarmfilterprofiletable.Cealarmfilterprofileentry {
            if cealarmfilterprofiletable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry{}
        cealarmfilterprofiletable.Cealarmfilterprofileentry = append(cealarmfilterprofiletable.Cealarmfilterprofileentry, child)
        return &cealarmfilterprofiletable.Cealarmfilterprofileentry[len(cealarmfilterprofiletable.Cealarmfilterprofileentry)-1]
    }
    return nil
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range cealarmfilterprofiletable.Cealarmfilterprofileentry {
        children[cealarmfilterprofiletable.Cealarmfilterprofileentry[i].GetSegmentPath()] = &cealarmfilterprofiletable.Cealarmfilterprofileentry[i]
    }
    return children
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetYangName() string { return "ceAlarmFilterProfileTable" }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) SetParent(parent types.Entity) { cealarmfilterprofiletable.parent = parent }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetParent() types.Entity { return cealarmfilterprofiletable.parent }

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetParentYangName() string { return "CISCO-ENTITY-ALARM-MIB" }

// CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry
// When a physical entity asserts/clears an alarm AND the
// ceAlarmFilterProfile object is not '0', the agent applies
// the specified alarm filter profile in processing the alarm.
// The agent uses the following procedure in processing the
// transition of an alarm condition of a given type:
// 
// 1)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterAlarmsEnabled object specifies that the alarm
//     type is disabled, then the agent performs no further
//     processing.
// 
// 2)  The agent creates an entry in the ceAlarmHistTable.
// 
// 3)  If the alarm list specified by the alarm filter profile's 
//     ceAlarmFilterNotifiesEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     notification.
// 
// 4)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterSyslogEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     syslog message.
type CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies the alarm filter
    // profile. The type is interface{} with range: 0..4294967295.
    Cealarmfilterindex interface{}

    // This object facilitates the creation, modification, or  deletion of a
    // conceptual row in this table.  A management client can create a conceptual
    // row in this table by setting this object to 'createAndWait' or 
    // 'createAndGo'.  If a request to create a conceptual row in this table
    // fails, then the system is not capable of supporting any more alarm filters.
    // Before modifying a conceptual row in this table, the  management client
    // must set this object to 'notInService'. After modifying a conceptual row in
    // this table, the  management client must set this object to 'active'. This
    // operation causes the modifications made to an alarm filter profile to take
    // effect.  An implementation should not allow a conceptual row in this table
    // to be deleted if one or more physical entities reference it. The type is
    // RowStatus.
    Cealarmfilterstatus interface{}

    // This object specifies an arbitrary name associated with the alarm filter
    // profile by the management client, and provides a non-volatile 'handle' for
    // the alarm filter profile.  On the first instantiation of an alarm filter
    // profile, the value of this object is a zero-length string.  However, an
    // agent may choose to set the value to a locally unique default value.  If an
    // implementation supports write access to this object, then the agent is
    // responsible for ensuring the retention of any value written to this object
    // until a management client deletes it.  The level of retention must span
    // reboots and  reinitializations of the network management system, including
    // those that result in different assignments to the value of the
    // entPhysicalIndex associated with the physical entity. The type is string.
    Cealarmfilteralias interface{}

    // This object specifies a list of alarms that are enabled. The type is string
    // with length: 0..32.
    Cealarmfilteralarmsenabled interface{}

    // This object specifies a list of alarms for which notification generation is
    // enabled. The type is string with length: 0..32.
    Cealarmfilternotifiesenabled interface{}

    // This object specifies a list of alarms for which syslog message generation
    // is enabled. The type is string with length: 0..32.
    Cealarmfiltersyslogenabled interface{}
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetFilter() yfilter.YFilter { return cealarmfilterprofileentry.YFilter }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) SetFilter(yf yfilter.YFilter) { cealarmfilterprofileentry.YFilter = yf }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetGoName(yname string) string {
    if yname == "ceAlarmFilterIndex" { return "Cealarmfilterindex" }
    if yname == "ceAlarmFilterStatus" { return "Cealarmfilterstatus" }
    if yname == "ceAlarmFilterAlias" { return "Cealarmfilteralias" }
    if yname == "ceAlarmFilterAlarmsEnabled" { return "Cealarmfilteralarmsenabled" }
    if yname == "ceAlarmFilterNotifiesEnabled" { return "Cealarmfilternotifiesenabled" }
    if yname == "ceAlarmFilterSyslogEnabled" { return "Cealarmfiltersyslogenabled" }
    return ""
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetSegmentPath() string {
    return "ceAlarmFilterProfileEntry" + "[ceAlarmFilterIndex='" + fmt.Sprintf("%v", cealarmfilterprofileentry.Cealarmfilterindex) + "']"
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceAlarmFilterIndex"] = cealarmfilterprofileentry.Cealarmfilterindex
    leafs["ceAlarmFilterStatus"] = cealarmfilterprofileentry.Cealarmfilterstatus
    leafs["ceAlarmFilterAlias"] = cealarmfilterprofileentry.Cealarmfilteralias
    leafs["ceAlarmFilterAlarmsEnabled"] = cealarmfilterprofileentry.Cealarmfilteralarmsenabled
    leafs["ceAlarmFilterNotifiesEnabled"] = cealarmfilterprofileentry.Cealarmfilternotifiesenabled
    leafs["ceAlarmFilterSyslogEnabled"] = cealarmfilterprofileentry.Cealarmfiltersyslogenabled
    return leafs
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetBundleName() string { return "cisco_ios_xe" }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetYangName() string { return "ceAlarmFilterProfileEntry" }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) SetParent(parent types.Entity) { cealarmfilterprofileentry.parent = parent }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetParent() types.Entity { return cealarmfilterprofileentry.parent }

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetParentYangName() string { return "ceAlarmFilterProfileTable" }

