// This MIB module defines the managed objects that support the
// monitoring of alarms generated by physical entities contained
// by the system, including chassis, slots, modules, ports, power
// supplies, and fans.  In order to monitor alarms generated by a
// physical entity, it must be represented by a row in the
// entPhysicalTable (see ENTITY-MIB).
package cisco_entity_alarm_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_entity_alarm_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-ENTITY-ALARM-MIB CISCO-ENTITY-ALARM-MIB}", reflect.TypeOf(CISCOENTITYALARMMIB{}))
    ydk.RegisterEntity("CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB", reflect.TypeOf(CISCOENTITYALARMMIB{}))
}

// AlarmSeverity represents             operation.
type AlarmSeverity string

const (
    AlarmSeverity_critical AlarmSeverity = "critical"

    AlarmSeverity_major AlarmSeverity = "major"

    AlarmSeverity_minor AlarmSeverity = "minor"

    AlarmSeverity_info AlarmSeverity = "info"
)

// CISCOENTITYALARMMIB
type CISCOENTITYALARMMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CeAlarmMonitoring CISCOENTITYALARMMIB_CeAlarmMonitoring

    
    CeAlarmHistory CISCOENTITYALARMMIB_CeAlarmHistory

    
    CeAlarmFiltering CISCOENTITYALARMMIB_CeAlarmFiltering

    // For each type of entity (represented entPhysicalVendorType OID), this table
    // contains a mapping between a unique  ceAlarmDescrIndex and
    // entPhysicalvendorType OID.
    CeAlarmDescrMapTable CISCOENTITYALARMMIB_CeAlarmDescrMapTable

    // This table contains a description for each alarm type defined by each
    // vendor type employed by the system. Observe that this table is sparse in
    // nature, as it is rarely the case that a physical entity type needs to 
    // define every alarm in its alarm space.
    CeAlarmDescrTable CISCOENTITYALARMMIB_CeAlarmDescrTable

    // This table specifies alarm control and status information related to each
    // physical entity contained by the system, including the alarms currently
    // being asserted by each physical entity capable of generating alarms.
    CeAlarmTable CISCOENTITYALARMMIB_CeAlarmTable

    // This table contains a history of ceAlarmIndicate and ceAlarmClear traps
    // generated by the agent.
    CeAlarmHistTable CISCOENTITYALARMMIB_CeAlarmHistTable

    // This table contains a list of alarm filter profiles.
    CeAlarmFilterProfileTable CISCOENTITYALARMMIB_CeAlarmFilterProfileTable
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetEntityData() *types.CommonEntityData {
    cISCOENTITYALARMMIB.EntityData.YFilter = cISCOENTITYALARMMIB.YFilter
    cISCOENTITYALARMMIB.EntityData.YangName = "CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOENTITYALARMMIB.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.SegmentPath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.AbsolutePath = cISCOENTITYALARMMIB.EntityData.SegmentPath
    cISCOENTITYALARMMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOENTITYALARMMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOENTITYALARMMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOENTITYALARMMIB.EntityData.Children = types.NewOrderedMap()
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmMonitoring", types.YChild{"CeAlarmMonitoring", &cISCOENTITYALARMMIB.CeAlarmMonitoring})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmHistory", types.YChild{"CeAlarmHistory", &cISCOENTITYALARMMIB.CeAlarmHistory})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmFiltering", types.YChild{"CeAlarmFiltering", &cISCOENTITYALARMMIB.CeAlarmFiltering})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmDescrMapTable", types.YChild{"CeAlarmDescrMapTable", &cISCOENTITYALARMMIB.CeAlarmDescrMapTable})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmDescrTable", types.YChild{"CeAlarmDescrTable", &cISCOENTITYALARMMIB.CeAlarmDescrTable})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmTable", types.YChild{"CeAlarmTable", &cISCOENTITYALARMMIB.CeAlarmTable})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmHistTable", types.YChild{"CeAlarmHistTable", &cISCOENTITYALARMMIB.CeAlarmHistTable})
    cISCOENTITYALARMMIB.EntityData.Children.Append("ceAlarmFilterProfileTable", types.YChild{"CeAlarmFilterProfileTable", &cISCOENTITYALARMMIB.CeAlarmFilterProfileTable})
    cISCOENTITYALARMMIB.EntityData.Leafs = types.NewOrderedMap()

    cISCOENTITYALARMMIB.EntityData.YListKeys = []string {}

    return &(cISCOENTITYALARMMIB.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmMonitoring
type CISCOENTITYALARMMIB_CeAlarmMonitoring struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'critical'. The type is interface{} with range:
    // 0..4294967295.
    CeAlarmCriticalCount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'major'. The type is interface{} with range:
    // 0..4294967295.
    CeAlarmMajorCount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'minor'. The type is interface{} with range:
    // 0..4294967295.
    CeAlarmMinorCount interface{}

    // If the management client writes a value of 'true' to this object, the agent
    // stops signalling all external audible alarms under the control of the
    // agent.  Reading this object should always result in a value of 'false'. 
    // Observe that alarm cutoff does not have an effect on monitoring, history
    // logging, generation of notifications, or syslog message generation.  It
    // also does not prevent the agent from signalling external audible alarms for
    // alarms asserted after alarm-cutoff.  This object emulates the 'alarm
    // cut-off' mechanism typically installed in a central office (e.g., a big red
    // button).  Observe this object should neither affect external visual alarms
    // under the control of the agent, nor should it affect the current state of
    // alarms being asserted by the system. The type is bool.
    CeAlarmCutOff interface{}
}

func (ceAlarmMonitoring *CISCOENTITYALARMMIB_CeAlarmMonitoring) GetEntityData() *types.CommonEntityData {
    ceAlarmMonitoring.EntityData.YFilter = ceAlarmMonitoring.YFilter
    ceAlarmMonitoring.EntityData.YangName = "ceAlarmMonitoring"
    ceAlarmMonitoring.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmMonitoring.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmMonitoring.EntityData.SegmentPath = "ceAlarmMonitoring"
    ceAlarmMonitoring.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmMonitoring.EntityData.SegmentPath
    ceAlarmMonitoring.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmMonitoring.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmMonitoring.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmMonitoring.EntityData.Children = types.NewOrderedMap()
    ceAlarmMonitoring.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmMonitoring.EntityData.Leafs.Append("ceAlarmCriticalCount", types.YLeaf{"CeAlarmCriticalCount", ceAlarmMonitoring.CeAlarmCriticalCount})
    ceAlarmMonitoring.EntityData.Leafs.Append("ceAlarmMajorCount", types.YLeaf{"CeAlarmMajorCount", ceAlarmMonitoring.CeAlarmMajorCount})
    ceAlarmMonitoring.EntityData.Leafs.Append("ceAlarmMinorCount", types.YLeaf{"CeAlarmMinorCount", ceAlarmMonitoring.CeAlarmMinorCount})
    ceAlarmMonitoring.EntityData.Leafs.Append("ceAlarmCutOff", types.YLeaf{"CeAlarmCutOff", ceAlarmMonitoring.CeAlarmCutOff})

    ceAlarmMonitoring.EntityData.YListKeys = []string {}

    return &(ceAlarmMonitoring.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmHistory
type CISCOENTITYALARMMIB_CeAlarmHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object specifies the number of entries that the  ceAlarmHistTable can
    // contain.  When a physical entity generates an unfiltered alarm, and the
    // capacity of the ceAlarmHistTable has reached the value specified by this
    // object, then the agent deletes the oldest entity in order to accommodate
    // the new entry. A value of '0' prevents any history from being retained.  .
    // The type is interface{} with range: 0..500.
    CeAlarmHistTableSize interface{}

    // This object specifies the value of the ceAlarmHistIndex object
    // corresponding to the last entry added to the table by the agent.  If the
    // management client uses the notifications defined by this module, then it
    // can poll this object to determine whether it has missed a notification sent
    // by the agent. The type is interface{} with range: 0..4294967295.
    CeAlarmHistLastIndex interface{}
}

func (ceAlarmHistory *CISCOENTITYALARMMIB_CeAlarmHistory) GetEntityData() *types.CommonEntityData {
    ceAlarmHistory.EntityData.YFilter = ceAlarmHistory.YFilter
    ceAlarmHistory.EntityData.YangName = "ceAlarmHistory"
    ceAlarmHistory.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmHistory.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmHistory.EntityData.SegmentPath = "ceAlarmHistory"
    ceAlarmHistory.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmHistory.EntityData.SegmentPath
    ceAlarmHistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmHistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmHistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmHistory.EntityData.Children = types.NewOrderedMap()
    ceAlarmHistory.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmHistory.EntityData.Leafs.Append("ceAlarmHistTableSize", types.YLeaf{"CeAlarmHistTableSize", ceAlarmHistory.CeAlarmHistTableSize})
    ceAlarmHistory.EntityData.Leafs.Append("ceAlarmHistLastIndex", types.YLeaf{"CeAlarmHistLastIndex", ceAlarmHistory.CeAlarmHistLastIndex})

    ceAlarmHistory.EntityData.YListKeys = []string {}

    return &(ceAlarmHistory.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmFiltering
type CISCOENTITYALARMMIB_CeAlarmFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object specifies a severity threshold governing the generation of
    // ceAlarmAsserted and ceAlarmCleared notifications.  For example, if the
    // value of this object is set to 'major', then the agent generates these
    // notifications if and only if the severity of the alarm being indicated is
    // 'major' or 'critical'.  The value of '0' disables the  generation of
    // notifications.  Observe that this setting overrides the value of the 
    // ceAlarmFilterNotifiesEnabled object.  This object affects notification
    // generation only; that is, it does not affect monitoring, history logging,
    // and syslog message generation. The type is interface{} with range: 0..4.
    CeAlarmNotifiesEnable interface{}

    // This object specifies a severity threshold governing the generation of
    // syslog messages corresponding to alarms.  For example, if the value of this
    // object is set to 'major', then the agent generates these a syslog message
    // if and only if the severity of the alarm being indicated is 'major' or
    // 'critical'. The value of '0' disables the generation of syslog messages
    // corresponding to alarms.  Observe that this setting overrides the value of
    // the  ceAlarmFilterSyslogEnabled object.  This object affects syslog message
    // generation only; that is, it does not have an effect on monitoring, history
    // logging, and generation of notifications. The type is interface{} with
    // range: 0..4.
    CeAlarmSyslogEnable interface{}

    // This object contains an appropriate value to be used for ceAlarmFilterIndex
    // when creating entries in the ceAlarmFilterProfileTable.  The value '0'
    // indicates that no unassigned entries are available.  To obtain a
    // ceAlarmFilterIndex, the management client issues a get request.  The agent
    // has the responsibility of  modifying the value of this object following
    // each  successful get request. The type is interface{} with range:
    // 0..4294967295.
    CeAlarmFilterProfileIndexNext interface{}
}

func (ceAlarmFiltering *CISCOENTITYALARMMIB_CeAlarmFiltering) GetEntityData() *types.CommonEntityData {
    ceAlarmFiltering.EntityData.YFilter = ceAlarmFiltering.YFilter
    ceAlarmFiltering.EntityData.YangName = "ceAlarmFiltering"
    ceAlarmFiltering.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmFiltering.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmFiltering.EntityData.SegmentPath = "ceAlarmFiltering"
    ceAlarmFiltering.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmFiltering.EntityData.SegmentPath
    ceAlarmFiltering.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmFiltering.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmFiltering.EntityData.Children = types.NewOrderedMap()
    ceAlarmFiltering.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmFiltering.EntityData.Leafs.Append("ceAlarmNotifiesEnable", types.YLeaf{"CeAlarmNotifiesEnable", ceAlarmFiltering.CeAlarmNotifiesEnable})
    ceAlarmFiltering.EntityData.Leafs.Append("ceAlarmSyslogEnable", types.YLeaf{"CeAlarmSyslogEnable", ceAlarmFiltering.CeAlarmSyslogEnable})
    ceAlarmFiltering.EntityData.Leafs.Append("ceAlarmFilterProfileIndexNext", types.YLeaf{"CeAlarmFilterProfileIndexNext", ceAlarmFiltering.CeAlarmFilterProfileIndexNext})

    ceAlarmFiltering.EntityData.YListKeys = []string {}

    return &(ceAlarmFiltering.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmDescrMapTable
// For each type of entity (represented entPhysicalVendorType
// OID), this table contains a mapping between a unique 
// ceAlarmDescrIndex and entPhysicalvendorType OID.
type CISCOENTITYALARMMIB_CeAlarmDescrMapTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A mapping between an alarm description and a vendor type. The type is slice
    // of CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry.
    CeAlarmDescrMapEntry []*CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry
}

func (ceAlarmDescrMapTable *CISCOENTITYALARMMIB_CeAlarmDescrMapTable) GetEntityData() *types.CommonEntityData {
    ceAlarmDescrMapTable.EntityData.YFilter = ceAlarmDescrMapTable.YFilter
    ceAlarmDescrMapTable.EntityData.YangName = "ceAlarmDescrMapTable"
    ceAlarmDescrMapTable.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmDescrMapTable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmDescrMapTable.EntityData.SegmentPath = "ceAlarmDescrMapTable"
    ceAlarmDescrMapTable.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmDescrMapTable.EntityData.SegmentPath
    ceAlarmDescrMapTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmDescrMapTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmDescrMapTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmDescrMapTable.EntityData.Children = types.NewOrderedMap()
    ceAlarmDescrMapTable.EntityData.Children.Append("ceAlarmDescrMapEntry", types.YChild{"CeAlarmDescrMapEntry", nil})
    for i := range ceAlarmDescrMapTable.CeAlarmDescrMapEntry {
        ceAlarmDescrMapTable.EntityData.Children.Append(types.GetSegmentPath(ceAlarmDescrMapTable.CeAlarmDescrMapEntry[i]), types.YChild{"CeAlarmDescrMapEntry", ceAlarmDescrMapTable.CeAlarmDescrMapEntry[i]})
    }
    ceAlarmDescrMapTable.EntityData.Leafs = types.NewOrderedMap()

    ceAlarmDescrMapTable.EntityData.YListKeys = []string {}

    return &(ceAlarmDescrMapTable.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry
// A mapping between an alarm description and a vendor type.
type CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. This object uniquely identifies an alarm
    // description. The type is interface{} with range: 0..4294967295.
    CeAlarmDescrIndex interface{}

    // This object specifies an object identifier (typically an
    // enterprise-specific OID) that uniquely identifies the vendor type of those
    // physical entities that this alarm description applies to. The type is
    // string with pattern:
    // (([0-1](\.[1-3]?[0-9]))|(2\.(0|([1-9]\d*))))(\.(0|([1-9]\d*)))*.
    CeAlarmDescrVendorType interface{}
}

func (ceAlarmDescrMapEntry *CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry) GetEntityData() *types.CommonEntityData {
    ceAlarmDescrMapEntry.EntityData.YFilter = ceAlarmDescrMapEntry.YFilter
    ceAlarmDescrMapEntry.EntityData.YangName = "ceAlarmDescrMapEntry"
    ceAlarmDescrMapEntry.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmDescrMapEntry.EntityData.ParentYangName = "ceAlarmDescrMapTable"
    ceAlarmDescrMapEntry.EntityData.SegmentPath = "ceAlarmDescrMapEntry" + types.AddKeyToken(ceAlarmDescrMapEntry.CeAlarmDescrIndex, "ceAlarmDescrIndex")
    ceAlarmDescrMapEntry.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/ceAlarmDescrMapTable/" + ceAlarmDescrMapEntry.EntityData.SegmentPath
    ceAlarmDescrMapEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmDescrMapEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmDescrMapEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmDescrMapEntry.EntityData.Children = types.NewOrderedMap()
    ceAlarmDescrMapEntry.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmDescrMapEntry.EntityData.Leafs.Append("ceAlarmDescrIndex", types.YLeaf{"CeAlarmDescrIndex", ceAlarmDescrMapEntry.CeAlarmDescrIndex})
    ceAlarmDescrMapEntry.EntityData.Leafs.Append("ceAlarmDescrVendorType", types.YLeaf{"CeAlarmDescrVendorType", ceAlarmDescrMapEntry.CeAlarmDescrVendorType})

    ceAlarmDescrMapEntry.EntityData.YListKeys = []string {"CeAlarmDescrIndex"}

    return &(ceAlarmDescrMapEntry.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmDescrTable
// This table contains a description for each alarm type
// defined by each vendor type employed by the system.
// Observe that this table is sparse in nature, as it is
// rarely the case that a physical entity type needs to 
// define every alarm in its alarm space.
type CISCOENTITYALARMMIB_CeAlarmDescrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A collection of attributes that describe an alarm type. The type is slice
    // of CISCOENTITYALARMMIB_CeAlarmDescrTable_CeAlarmDescrEntry.
    CeAlarmDescrEntry []*CISCOENTITYALARMMIB_CeAlarmDescrTable_CeAlarmDescrEntry
}

func (ceAlarmDescrTable *CISCOENTITYALARMMIB_CeAlarmDescrTable) GetEntityData() *types.CommonEntityData {
    ceAlarmDescrTable.EntityData.YFilter = ceAlarmDescrTable.YFilter
    ceAlarmDescrTable.EntityData.YangName = "ceAlarmDescrTable"
    ceAlarmDescrTable.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmDescrTable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmDescrTable.EntityData.SegmentPath = "ceAlarmDescrTable"
    ceAlarmDescrTable.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmDescrTable.EntityData.SegmentPath
    ceAlarmDescrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmDescrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmDescrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmDescrTable.EntityData.Children = types.NewOrderedMap()
    ceAlarmDescrTable.EntityData.Children.Append("ceAlarmDescrEntry", types.YChild{"CeAlarmDescrEntry", nil})
    for i := range ceAlarmDescrTable.CeAlarmDescrEntry {
        ceAlarmDescrTable.EntityData.Children.Append(types.GetSegmentPath(ceAlarmDescrTable.CeAlarmDescrEntry[i]), types.YChild{"CeAlarmDescrEntry", ceAlarmDescrTable.CeAlarmDescrEntry[i]})
    }
    ceAlarmDescrTable.EntityData.Leafs = types.NewOrderedMap()

    ceAlarmDescrTable.EntityData.YListKeys = []string {}

    return &(ceAlarmDescrTable.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmDescrTable_CeAlarmDescrEntry
// A collection of attributes that describe an alarm type.
type CISCOENTITYALARMMIB_CeAlarmDescrTable_CeAlarmDescrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with range: 0..4294967295.
    // Refers to
    // cisco_entity_alarm_mib.CISCOENTITYALARMMIB_CeAlarmDescrMapTable_CeAlarmDescrMapEntry_CeAlarmDescrIndex
    CeAlarmDescrIndex interface{}

    // This attribute is a key. This object specifies the alarm type being
    // described. The type is interface{} with range: 0..255.
    CeAlarmDescrAlarmType interface{}

    // This object specifies the severity associated with the alarm type.  An
    // implementation may chose to not allow dynamic severity assignment, in which
    // case it would restrict access to this object to be read-only.  If an
    // implementation allows dynamic severity assignment, then a management client
    // can revert to the default severity by writing the value '0' to this object.
    // There exists a class of systems that should implement dynamic severity
    // assignment.  For example, consider a DSLAM (Digital Subscriber Loop Access
    // Multiplexor) designed for both the central office and pedestal
    // environments.  A 'pedestal' is typically a dark-green metal box mounted on
    // a concrete or stone foundation in which carrier-class companies house
    // equipment. The central office typically controls the temperature and
    // humidity of the environment, reducing reliance on a system's fans.  Thus,
    // the customer probably has a desire to reduce the  severity of alarms
    // indicating the failure of a fan.  However, a pedestal environment has a
    // much greater reliance on a system's fans.  Thus, the customer probably has
    // a desire to increase the severity of alarms indicating the failure of a
    // fan. The type is interface{} with range: 0..4.
    CeAlarmDescrSeverity interface{}

    // This object specifies a human-readable message describing the alarm. The
    // type is string.
    CeAlarmDescrText interface{}
}

func (ceAlarmDescrEntry *CISCOENTITYALARMMIB_CeAlarmDescrTable_CeAlarmDescrEntry) GetEntityData() *types.CommonEntityData {
    ceAlarmDescrEntry.EntityData.YFilter = ceAlarmDescrEntry.YFilter
    ceAlarmDescrEntry.EntityData.YangName = "ceAlarmDescrEntry"
    ceAlarmDescrEntry.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmDescrEntry.EntityData.ParentYangName = "ceAlarmDescrTable"
    ceAlarmDescrEntry.EntityData.SegmentPath = "ceAlarmDescrEntry" + types.AddKeyToken(ceAlarmDescrEntry.CeAlarmDescrIndex, "ceAlarmDescrIndex") + types.AddKeyToken(ceAlarmDescrEntry.CeAlarmDescrAlarmType, "ceAlarmDescrAlarmType")
    ceAlarmDescrEntry.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/ceAlarmDescrTable/" + ceAlarmDescrEntry.EntityData.SegmentPath
    ceAlarmDescrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmDescrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmDescrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmDescrEntry.EntityData.Children = types.NewOrderedMap()
    ceAlarmDescrEntry.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmDescrEntry.EntityData.Leafs.Append("ceAlarmDescrIndex", types.YLeaf{"CeAlarmDescrIndex", ceAlarmDescrEntry.CeAlarmDescrIndex})
    ceAlarmDescrEntry.EntityData.Leafs.Append("ceAlarmDescrAlarmType", types.YLeaf{"CeAlarmDescrAlarmType", ceAlarmDescrEntry.CeAlarmDescrAlarmType})
    ceAlarmDescrEntry.EntityData.Leafs.Append("ceAlarmDescrSeverity", types.YLeaf{"CeAlarmDescrSeverity", ceAlarmDescrEntry.CeAlarmDescrSeverity})
    ceAlarmDescrEntry.EntityData.Leafs.Append("ceAlarmDescrText", types.YLeaf{"CeAlarmDescrText", ceAlarmDescrEntry.CeAlarmDescrText})

    ceAlarmDescrEntry.EntityData.YListKeys = []string {"CeAlarmDescrIndex", "CeAlarmDescrAlarmType"}

    return &(ceAlarmDescrEntry.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmTable
// This table specifies alarm control and status information
// related to each physical entity contained by the system,
// including the alarms currently being asserted by each physical
// entity capable of generating alarms.
type CISCOENTITYALARMMIB_CeAlarmTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Alarm control and status information related to the  corresponding physical
    // entity, including a list of those alarms currently being asserted by that
    // physical entity. The type is slice of
    // CISCOENTITYALARMMIB_CeAlarmTable_CeAlarmEntry.
    CeAlarmEntry []*CISCOENTITYALARMMIB_CeAlarmTable_CeAlarmEntry
}

func (ceAlarmTable *CISCOENTITYALARMMIB_CeAlarmTable) GetEntityData() *types.CommonEntityData {
    ceAlarmTable.EntityData.YFilter = ceAlarmTable.YFilter
    ceAlarmTable.EntityData.YangName = "ceAlarmTable"
    ceAlarmTable.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmTable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmTable.EntityData.SegmentPath = "ceAlarmTable"
    ceAlarmTable.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmTable.EntityData.SegmentPath
    ceAlarmTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmTable.EntityData.Children = types.NewOrderedMap()
    ceAlarmTable.EntityData.Children.Append("ceAlarmEntry", types.YChild{"CeAlarmEntry", nil})
    for i := range ceAlarmTable.CeAlarmEntry {
        ceAlarmTable.EntityData.Children.Append(types.GetSegmentPath(ceAlarmTable.CeAlarmEntry[i]), types.YChild{"CeAlarmEntry", ceAlarmTable.CeAlarmEntry[i]})
    }
    ceAlarmTable.EntityData.Leafs = types.NewOrderedMap()

    ceAlarmTable.EntityData.YListKeys = []string {}

    return &(ceAlarmTable.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmTable_CeAlarmEntry
// Alarm control and status information related to the 
// corresponding physical entity, including a list of those
// alarms currently being asserted by that physical entity.
type CISCOENTITYALARMMIB_CeAlarmTable_CeAlarmEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // entity_mib.ENTITYMIB_EntPhysicalTable_EntPhysicalEntry_EntPhysicalIndex
    EntPhysicalIndex interface{}

    // This object specifies the alarm filter profile associated with the
    // corresponding physical entity.  An alarm filter profile controls which
    // alarm types the agent will monitor and signal for the corresponding
    // physical entity.  If the value of this object is '0', then the agent
    // monitors and signals all alarms associated with the corresponding physical
    // entity. The type is interface{} with range: 0..4294967295.
    CeAlarmFilterProfile interface{}

    // This object specifies the highest severity alarm currently being asserted
    // by the corresponding physical entity.  A value of '0' indicates that there
    // the corresponding physical entity currently is not asserting any alarms.
    // The type is interface{} with range: 0..4.
    CeAlarmSeverity interface{}

    // This object specifies those alarms currently being asserted by the
    // corresponding physical entity.  Note, an alarm indicates a condition, not
    // an event.  An alarm has two states:      'asserted'  Indicates that the
    // condition described by the                 alarm exists.      'cleared'  
    // Indicates that the condition described by the                 alarm does
    // not exist.  For example, a slot in a chassis may define an alarm that
    // specifies whether the slot contains a module.  At the time of module
    // insertion, the physical entity corresponding to the slot asserts this
    // alarm, and the alarm remains asserted until the  slot becomes empty.  If an
    // alarm is being asserted by the physical entity, then the corresponding bit
    // in the alarm list is set to a one. Observe that if the physical entity is
    // not currently asserting any alarms, then the list will have a length of
    // zero. The type is string with length: 0..32.
    CeAlarmList interface{}
}

func (ceAlarmEntry *CISCOENTITYALARMMIB_CeAlarmTable_CeAlarmEntry) GetEntityData() *types.CommonEntityData {
    ceAlarmEntry.EntityData.YFilter = ceAlarmEntry.YFilter
    ceAlarmEntry.EntityData.YangName = "ceAlarmEntry"
    ceAlarmEntry.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmEntry.EntityData.ParentYangName = "ceAlarmTable"
    ceAlarmEntry.EntityData.SegmentPath = "ceAlarmEntry" + types.AddKeyToken(ceAlarmEntry.EntPhysicalIndex, "entPhysicalIndex")
    ceAlarmEntry.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/ceAlarmTable/" + ceAlarmEntry.EntityData.SegmentPath
    ceAlarmEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmEntry.EntityData.Children = types.NewOrderedMap()
    ceAlarmEntry.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmEntry.EntityData.Leafs.Append("entPhysicalIndex", types.YLeaf{"EntPhysicalIndex", ceAlarmEntry.EntPhysicalIndex})
    ceAlarmEntry.EntityData.Leafs.Append("ceAlarmFilterProfile", types.YLeaf{"CeAlarmFilterProfile", ceAlarmEntry.CeAlarmFilterProfile})
    ceAlarmEntry.EntityData.Leafs.Append("ceAlarmSeverity", types.YLeaf{"CeAlarmSeverity", ceAlarmEntry.CeAlarmSeverity})
    ceAlarmEntry.EntityData.Leafs.Append("ceAlarmList", types.YLeaf{"CeAlarmList", ceAlarmEntry.CeAlarmList})

    ceAlarmEntry.EntityData.YListKeys = []string {"EntPhysicalIndex"}

    return &(ceAlarmEntry.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmHistTable
// This table contains a history of ceAlarmIndicate and
// ceAlarmClear traps generated by the agent.
type CISCOENTITYALARMMIB_CeAlarmHistTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The information conveyed by a ceAlarmIndicate or ceAlarmClear trap. The
    // type is slice of CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry.
    CeAlarmHistEntry []*CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry
}

func (ceAlarmHistTable *CISCOENTITYALARMMIB_CeAlarmHistTable) GetEntityData() *types.CommonEntityData {
    ceAlarmHistTable.EntityData.YFilter = ceAlarmHistTable.YFilter
    ceAlarmHistTable.EntityData.YangName = "ceAlarmHistTable"
    ceAlarmHistTable.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmHistTable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmHistTable.EntityData.SegmentPath = "ceAlarmHistTable"
    ceAlarmHistTable.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmHistTable.EntityData.SegmentPath
    ceAlarmHistTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmHistTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmHistTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmHistTable.EntityData.Children = types.NewOrderedMap()
    ceAlarmHistTable.EntityData.Children.Append("ceAlarmHistEntry", types.YChild{"CeAlarmHistEntry", nil})
    for i := range ceAlarmHistTable.CeAlarmHistEntry {
        ceAlarmHistTable.EntityData.Children.Append(types.GetSegmentPath(ceAlarmHistTable.CeAlarmHistEntry[i]), types.YChild{"CeAlarmHistEntry", ceAlarmHistTable.CeAlarmHistEntry[i]})
    }
    ceAlarmHistTable.EntityData.Leafs = types.NewOrderedMap()

    ceAlarmHistTable.EntityData.YListKeys = []string {}

    return &(ceAlarmHistTable.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry
// The information conveyed by a ceAlarmIndicate or
// ceAlarmClear trap.
type CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. An integer value uniquely identifying the entry in
    // the table. The value of this object starts at '1' and monotonically
    // increases for each alarm condition transition monitored by the agent.  If
    // the value of this object is '4294967295', the agent will reset it to '1'
    // upon monitoring the next alarm condition transition. The type is
    // interface{} with range: 0..4294967295.
    CeAlarmHistIndex interface{}

    // This object specifies whether the agent created the entry as the result of
    // an alarm being asserted or cleared. The type is CeAlarmHistType.
    CeAlarmHistType interface{}

    // This object specifies the physical entity that generated the alarm. The
    // type is interface{} with range: 1..2147483647.
    CeAlarmHistEntPhysicalIndex interface{}

    // This object specifies the type of alarm generated. The type is interface{}
    // with range: 0..255.
    CeAlarmHistAlarmType interface{}

    // This object specifies the severity of the alarm generated. The type is
    // AlarmSeverity.
    CeAlarmHistSeverity interface{}

    // This object specifies the value of the sysUpTime object at the time the
    // alarm was generated. The type is interface{} with range: 0..4294967295.
    CeAlarmHistTimeStamp interface{}
}

func (ceAlarmHistEntry *CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry) GetEntityData() *types.CommonEntityData {
    ceAlarmHistEntry.EntityData.YFilter = ceAlarmHistEntry.YFilter
    ceAlarmHistEntry.EntityData.YangName = "ceAlarmHistEntry"
    ceAlarmHistEntry.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmHistEntry.EntityData.ParentYangName = "ceAlarmHistTable"
    ceAlarmHistEntry.EntityData.SegmentPath = "ceAlarmHistEntry" + types.AddKeyToken(ceAlarmHistEntry.CeAlarmHistIndex, "ceAlarmHistIndex")
    ceAlarmHistEntry.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/ceAlarmHistTable/" + ceAlarmHistEntry.EntityData.SegmentPath
    ceAlarmHistEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmHistEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmHistEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmHistEntry.EntityData.Children = types.NewOrderedMap()
    ceAlarmHistEntry.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistIndex", types.YLeaf{"CeAlarmHistIndex", ceAlarmHistEntry.CeAlarmHistIndex})
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistType", types.YLeaf{"CeAlarmHistType", ceAlarmHistEntry.CeAlarmHistType})
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistEntPhysicalIndex", types.YLeaf{"CeAlarmHistEntPhysicalIndex", ceAlarmHistEntry.CeAlarmHistEntPhysicalIndex})
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistAlarmType", types.YLeaf{"CeAlarmHistAlarmType", ceAlarmHistEntry.CeAlarmHistAlarmType})
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistSeverity", types.YLeaf{"CeAlarmHistSeverity", ceAlarmHistEntry.CeAlarmHistSeverity})
    ceAlarmHistEntry.EntityData.Leafs.Append("ceAlarmHistTimeStamp", types.YLeaf{"CeAlarmHistTimeStamp", ceAlarmHistEntry.CeAlarmHistTimeStamp})

    ceAlarmHistEntry.EntityData.YListKeys = []string {"CeAlarmHistIndex"}

    return &(ceAlarmHistEntry.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType represents the result of an alarm being asserted or cleared.
type CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType string

const (
    CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType_asserted CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType = "asserted"

    CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType_cleared CISCOENTITYALARMMIB_CeAlarmHistTable_CeAlarmHistEntry_CeAlarmHistType = "cleared"
)

// CISCOENTITYALARMMIB_CeAlarmFilterProfileTable
// This table contains a list of alarm filter profiles.
type CISCOENTITYALARMMIB_CeAlarmFilterProfileTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When a physical entity asserts/clears an alarm AND the ceAlarmFilterProfile
    // object is not '0', the agent applies the specified alarm filter profile in
    // processing the alarm. The agent uses the following procedure in processing
    // the transition of an alarm condition of a given type:  1)  If the alarm
    // list specified by the alarm filter profile's     ceAlarmFilterAlarmsEnabled
    // object specifies that the alarm     type is disabled, then the agent
    // performs no further     processing.  2)  The agent creates an entry in the
    // ceAlarmHistTable.  3)  If the alarm list specified by the alarm filter
    // profile's      ceAlarmFilterNotifiesEnabled object specifies that the alarm
    // type is enabled, then the agent generates the appropriate     notification.
    // 4)  If the alarm list specified by the alarm filter profile's    
    // ceAlarmFilterSyslogEnabled object specifies that the alarm     type is
    // enabled, then the agent generates the appropriate     syslog message. The
    // type is slice of
    // CISCOENTITYALARMMIB_CeAlarmFilterProfileTable_CeAlarmFilterProfileEntry.
    CeAlarmFilterProfileEntry []*CISCOENTITYALARMMIB_CeAlarmFilterProfileTable_CeAlarmFilterProfileEntry
}

func (ceAlarmFilterProfileTable *CISCOENTITYALARMMIB_CeAlarmFilterProfileTable) GetEntityData() *types.CommonEntityData {
    ceAlarmFilterProfileTable.EntityData.YFilter = ceAlarmFilterProfileTable.YFilter
    ceAlarmFilterProfileTable.EntityData.YangName = "ceAlarmFilterProfileTable"
    ceAlarmFilterProfileTable.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmFilterProfileTable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    ceAlarmFilterProfileTable.EntityData.SegmentPath = "ceAlarmFilterProfileTable"
    ceAlarmFilterProfileTable.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/" + ceAlarmFilterProfileTable.EntityData.SegmentPath
    ceAlarmFilterProfileTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmFilterProfileTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmFilterProfileTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmFilterProfileTable.EntityData.Children = types.NewOrderedMap()
    ceAlarmFilterProfileTable.EntityData.Children.Append("ceAlarmFilterProfileEntry", types.YChild{"CeAlarmFilterProfileEntry", nil})
    for i := range ceAlarmFilterProfileTable.CeAlarmFilterProfileEntry {
        ceAlarmFilterProfileTable.EntityData.Children.Append(types.GetSegmentPath(ceAlarmFilterProfileTable.CeAlarmFilterProfileEntry[i]), types.YChild{"CeAlarmFilterProfileEntry", ceAlarmFilterProfileTable.CeAlarmFilterProfileEntry[i]})
    }
    ceAlarmFilterProfileTable.EntityData.Leafs = types.NewOrderedMap()

    ceAlarmFilterProfileTable.EntityData.YListKeys = []string {}

    return &(ceAlarmFilterProfileTable.EntityData)
}

// CISCOENTITYALARMMIB_CeAlarmFilterProfileTable_CeAlarmFilterProfileEntry
// When a physical entity asserts/clears an alarm AND the
// ceAlarmFilterProfile object is not '0', the agent applies
// the specified alarm filter profile in processing the alarm.
// The agent uses the following procedure in processing the
// transition of an alarm condition of a given type:
// 
// 1)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterAlarmsEnabled object specifies that the alarm
//     type is disabled, then the agent performs no further
//     processing.
// 
// 2)  The agent creates an entry in the ceAlarmHistTable.
// 
// 3)  If the alarm list specified by the alarm filter profile's 
//     ceAlarmFilterNotifiesEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     notification.
// 
// 4)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterSyslogEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     syslog message.
type CISCOENTITYALARMMIB_CeAlarmFilterProfileTable_CeAlarmFilterProfileEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. This object uniquely identifies the alarm filter
    // profile. The type is interface{} with range: 0..4294967295.
    CeAlarmFilterIndex interface{}

    // This object facilitates the creation, modification, or  deletion of a
    // conceptual row in this table.  A management client can create a conceptual
    // row in this table by setting this object to 'createAndWait' or 
    // 'createAndGo'.  If a request to create a conceptual row in this table
    // fails, then the system is not capable of supporting any more alarm filters.
    // Before modifying a conceptual row in this table, the  management client
    // must set this object to 'notInService'. After modifying a conceptual row in
    // this table, the  management client must set this object to 'active'. This
    // operation causes the modifications made to an alarm filter profile to take
    // effect.  An implementation should not allow a conceptual row in this table
    // to be deleted if one or more physical entities reference it. The type is
    // RowStatus.
    CeAlarmFilterStatus interface{}

    // This object specifies an arbitrary name associated with the alarm filter
    // profile by the management client, and provides a non-volatile 'handle' for
    // the alarm filter profile.  On the first instantiation of an alarm filter
    // profile, the value of this object is a zero-length string.  However, an
    // agent may choose to set the value to a locally unique default value.  If an
    // implementation supports write access to this object, then the agent is
    // responsible for ensuring the retention of any value written to this object
    // until a management client deletes it.  The level of retention must span
    // reboots and  reinitializations of the network management system, including
    // those that result in different assignments to the value of the
    // entPhysicalIndex associated with the physical entity. The type is string.
    CeAlarmFilterAlias interface{}

    // This object specifies a list of alarms that are enabled. The type is string
    // with length: 0..32.
    CeAlarmFilterAlarmsEnabled interface{}

    // This object specifies a list of alarms for which notification generation is
    // enabled. The type is string with length: 0..32.
    CeAlarmFilterNotifiesEnabled interface{}

    // This object specifies a list of alarms for which syslog message generation
    // is enabled. The type is string with length: 0..32.
    CeAlarmFilterSyslogEnabled interface{}
}

func (ceAlarmFilterProfileEntry *CISCOENTITYALARMMIB_CeAlarmFilterProfileTable_CeAlarmFilterProfileEntry) GetEntityData() *types.CommonEntityData {
    ceAlarmFilterProfileEntry.EntityData.YFilter = ceAlarmFilterProfileEntry.YFilter
    ceAlarmFilterProfileEntry.EntityData.YangName = "ceAlarmFilterProfileEntry"
    ceAlarmFilterProfileEntry.EntityData.BundleName = "cisco_ios_xe"
    ceAlarmFilterProfileEntry.EntityData.ParentYangName = "ceAlarmFilterProfileTable"
    ceAlarmFilterProfileEntry.EntityData.SegmentPath = "ceAlarmFilterProfileEntry" + types.AddKeyToken(ceAlarmFilterProfileEntry.CeAlarmFilterIndex, "ceAlarmFilterIndex")
    ceAlarmFilterProfileEntry.EntityData.AbsolutePath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB/ceAlarmFilterProfileTable/" + ceAlarmFilterProfileEntry.EntityData.SegmentPath
    ceAlarmFilterProfileEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceAlarmFilterProfileEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceAlarmFilterProfileEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceAlarmFilterProfileEntry.EntityData.Children = types.NewOrderedMap()
    ceAlarmFilterProfileEntry.EntityData.Leafs = types.NewOrderedMap()
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterIndex", types.YLeaf{"CeAlarmFilterIndex", ceAlarmFilterProfileEntry.CeAlarmFilterIndex})
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterStatus", types.YLeaf{"CeAlarmFilterStatus", ceAlarmFilterProfileEntry.CeAlarmFilterStatus})
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterAlias", types.YLeaf{"CeAlarmFilterAlias", ceAlarmFilterProfileEntry.CeAlarmFilterAlias})
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterAlarmsEnabled", types.YLeaf{"CeAlarmFilterAlarmsEnabled", ceAlarmFilterProfileEntry.CeAlarmFilterAlarmsEnabled})
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterNotifiesEnabled", types.YLeaf{"CeAlarmFilterNotifiesEnabled", ceAlarmFilterProfileEntry.CeAlarmFilterNotifiesEnabled})
    ceAlarmFilterProfileEntry.EntityData.Leafs.Append("ceAlarmFilterSyslogEnabled", types.YLeaf{"CeAlarmFilterSyslogEnabled", ceAlarmFilterProfileEntry.CeAlarmFilterSyslogEnabled})

    ceAlarmFilterProfileEntry.EntityData.YListKeys = []string {"CeAlarmFilterIndex"}

    return &(ceAlarmFilterProfileEntry.EntityData)
}

