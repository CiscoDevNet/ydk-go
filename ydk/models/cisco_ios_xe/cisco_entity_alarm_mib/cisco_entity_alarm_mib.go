// This MIB module defines the managed objects that support the
// monitoring of alarms generated by physical entities contained
// by the system, including chassis, slots, modules, ports, power
// supplies, and fans.  In order to monitor alarms generated by a
// physical entity, it must be represented by a row in the
// entPhysicalTable (see ENTITY-MIB).
package cisco_entity_alarm_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_entity_alarm_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-ENTITY-ALARM-MIB CISCO-ENTITY-ALARM-MIB}", reflect.TypeOf(CISCOENTITYALARMMIB{}))
    ydk.RegisterEntity("CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB", reflect.TypeOf(CISCOENTITYALARMMIB{}))
}

// AlarmSeverity represents             operation.
type AlarmSeverity string

const (
    AlarmSeverity_critical AlarmSeverity = "critical"

    AlarmSeverity_major AlarmSeverity = "major"

    AlarmSeverity_minor AlarmSeverity = "minor"

    AlarmSeverity_info AlarmSeverity = "info"
)

// CISCOENTITYALARMMIB
type CISCOENTITYALARMMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Cealarmmonitoring CISCOENTITYALARMMIB_Cealarmmonitoring

    
    Cealarmhistory CISCOENTITYALARMMIB_Cealarmhistory

    
    Cealarmfiltering CISCOENTITYALARMMIB_Cealarmfiltering

    // For each type of entity (represented entPhysicalVendorType OID), this table
    // contains a mapping between a unique  ceAlarmDescrIndex and
    // entPhysicalvendorType OID.
    Cealarmdescrmaptable CISCOENTITYALARMMIB_Cealarmdescrmaptable

    // This table contains a description for each alarm type defined by each
    // vendor type employed by the system. Observe that this table is sparse in
    // nature, as it is rarely the case that a physical entity type needs to 
    // define every alarm in its alarm space.
    Cealarmdescrtable CISCOENTITYALARMMIB_Cealarmdescrtable

    // This table specifies alarm control and status information related to each
    // physical entity contained by the system, including the alarms currently
    // being asserted by each physical entity capable of generating alarms.
    Cealarmtable CISCOENTITYALARMMIB_Cealarmtable

    // This table contains a history of ceAlarmIndicate and ceAlarmClear traps
    // generated by the agent.
    Cealarmhisttable CISCOENTITYALARMMIB_Cealarmhisttable

    // This table contains a list of alarm filter profiles.
    Cealarmfilterprofiletable CISCOENTITYALARMMIB_Cealarmfilterprofiletable
}

func (cISCOENTITYALARMMIB *CISCOENTITYALARMMIB) GetEntityData() *types.CommonEntityData {
    cISCOENTITYALARMMIB.EntityData.YFilter = cISCOENTITYALARMMIB.YFilter
    cISCOENTITYALARMMIB.EntityData.YangName = "CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOENTITYALARMMIB.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.SegmentPath = "CISCO-ENTITY-ALARM-MIB:CISCO-ENTITY-ALARM-MIB"
    cISCOENTITYALARMMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOENTITYALARMMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOENTITYALARMMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOENTITYALARMMIB.EntityData.Children = make(map[string]types.YChild)
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmMonitoring"] = types.YChild{"Cealarmmonitoring", &cISCOENTITYALARMMIB.Cealarmmonitoring}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmHistory"] = types.YChild{"Cealarmhistory", &cISCOENTITYALARMMIB.Cealarmhistory}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmFiltering"] = types.YChild{"Cealarmfiltering", &cISCOENTITYALARMMIB.Cealarmfiltering}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmDescrMapTable"] = types.YChild{"Cealarmdescrmaptable", &cISCOENTITYALARMMIB.Cealarmdescrmaptable}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmDescrTable"] = types.YChild{"Cealarmdescrtable", &cISCOENTITYALARMMIB.Cealarmdescrtable}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmTable"] = types.YChild{"Cealarmtable", &cISCOENTITYALARMMIB.Cealarmtable}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmHistTable"] = types.YChild{"Cealarmhisttable", &cISCOENTITYALARMMIB.Cealarmhisttable}
    cISCOENTITYALARMMIB.EntityData.Children["ceAlarmFilterProfileTable"] = types.YChild{"Cealarmfilterprofiletable", &cISCOENTITYALARMMIB.Cealarmfilterprofiletable}
    cISCOENTITYALARMMIB.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cISCOENTITYALARMMIB.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmmonitoring
type CISCOENTITYALARMMIB_Cealarmmonitoring struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'critical'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmcriticalcount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'major'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmmajorcount interface{}

    // The value of this object specifies the number of alarms currently asserted
    // with a severity of 'minor'. The type is interface{} with range:
    // 0..4294967295.
    Cealarmminorcount interface{}

    // If the management client writes a value of 'true' to this object, the agent
    // stops signalling all external audible alarms under the control of the
    // agent.  Reading this object should always result in a value of 'false'. 
    // Observe that alarm cutoff does not have an effect on monitoring, history
    // logging, generation of notifications, or syslog message generation.  It
    // also does not prevent the agent from signalling external audible alarms for
    // alarms asserted after alarm-cutoff.  This object emulates the 'alarm
    // cut-off' mechanism typically installed in a central office (e.g., a big red
    // button).  Observe this object should neither affect external visual alarms
    // under the control of the agent, nor should it affect the current state of
    // alarms being asserted by the system. The type is bool.
    Cealarmcutoff interface{}
}

func (cealarmmonitoring *CISCOENTITYALARMMIB_Cealarmmonitoring) GetEntityData() *types.CommonEntityData {
    cealarmmonitoring.EntityData.YFilter = cealarmmonitoring.YFilter
    cealarmmonitoring.EntityData.YangName = "ceAlarmMonitoring"
    cealarmmonitoring.EntityData.BundleName = "cisco_ios_xe"
    cealarmmonitoring.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmmonitoring.EntityData.SegmentPath = "ceAlarmMonitoring"
    cealarmmonitoring.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmmonitoring.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmmonitoring.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmmonitoring.EntityData.Children = make(map[string]types.YChild)
    cealarmmonitoring.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmmonitoring.EntityData.Leafs["ceAlarmCriticalCount"] = types.YLeaf{"Cealarmcriticalcount", cealarmmonitoring.Cealarmcriticalcount}
    cealarmmonitoring.EntityData.Leafs["ceAlarmMajorCount"] = types.YLeaf{"Cealarmmajorcount", cealarmmonitoring.Cealarmmajorcount}
    cealarmmonitoring.EntityData.Leafs["ceAlarmMinorCount"] = types.YLeaf{"Cealarmminorcount", cealarmmonitoring.Cealarmminorcount}
    cealarmmonitoring.EntityData.Leafs["ceAlarmCutOff"] = types.YLeaf{"Cealarmcutoff", cealarmmonitoring.Cealarmcutoff}
    return &(cealarmmonitoring.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmhistory
type CISCOENTITYALARMMIB_Cealarmhistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object specifies the number of entries that the  ceAlarmHistTable can
    // contain.  When a physical entity generates an unfiltered alarm, and the
    // capacity of the ceAlarmHistTable has reached the value specified by this
    // object, then the agent deletes the oldest entity in order to accommodate
    // the new entry. A value of '0' prevents any history from being retained.  .
    // The type is interface{} with range: 0..500.
    Cealarmhisttablesize interface{}

    // This object specifies the value of the ceAlarmHistIndex object
    // corresponding to the last entry added to the table by the agent.  If the
    // management client uses the notifications defined by this module, then it
    // can poll this object to determine whether it has missed a notification sent
    // by the agent. The type is interface{} with range: 0..4294967295.
    Cealarmhistlastindex interface{}
}

func (cealarmhistory *CISCOENTITYALARMMIB_Cealarmhistory) GetEntityData() *types.CommonEntityData {
    cealarmhistory.EntityData.YFilter = cealarmhistory.YFilter
    cealarmhistory.EntityData.YangName = "ceAlarmHistory"
    cealarmhistory.EntityData.BundleName = "cisco_ios_xe"
    cealarmhistory.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmhistory.EntityData.SegmentPath = "ceAlarmHistory"
    cealarmhistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmhistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmhistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmhistory.EntityData.Children = make(map[string]types.YChild)
    cealarmhistory.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmhistory.EntityData.Leafs["ceAlarmHistTableSize"] = types.YLeaf{"Cealarmhisttablesize", cealarmhistory.Cealarmhisttablesize}
    cealarmhistory.EntityData.Leafs["ceAlarmHistLastIndex"] = types.YLeaf{"Cealarmhistlastindex", cealarmhistory.Cealarmhistlastindex}
    return &(cealarmhistory.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmfiltering
type CISCOENTITYALARMMIB_Cealarmfiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object specifies a severity threshold governing the generation of
    // ceAlarmAsserted and ceAlarmCleared notifications.  For example, if the
    // value of this object is set to 'major', then the agent generates these
    // notifications if and only if the severity of the alarm being indicated is
    // 'major' or 'critical'.  The value of '0' disables the  generation of
    // notifications.  Observe that this setting overrides the value of the 
    // ceAlarmFilterNotifiesEnabled object.  This object affects notification
    // generation only; that is, it does not affect monitoring, history logging,
    // and syslog message generation. The type is interface{} with range: 0..4.
    Cealarmnotifiesenable interface{}

    // This object specifies a severity threshold governing the generation of
    // syslog messages corresponding to alarms.  For example, if the value of this
    // object is set to 'major', then the agent generates these a syslog message
    // if and only if the severity of the alarm being indicated is 'major' or
    // 'critical'. The value of '0' disables the generation of syslog messages
    // corresponding to alarms.  Observe that this setting overrides the value of
    // the  ceAlarmFilterSyslogEnabled object.  This object affects syslog message
    // generation only; that is, it does not have an effect on monitoring, history
    // logging, and generation of notifications. The type is interface{} with
    // range: 0..4.
    Cealarmsyslogenable interface{}

    // This object contains an appropriate value to be used for ceAlarmFilterIndex
    // when creating entries in the ceAlarmFilterProfileTable.  The value '0'
    // indicates that no unassigned entries are available.  To obtain a
    // ceAlarmFilterIndex, the management client issues a get request.  The agent
    // has the responsibility of  modifying the value of this object following
    // each  successful get request. The type is interface{} with range:
    // 0..4294967295.
    Cealarmfilterprofileindexnext interface{}
}

func (cealarmfiltering *CISCOENTITYALARMMIB_Cealarmfiltering) GetEntityData() *types.CommonEntityData {
    cealarmfiltering.EntityData.YFilter = cealarmfiltering.YFilter
    cealarmfiltering.EntityData.YangName = "ceAlarmFiltering"
    cealarmfiltering.EntityData.BundleName = "cisco_ios_xe"
    cealarmfiltering.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmfiltering.EntityData.SegmentPath = "ceAlarmFiltering"
    cealarmfiltering.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmfiltering.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmfiltering.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmfiltering.EntityData.Children = make(map[string]types.YChild)
    cealarmfiltering.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmfiltering.EntityData.Leafs["ceAlarmNotifiesEnable"] = types.YLeaf{"Cealarmnotifiesenable", cealarmfiltering.Cealarmnotifiesenable}
    cealarmfiltering.EntityData.Leafs["ceAlarmSyslogEnable"] = types.YLeaf{"Cealarmsyslogenable", cealarmfiltering.Cealarmsyslogenable}
    cealarmfiltering.EntityData.Leafs["ceAlarmFilterProfileIndexNext"] = types.YLeaf{"Cealarmfilterprofileindexnext", cealarmfiltering.Cealarmfilterprofileindexnext}
    return &(cealarmfiltering.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmdescrmaptable
// For each type of entity (represented entPhysicalVendorType
// OID), this table contains a mapping between a unique 
// ceAlarmDescrIndex and entPhysicalvendorType OID.
type CISCOENTITYALARMMIB_Cealarmdescrmaptable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A mapping between an alarm description and a vendor type. The type is slice
    // of CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry.
    Cealarmdescrmapentry []CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry
}

func (cealarmdescrmaptable *CISCOENTITYALARMMIB_Cealarmdescrmaptable) GetEntityData() *types.CommonEntityData {
    cealarmdescrmaptable.EntityData.YFilter = cealarmdescrmaptable.YFilter
    cealarmdescrmaptable.EntityData.YangName = "ceAlarmDescrMapTable"
    cealarmdescrmaptable.EntityData.BundleName = "cisco_ios_xe"
    cealarmdescrmaptable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmdescrmaptable.EntityData.SegmentPath = "ceAlarmDescrMapTable"
    cealarmdescrmaptable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmdescrmaptable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmdescrmaptable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmdescrmaptable.EntityData.Children = make(map[string]types.YChild)
    cealarmdescrmaptable.EntityData.Children["ceAlarmDescrMapEntry"] = types.YChild{"Cealarmdescrmapentry", nil}
    for i := range cealarmdescrmaptable.Cealarmdescrmapentry {
        cealarmdescrmaptable.EntityData.Children[types.GetSegmentPath(&cealarmdescrmaptable.Cealarmdescrmapentry[i])] = types.YChild{"Cealarmdescrmapentry", &cealarmdescrmaptable.Cealarmdescrmapentry[i]}
    }
    cealarmdescrmaptable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cealarmdescrmaptable.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry
// A mapping between an alarm description and a vendor type.
type CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies an alarm
    // description. The type is interface{} with range: 0..4294967295.
    Cealarmdescrindex interface{}

    // This object specifies an object identifier (typically an
    // enterprise-specific OID) that uniquely identifies the vendor type of those
    // physical entities that this alarm description applies to. The type is
    // string with pattern:
    // b'(([0-1](\\.[1-3]?[0-9]))|(2\\.(0|([1-9]\\d*))))(\\.(0|([1-9]\\d*)))*'.
    Cealarmdescrvendortype interface{}
}

func (cealarmdescrmapentry *CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry) GetEntityData() *types.CommonEntityData {
    cealarmdescrmapentry.EntityData.YFilter = cealarmdescrmapentry.YFilter
    cealarmdescrmapentry.EntityData.YangName = "ceAlarmDescrMapEntry"
    cealarmdescrmapentry.EntityData.BundleName = "cisco_ios_xe"
    cealarmdescrmapentry.EntityData.ParentYangName = "ceAlarmDescrMapTable"
    cealarmdescrmapentry.EntityData.SegmentPath = "ceAlarmDescrMapEntry" + "[ceAlarmDescrIndex='" + fmt.Sprintf("%v", cealarmdescrmapentry.Cealarmdescrindex) + "']"
    cealarmdescrmapentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmdescrmapentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmdescrmapentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmdescrmapentry.EntityData.Children = make(map[string]types.YChild)
    cealarmdescrmapentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmdescrmapentry.EntityData.Leafs["ceAlarmDescrIndex"] = types.YLeaf{"Cealarmdescrindex", cealarmdescrmapentry.Cealarmdescrindex}
    cealarmdescrmapentry.EntityData.Leafs["ceAlarmDescrVendorType"] = types.YLeaf{"Cealarmdescrvendortype", cealarmdescrmapentry.Cealarmdescrvendortype}
    return &(cealarmdescrmapentry.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmdescrtable
// This table contains a description for each alarm type
// defined by each vendor type employed by the system.
// Observe that this table is sparse in nature, as it is
// rarely the case that a physical entity type needs to 
// define every alarm in its alarm space.
type CISCOENTITYALARMMIB_Cealarmdescrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A collection of attributes that describe an alarm type. The type is slice
    // of CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry.
    Cealarmdescrentry []CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry
}

func (cealarmdescrtable *CISCOENTITYALARMMIB_Cealarmdescrtable) GetEntityData() *types.CommonEntityData {
    cealarmdescrtable.EntityData.YFilter = cealarmdescrtable.YFilter
    cealarmdescrtable.EntityData.YangName = "ceAlarmDescrTable"
    cealarmdescrtable.EntityData.BundleName = "cisco_ios_xe"
    cealarmdescrtable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmdescrtable.EntityData.SegmentPath = "ceAlarmDescrTable"
    cealarmdescrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmdescrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmdescrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmdescrtable.EntityData.Children = make(map[string]types.YChild)
    cealarmdescrtable.EntityData.Children["ceAlarmDescrEntry"] = types.YChild{"Cealarmdescrentry", nil}
    for i := range cealarmdescrtable.Cealarmdescrentry {
        cealarmdescrtable.EntityData.Children[types.GetSegmentPath(&cealarmdescrtable.Cealarmdescrentry[i])] = types.YChild{"Cealarmdescrentry", &cealarmdescrtable.Cealarmdescrentry[i]}
    }
    cealarmdescrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cealarmdescrtable.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry
// A collection of attributes that describe an alarm type.
type CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 0..4294967295.
    // Refers to
    // cisco_entity_alarm_mib.CISCOENTITYALARMMIB_Cealarmdescrmaptable_Cealarmdescrmapentry_Cealarmdescrindex
    Cealarmdescrindex interface{}

    // This attribute is a key. This object specifies the alarm type being
    // described. The type is interface{} with range: 0..255.
    Cealarmdescralarmtype interface{}

    // This object specifies the severity associated with the alarm type.  An
    // implementation may chose to not allow dynamic severity assignment, in which
    // case it would restrict access to this object to be read-only.  If an
    // implementation allows dynamic severity assignment, then a management client
    // can revert to the default severity by writing the value '0' to this object.
    // There exists a class of systems that should implement dynamic severity
    // assignment.  For example, consider a DSLAM (Digital Subscriber Loop Access
    // Multiplexor) designed for both the central office and pedestal
    // environments.  A 'pedestal' is typically a dark-green metal box mounted on
    // a concrete or stone foundation in which carrier-class companies house
    // equipment. The central office typically controls the temperature and
    // humidity of the environment, reducing reliance on a system's fans.  Thus,
    // the customer probably has a desire to reduce the  severity of alarms
    // indicating the failure of a fan.  However, a pedestal environment has a
    // much greater reliance on a system's fans.  Thus, the customer probably has
    // a desire to increase the severity of alarms indicating the failure of a
    // fan. The type is interface{} with range: 0..4.
    Cealarmdescrseverity interface{}

    // This object specifies a human-readable message describing the alarm. The
    // type is string.
    Cealarmdescrtext interface{}
}

func (cealarmdescrentry *CISCOENTITYALARMMIB_Cealarmdescrtable_Cealarmdescrentry) GetEntityData() *types.CommonEntityData {
    cealarmdescrentry.EntityData.YFilter = cealarmdescrentry.YFilter
    cealarmdescrentry.EntityData.YangName = "ceAlarmDescrEntry"
    cealarmdescrentry.EntityData.BundleName = "cisco_ios_xe"
    cealarmdescrentry.EntityData.ParentYangName = "ceAlarmDescrTable"
    cealarmdescrentry.EntityData.SegmentPath = "ceAlarmDescrEntry" + "[ceAlarmDescrIndex='" + fmt.Sprintf("%v", cealarmdescrentry.Cealarmdescrindex) + "']" + "[ceAlarmDescrAlarmType='" + fmt.Sprintf("%v", cealarmdescrentry.Cealarmdescralarmtype) + "']"
    cealarmdescrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmdescrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmdescrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmdescrentry.EntityData.Children = make(map[string]types.YChild)
    cealarmdescrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmdescrentry.EntityData.Leafs["ceAlarmDescrIndex"] = types.YLeaf{"Cealarmdescrindex", cealarmdescrentry.Cealarmdescrindex}
    cealarmdescrentry.EntityData.Leafs["ceAlarmDescrAlarmType"] = types.YLeaf{"Cealarmdescralarmtype", cealarmdescrentry.Cealarmdescralarmtype}
    cealarmdescrentry.EntityData.Leafs["ceAlarmDescrSeverity"] = types.YLeaf{"Cealarmdescrseverity", cealarmdescrentry.Cealarmdescrseverity}
    cealarmdescrentry.EntityData.Leafs["ceAlarmDescrText"] = types.YLeaf{"Cealarmdescrtext", cealarmdescrentry.Cealarmdescrtext}
    return &(cealarmdescrentry.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmtable
// This table specifies alarm control and status information
// related to each physical entity contained by the system,
// including the alarms currently being asserted by each physical
// entity capable of generating alarms.
type CISCOENTITYALARMMIB_Cealarmtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Alarm control and status information related to the  corresponding physical
    // entity, including a list of those alarms currently being asserted by that
    // physical entity. The type is slice of
    // CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry.
    Cealarmentry []CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry
}

func (cealarmtable *CISCOENTITYALARMMIB_Cealarmtable) GetEntityData() *types.CommonEntityData {
    cealarmtable.EntityData.YFilter = cealarmtable.YFilter
    cealarmtable.EntityData.YangName = "ceAlarmTable"
    cealarmtable.EntityData.BundleName = "cisco_ios_xe"
    cealarmtable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmtable.EntityData.SegmentPath = "ceAlarmTable"
    cealarmtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmtable.EntityData.Children = make(map[string]types.YChild)
    cealarmtable.EntityData.Children["ceAlarmEntry"] = types.YChild{"Cealarmentry", nil}
    for i := range cealarmtable.Cealarmentry {
        cealarmtable.EntityData.Children[types.GetSegmentPath(&cealarmtable.Cealarmentry[i])] = types.YChild{"Cealarmentry", &cealarmtable.Cealarmentry[i]}
    }
    cealarmtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cealarmtable.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry
// Alarm control and status information related to the 
// corresponding physical entity, including a list of those
// alarms currently being asserted by that physical entity.
type CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // entity_mib.ENTITYMIB_Entphysicaltable_Entphysicalentry_Entphysicalindex
    Entphysicalindex interface{}

    // This object specifies the alarm filter profile associated with the
    // corresponding physical entity.  An alarm filter profile controls which
    // alarm types the agent will monitor and signal for the corresponding
    // physical entity.  If the value of this object is '0', then the agent
    // monitors and signals all alarms associated with the corresponding physical
    // entity. The type is interface{} with range: 0..4294967295.
    Cealarmfilterprofile interface{}

    // This object specifies the highest severity alarm currently being asserted
    // by the corresponding physical entity.  A value of '0' indicates that there
    // the corresponding physical entity currently is not asserting any alarms.
    // The type is interface{} with range: 0..4.
    Cealarmseverity interface{}

    // This object specifies those alarms currently being asserted by the
    // corresponding physical entity.  Note, an alarm indicates a condition, not
    // an event.  An alarm has two states:      'asserted'  Indicates that the
    // condition described by the                 alarm exists.      'cleared'  
    // Indicates that the condition described by the                 alarm does
    // not exist.  For example, a slot in a chassis may define an alarm that
    // specifies whether the slot contains a module.  At the time of module
    // insertion, the physical entity corresponding to the slot asserts this
    // alarm, and the alarm remains asserted until the  slot becomes empty.  If an
    // alarm is being asserted by the physical entity, then the corresponding bit
    // in the alarm list is set to a one. Observe that if the physical entity is
    // not currently asserting any alarms, then the list will have a length of
    // zero. The type is string with length: 0..32.
    Cealarmlist interface{}
}

func (cealarmentry *CISCOENTITYALARMMIB_Cealarmtable_Cealarmentry) GetEntityData() *types.CommonEntityData {
    cealarmentry.EntityData.YFilter = cealarmentry.YFilter
    cealarmentry.EntityData.YangName = "ceAlarmEntry"
    cealarmentry.EntityData.BundleName = "cisco_ios_xe"
    cealarmentry.EntityData.ParentYangName = "ceAlarmTable"
    cealarmentry.EntityData.SegmentPath = "ceAlarmEntry" + "[entPhysicalIndex='" + fmt.Sprintf("%v", cealarmentry.Entphysicalindex) + "']"
    cealarmentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmentry.EntityData.Children = make(map[string]types.YChild)
    cealarmentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmentry.EntityData.Leafs["entPhysicalIndex"] = types.YLeaf{"Entphysicalindex", cealarmentry.Entphysicalindex}
    cealarmentry.EntityData.Leafs["ceAlarmFilterProfile"] = types.YLeaf{"Cealarmfilterprofile", cealarmentry.Cealarmfilterprofile}
    cealarmentry.EntityData.Leafs["ceAlarmSeverity"] = types.YLeaf{"Cealarmseverity", cealarmentry.Cealarmseverity}
    cealarmentry.EntityData.Leafs["ceAlarmList"] = types.YLeaf{"Cealarmlist", cealarmentry.Cealarmlist}
    return &(cealarmentry.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmhisttable
// This table contains a history of ceAlarmIndicate and
// ceAlarmClear traps generated by the agent.
type CISCOENTITYALARMMIB_Cealarmhisttable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The information conveyed by a ceAlarmIndicate or ceAlarmClear trap. The
    // type is slice of CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry.
    Cealarmhistentry []CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry
}

func (cealarmhisttable *CISCOENTITYALARMMIB_Cealarmhisttable) GetEntityData() *types.CommonEntityData {
    cealarmhisttable.EntityData.YFilter = cealarmhisttable.YFilter
    cealarmhisttable.EntityData.YangName = "ceAlarmHistTable"
    cealarmhisttable.EntityData.BundleName = "cisco_ios_xe"
    cealarmhisttable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmhisttable.EntityData.SegmentPath = "ceAlarmHistTable"
    cealarmhisttable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmhisttable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmhisttable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmhisttable.EntityData.Children = make(map[string]types.YChild)
    cealarmhisttable.EntityData.Children["ceAlarmHistEntry"] = types.YChild{"Cealarmhistentry", nil}
    for i := range cealarmhisttable.Cealarmhistentry {
        cealarmhisttable.EntityData.Children[types.GetSegmentPath(&cealarmhisttable.Cealarmhistentry[i])] = types.YChild{"Cealarmhistentry", &cealarmhisttable.Cealarmhistentry[i]}
    }
    cealarmhisttable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cealarmhisttable.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry
// The information conveyed by a ceAlarmIndicate or
// ceAlarmClear trap.
type CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. An integer value uniquely identifying the entry in
    // the table. The value of this object starts at '1' and monotonically
    // increases for each alarm condition transition monitored by the agent.  If
    // the value of this object is '4294967295', the agent will reset it to '1'
    // upon monitoring the next alarm condition transition. The type is
    // interface{} with range: 0..4294967295.
    Cealarmhistindex interface{}

    // This object specifies whether the agent created the entry as the result of
    // an alarm being asserted or cleared. The type is Cealarmhisttype.
    Cealarmhisttype interface{}

    // This object specifies the physical entity that generated the alarm. The
    // type is interface{} with range: 1..2147483647.
    Cealarmhistentphysicalindex interface{}

    // This object specifies the type of alarm generated. The type is interface{}
    // with range: 0..255.
    Cealarmhistalarmtype interface{}

    // This object specifies the severity of the alarm generated. The type is
    // AlarmSeverity.
    Cealarmhistseverity interface{}

    // This object specifies the value of the sysUpTime object at the time the
    // alarm was generated. The type is interface{} with range: 0..4294967295.
    Cealarmhisttimestamp interface{}
}

func (cealarmhistentry *CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry) GetEntityData() *types.CommonEntityData {
    cealarmhistentry.EntityData.YFilter = cealarmhistentry.YFilter
    cealarmhistentry.EntityData.YangName = "ceAlarmHistEntry"
    cealarmhistentry.EntityData.BundleName = "cisco_ios_xe"
    cealarmhistentry.EntityData.ParentYangName = "ceAlarmHistTable"
    cealarmhistentry.EntityData.SegmentPath = "ceAlarmHistEntry" + "[ceAlarmHistIndex='" + fmt.Sprintf("%v", cealarmhistentry.Cealarmhistindex) + "']"
    cealarmhistentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmhistentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmhistentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmhistentry.EntityData.Children = make(map[string]types.YChild)
    cealarmhistentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmhistentry.EntityData.Leafs["ceAlarmHistIndex"] = types.YLeaf{"Cealarmhistindex", cealarmhistentry.Cealarmhistindex}
    cealarmhistentry.EntityData.Leafs["ceAlarmHistType"] = types.YLeaf{"Cealarmhisttype", cealarmhistentry.Cealarmhisttype}
    cealarmhistentry.EntityData.Leafs["ceAlarmHistEntPhysicalIndex"] = types.YLeaf{"Cealarmhistentphysicalindex", cealarmhistentry.Cealarmhistentphysicalindex}
    cealarmhistentry.EntityData.Leafs["ceAlarmHistAlarmType"] = types.YLeaf{"Cealarmhistalarmtype", cealarmhistentry.Cealarmhistalarmtype}
    cealarmhistentry.EntityData.Leafs["ceAlarmHistSeverity"] = types.YLeaf{"Cealarmhistseverity", cealarmhistentry.Cealarmhistseverity}
    cealarmhistentry.EntityData.Leafs["ceAlarmHistTimeStamp"] = types.YLeaf{"Cealarmhisttimestamp", cealarmhistentry.Cealarmhisttimestamp}
    return &(cealarmhistentry.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype represents the result of an alarm being asserted or cleared.
type CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype string

const (
    CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype_asserted CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype = "asserted"

    CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype_cleared CISCOENTITYALARMMIB_Cealarmhisttable_Cealarmhistentry_Cealarmhisttype = "cleared"
)

// CISCOENTITYALARMMIB_Cealarmfilterprofiletable
// This table contains a list of alarm filter profiles.
type CISCOENTITYALARMMIB_Cealarmfilterprofiletable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // When a physical entity asserts/clears an alarm AND the ceAlarmFilterProfile
    // object is not '0', the agent applies the specified alarm filter profile in
    // processing the alarm. The agent uses the following procedure in processing
    // the transition of an alarm condition of a given type:  1)  If the alarm
    // list specified by the alarm filter profile's     ceAlarmFilterAlarmsEnabled
    // object specifies that the alarm     type is disabled, then the agent
    // performs no further     processing.  2)  The agent creates an entry in the
    // ceAlarmHistTable.  3)  If the alarm list specified by the alarm filter
    // profile's      ceAlarmFilterNotifiesEnabled object specifies that the alarm
    // type is enabled, then the agent generates the appropriate     notification.
    // 4)  If the alarm list specified by the alarm filter profile's    
    // ceAlarmFilterSyslogEnabled object specifies that the alarm     type is
    // enabled, then the agent generates the appropriate     syslog message. The
    // type is slice of
    // CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry.
    Cealarmfilterprofileentry []CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry
}

func (cealarmfilterprofiletable *CISCOENTITYALARMMIB_Cealarmfilterprofiletable) GetEntityData() *types.CommonEntityData {
    cealarmfilterprofiletable.EntityData.YFilter = cealarmfilterprofiletable.YFilter
    cealarmfilterprofiletable.EntityData.YangName = "ceAlarmFilterProfileTable"
    cealarmfilterprofiletable.EntityData.BundleName = "cisco_ios_xe"
    cealarmfilterprofiletable.EntityData.ParentYangName = "CISCO-ENTITY-ALARM-MIB"
    cealarmfilterprofiletable.EntityData.SegmentPath = "ceAlarmFilterProfileTable"
    cealarmfilterprofiletable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmfilterprofiletable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmfilterprofiletable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmfilterprofiletable.EntityData.Children = make(map[string]types.YChild)
    cealarmfilterprofiletable.EntityData.Children["ceAlarmFilterProfileEntry"] = types.YChild{"Cealarmfilterprofileentry", nil}
    for i := range cealarmfilterprofiletable.Cealarmfilterprofileentry {
        cealarmfilterprofiletable.EntityData.Children[types.GetSegmentPath(&cealarmfilterprofiletable.Cealarmfilterprofileentry[i])] = types.YChild{"Cealarmfilterprofileentry", &cealarmfilterprofiletable.Cealarmfilterprofileentry[i]}
    }
    cealarmfilterprofiletable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cealarmfilterprofiletable.EntityData)
}

// CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry
// When a physical entity asserts/clears an alarm AND the
// ceAlarmFilterProfile object is not '0', the agent applies
// the specified alarm filter profile in processing the alarm.
// The agent uses the following procedure in processing the
// transition of an alarm condition of a given type:
// 
// 1)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterAlarmsEnabled object specifies that the alarm
//     type is disabled, then the agent performs no further
//     processing.
// 
// 2)  The agent creates an entry in the ceAlarmHistTable.
// 
// 3)  If the alarm list specified by the alarm filter profile's 
//     ceAlarmFilterNotifiesEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     notification.
// 
// 4)  If the alarm list specified by the alarm filter profile's
//     ceAlarmFilterSyslogEnabled object specifies that the alarm
//     type is enabled, then the agent generates the appropriate
//     syslog message.
type CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies the alarm filter
    // profile. The type is interface{} with range: 0..4294967295.
    Cealarmfilterindex interface{}

    // This object facilitates the creation, modification, or  deletion of a
    // conceptual row in this table.  A management client can create a conceptual
    // row in this table by setting this object to 'createAndWait' or 
    // 'createAndGo'.  If a request to create a conceptual row in this table
    // fails, then the system is not capable of supporting any more alarm filters.
    // Before modifying a conceptual row in this table, the  management client
    // must set this object to 'notInService'. After modifying a conceptual row in
    // this table, the  management client must set this object to 'active'. This
    // operation causes the modifications made to an alarm filter profile to take
    // effect.  An implementation should not allow a conceptual row in this table
    // to be deleted if one or more physical entities reference it. The type is
    // RowStatus.
    Cealarmfilterstatus interface{}

    // This object specifies an arbitrary name associated with the alarm filter
    // profile by the management client, and provides a non-volatile 'handle' for
    // the alarm filter profile.  On the first instantiation of an alarm filter
    // profile, the value of this object is a zero-length string.  However, an
    // agent may choose to set the value to a locally unique default value.  If an
    // implementation supports write access to this object, then the agent is
    // responsible for ensuring the retention of any value written to this object
    // until a management client deletes it.  The level of retention must span
    // reboots and  reinitializations of the network management system, including
    // those that result in different assignments to the value of the
    // entPhysicalIndex associated with the physical entity. The type is string.
    Cealarmfilteralias interface{}

    // This object specifies a list of alarms that are enabled. The type is string
    // with length: 0..32.
    Cealarmfilteralarmsenabled interface{}

    // This object specifies a list of alarms for which notification generation is
    // enabled. The type is string with length: 0..32.
    Cealarmfilternotifiesenabled interface{}

    // This object specifies a list of alarms for which syslog message generation
    // is enabled. The type is string with length: 0..32.
    Cealarmfiltersyslogenabled interface{}
}

func (cealarmfilterprofileentry *CISCOENTITYALARMMIB_Cealarmfilterprofiletable_Cealarmfilterprofileentry) GetEntityData() *types.CommonEntityData {
    cealarmfilterprofileentry.EntityData.YFilter = cealarmfilterprofileentry.YFilter
    cealarmfilterprofileentry.EntityData.YangName = "ceAlarmFilterProfileEntry"
    cealarmfilterprofileentry.EntityData.BundleName = "cisco_ios_xe"
    cealarmfilterprofileentry.EntityData.ParentYangName = "ceAlarmFilterProfileTable"
    cealarmfilterprofileentry.EntityData.SegmentPath = "ceAlarmFilterProfileEntry" + "[ceAlarmFilterIndex='" + fmt.Sprintf("%v", cealarmfilterprofileentry.Cealarmfilterindex) + "']"
    cealarmfilterprofileentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cealarmfilterprofileentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cealarmfilterprofileentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cealarmfilterprofileentry.EntityData.Children = make(map[string]types.YChild)
    cealarmfilterprofileentry.EntityData.Leafs = make(map[string]types.YLeaf)
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterIndex"] = types.YLeaf{"Cealarmfilterindex", cealarmfilterprofileentry.Cealarmfilterindex}
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterStatus"] = types.YLeaf{"Cealarmfilterstatus", cealarmfilterprofileentry.Cealarmfilterstatus}
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterAlias"] = types.YLeaf{"Cealarmfilteralias", cealarmfilterprofileentry.Cealarmfilteralias}
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterAlarmsEnabled"] = types.YLeaf{"Cealarmfilteralarmsenabled", cealarmfilterprofileentry.Cealarmfilteralarmsenabled}
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterNotifiesEnabled"] = types.YLeaf{"Cealarmfilternotifiesenabled", cealarmfilterprofileentry.Cealarmfilternotifiesenabled}
    cealarmfilterprofileentry.EntityData.Leafs["ceAlarmFilterSyslogEnabled"] = types.YLeaf{"Cealarmfiltersyslogenabled", cealarmfilterprofileentry.Cealarmfiltersyslogenabled}
    return &(cealarmfilterprofileentry.EntityData)
}

