// The MIB module to describe and store events generated
// by the Cisco Embedded Event Manager.  
// 
// The Cisco Embedded Event Manager detects hardware and software 
// faults, and other events (such as OIRs) for the system.
// It also enables users to configure fault recovery services
// for system wide components.  The Embedded Event Manager also 
// provides process reliability statistics.
// 
// The Embedded Event Manager is a policy driven process through 
// which faults in the system are reported through a defined API.
// The Embedded Event Manager policy engine receives notifications
// when faults and other events occur.  Embedded Event Manager 
// policies implement recovery based on the current state of the 
// system and the actions specified in the policy for a given 
// event.  Recovery actions are triggered when the policy is 
// run.  Developers write and customize Embedded Event Manager 
// policies to handle faults and events.
package cisco_embedded_event_mgr_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_embedded_event_mgr_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-EMBEDDED-EVENT-MGR-MIB CISCO-EMBEDDED-EVENT-MGR-MIB}", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
    ydk.RegisterEntity("CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
}

// NotifySource represents          Event Manager policy.
type NotifySource string

const (
    NotifySource_server NotifySource = "server"

    NotifySource_policy NotifySource = "policy"
)

// CISCOEMBEDDEDEVENTMGRMIB
type CISCOEMBEDDEDEVENTMGRMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ceemhistory CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory

    // A table containing information about ceemEventIndex value mapping.  Each
    // conceptual row specifies a  unique mapping between a ceemEventIndex value,
    // and a  Embedded Event Manager event type.  Rows are added  dynamically as
    // the Embedded Event Manager server learns of new event types.  This occurs
    // when Embedded Event  Manager Event Detectors register with the Embedded 
    // Event Manager server.
    Ceemeventmaptable CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable

    // A table of Embedded Event Manager events generated by this router. 
    // Conceptual row entries are dynamically added into  this table when Embedded
    // Event Manager events occur.  Entries are stored in FIFO order.  When the
    // maximum number  of entries has been reached in the table, the oldest entry 
    // in the table is removed immediately.    When a table is reduced to a
    // smaller size N, the oldest entries are immediately removed from the table
    // leaving  a maximum of N entries.
    Ceemhistoryeventtable CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable

    // A table of Embedded Event Manager policies registered on a system. The
    // number of entries depends on the configuration of the system.  The  maximum
    // number is implementation dependent.
    Ceemregisteredpolicytable CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetEntityData() *types.CommonEntityData {
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.YFilter = cISCOEMBEDDEDEVENTMGRMIB.YFilter
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.YangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.SegmentPath = "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children = make(map[string]types.YChild)
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children["ceemHistory"] = types.YChild{"Ceemhistory", &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistory}
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children["ceemEventMapTable"] = types.YChild{"Ceemeventmaptable", &cISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable}
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children["ceemHistoryEventTable"] = types.YChild{"Ceemhistoryeventtable", &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable}
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children["ceemRegisteredPolicyTable"] = types.YChild{"Ceemregisteredpolicytable", &cISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable}
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cISCOEMBEDDEDEVENTMGRMIB.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum number of entries that can be held in ceemHistoryEventTable.
    // The type is interface{} with range: 0..50.
    Ceemhistorymaxevententries interface{}

    // Index of last entry created in ceemHistoryEventTable. The type is
    // interface{} with range: 1..4294967295.
    Ceemhistorylastevententry interface{}
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetEntityData() *types.CommonEntityData {
    ceemhistory.EntityData.YFilter = ceemhistory.YFilter
    ceemhistory.EntityData.YangName = "ceemHistory"
    ceemhistory.EntityData.BundleName = "cisco_ios_xe"
    ceemhistory.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemhistory.EntityData.SegmentPath = "ceemHistory"
    ceemhistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemhistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemhistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemhistory.EntityData.Children = make(map[string]types.YChild)
    ceemhistory.EntityData.Leafs = make(map[string]types.YLeaf)
    ceemhistory.EntityData.Leafs["ceemHistoryMaxEventEntries"] = types.YLeaf{"Ceemhistorymaxevententries", ceemhistory.Ceemhistorymaxevententries}
    ceemhistory.EntityData.Leafs["ceemHistoryLastEventEntry"] = types.YLeaf{"Ceemhistorylastevententry", ceemhistory.Ceemhistorylastevententry}
    return &(ceemhistory.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable
// A table containing information about ceemEventIndex
// value mapping.  Each conceptual row specifies a 
// unique mapping between a ceemEventIndex value, and a 
// Embedded Event Manager event type.  Rows are added 
// dynamically as the Embedded Event Manager server learns
// of new event types.  This occurs when Embedded Event 
// Manager Event Detectors register with the Embedded 
// Event Manager server.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A mapping between an event type and an event description. The type is slice
    // of CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry.
    Ceemeventmapentry []CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetEntityData() *types.CommonEntityData {
    ceemeventmaptable.EntityData.YFilter = ceemeventmaptable.YFilter
    ceemeventmaptable.EntityData.YangName = "ceemEventMapTable"
    ceemeventmaptable.EntityData.BundleName = "cisco_ios_xe"
    ceemeventmaptable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemeventmaptable.EntityData.SegmentPath = "ceemEventMapTable"
    ceemeventmaptable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemeventmaptable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemeventmaptable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemeventmaptable.EntityData.Children = make(map[string]types.YChild)
    ceemeventmaptable.EntityData.Children["ceemEventMapEntry"] = types.YChild{"Ceemeventmapentry", nil}
    for i := range ceemeventmaptable.Ceemeventmapentry {
        ceemeventmaptable.EntityData.Children[types.GetSegmentPath(&ceemeventmaptable.Ceemeventmapentry[i])] = types.YChild{"Ceemeventmapentry", &ceemeventmaptable.Ceemeventmapentry[i]}
    }
    ceemeventmaptable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ceemeventmaptable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry
// A mapping between an event type and an event description.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies an event.  Events
    // are not persisted across reloads. The type is interface{} with range:
    // 0..4294967295.
    Ceemeventindex interface{}

    // The name of the Embedded Event Manager event. The type is string with
    // length: 1..128.
    Ceemeventname interface{}

    // This object specifies a human-readable message describing information about
    // the  Embedded Event Manager event. The type is string.
    Ceemeventdescrtext interface{}
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetEntityData() *types.CommonEntityData {
    ceemeventmapentry.EntityData.YFilter = ceemeventmapentry.YFilter
    ceemeventmapentry.EntityData.YangName = "ceemEventMapEntry"
    ceemeventmapentry.EntityData.BundleName = "cisco_ios_xe"
    ceemeventmapentry.EntityData.ParentYangName = "ceemEventMapTable"
    ceemeventmapentry.EntityData.SegmentPath = "ceemEventMapEntry" + "[ceemEventIndex='" + fmt.Sprintf("%v", ceemeventmapentry.Ceemeventindex) + "']"
    ceemeventmapentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemeventmapentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemeventmapentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemeventmapentry.EntityData.Children = make(map[string]types.YChild)
    ceemeventmapentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ceemeventmapentry.EntityData.Leafs["ceemEventIndex"] = types.YLeaf{"Ceemeventindex", ceemeventmapentry.Ceemeventindex}
    ceemeventmapentry.EntityData.Leafs["ceemEventName"] = types.YLeaf{"Ceemeventname", ceemeventmapentry.Ceemeventname}
    ceemeventmapentry.EntityData.Leafs["ceemEventDescrText"] = types.YLeaf{"Ceemeventdescrtext", ceemeventmapentry.Ceemeventdescrtext}
    return &(ceemeventmapentry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable
// A table of Embedded Event Manager events generated by this
// router.  Conceptual row entries are dynamically added into 
// this table when Embedded Event Manager events occur.
// 
// Entries are stored in FIFO order.  When the maximum number 
// of entries has been reached in the table, the oldest entry 
// in the table is removed immediately.  
// 
// When a table is reduced to a smaller size N, the oldest
// entries are immediately removed from the table leaving 
// a maximum of N entries.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about an Embedded Event Manager event which has been generated
    // by this router.  It provides up to four event types to support complex
    // event specifications that are triggered when multiple events are published
    // within a certain period of time. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry.
    Ceemhistoryevententry []CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetEntityData() *types.CommonEntityData {
    ceemhistoryeventtable.EntityData.YFilter = ceemhistoryeventtable.YFilter
    ceemhistoryeventtable.EntityData.YangName = "ceemHistoryEventTable"
    ceemhistoryeventtable.EntityData.BundleName = "cisco_ios_xe"
    ceemhistoryeventtable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemhistoryeventtable.EntityData.SegmentPath = "ceemHistoryEventTable"
    ceemhistoryeventtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemhistoryeventtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemhistoryeventtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemhistoryeventtable.EntityData.Children = make(map[string]types.YChild)
    ceemhistoryeventtable.EntityData.Children["ceemHistoryEventEntry"] = types.YChild{"Ceemhistoryevententry", nil}
    for i := range ceemhistoryeventtable.Ceemhistoryevententry {
        ceemhistoryeventtable.EntityData.Children[types.GetSegmentPath(&ceemhistoryeventtable.Ceemhistoryevententry[i])] = types.YChild{"Ceemhistoryevententry", &ceemhistoryeventtable.Ceemhistoryevententry[i]}
    }
    ceemhistoryeventtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ceemhistoryeventtable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry
// Information about an Embedded Event Manager event which has
// been generated by this router.  It provides up to four event
// types to support complex event specifications that are
// triggered when multiple events are published within a certain
// period of time.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a generated event.  When it reaches the  maximum
    // value, the agent wraps the value back to 1  and may flush all existing
    // entries in the event table. The type is interface{} with range:
    // 1..4294967295.
    Ceemhistoryeventindex interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype1 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype2 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype3 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the ceemEventTable. The type is interface{} with
    // range: 0..4294967295.
    Ceemhistoryeventtype4 interface{}

    // The file path on the router where the Embedded Event Manager policy that
    // was triggered is stored.  If the size of the  file path string is larger
    // than 128, the end characters  will be truncated. The type is string with
    // length: 0..128.
    Ceemhistorypolicypath interface{}

    // The name of the Embedded Event Manager policy that was triggered because of
    // an Embedded Event Manager event. The name must be a valid Embedded Event
    // Manager policy name.  It must be in the form of a valid Posix filename. The
    // type is string with length: 0..128.
    Ceemhistorypolicyname interface{}

    // The exit status of the Embedded Event Manager policy execution.  This value
    // corresponds to the Posix process  exit status. The type is interface{} with
    // range: -2147483648..2147483647.
    Ceemhistorypolicyexitstatus interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    Ceemhistorypolicyintdata1 interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    Ceemhistorypolicyintdata2 interface{}

    // Arbitrary string data the Embedded Event Manager policy can use.  Use of
    // this object is optional.  If unused by a policy, this object will not be
    // instantiated for  that policy. The type is string with length: 0..255.
    Ceemhistorypolicystrdata interface{}

    // The notification type that was sent from the Embedded Event Manager.  The
    // valid values are server or policy. The type is NotifySource.
    Ceemhistorynotifytype interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype5 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype6 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype7 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype8 interface{}
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetEntityData() *types.CommonEntityData {
    ceemhistoryevententry.EntityData.YFilter = ceemhistoryevententry.YFilter
    ceemhistoryevententry.EntityData.YangName = "ceemHistoryEventEntry"
    ceemhistoryevententry.EntityData.BundleName = "cisco_ios_xe"
    ceemhistoryevententry.EntityData.ParentYangName = "ceemHistoryEventTable"
    ceemhistoryevententry.EntityData.SegmentPath = "ceemHistoryEventEntry" + "[ceemHistoryEventIndex='" + fmt.Sprintf("%v", ceemhistoryevententry.Ceemhistoryeventindex) + "']"
    ceemhistoryevententry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemhistoryevententry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemhistoryevententry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemhistoryevententry.EntityData.Children = make(map[string]types.YChild)
    ceemhistoryevententry.EntityData.Leafs = make(map[string]types.YLeaf)
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventIndex"] = types.YLeaf{"Ceemhistoryeventindex", ceemhistoryevententry.Ceemhistoryeventindex}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType1"] = types.YLeaf{"Ceemhistoryeventtype1", ceemhistoryevententry.Ceemhistoryeventtype1}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType2"] = types.YLeaf{"Ceemhistoryeventtype2", ceemhistoryevententry.Ceemhistoryeventtype2}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType3"] = types.YLeaf{"Ceemhistoryeventtype3", ceemhistoryevententry.Ceemhistoryeventtype3}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType4"] = types.YLeaf{"Ceemhistoryeventtype4", ceemhistoryevententry.Ceemhistoryeventtype4}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyPath"] = types.YLeaf{"Ceemhistorypolicypath", ceemhistoryevententry.Ceemhistorypolicypath}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyName"] = types.YLeaf{"Ceemhistorypolicyname", ceemhistoryevententry.Ceemhistorypolicyname}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyExitStatus"] = types.YLeaf{"Ceemhistorypolicyexitstatus", ceemhistoryevententry.Ceemhistorypolicyexitstatus}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyIntData1"] = types.YLeaf{"Ceemhistorypolicyintdata1", ceemhistoryevententry.Ceemhistorypolicyintdata1}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyIntData2"] = types.YLeaf{"Ceemhistorypolicyintdata2", ceemhistoryevententry.Ceemhistorypolicyintdata2}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryPolicyStrData"] = types.YLeaf{"Ceemhistorypolicystrdata", ceemhistoryevententry.Ceemhistorypolicystrdata}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryNotifyType"] = types.YLeaf{"Ceemhistorynotifytype", ceemhistoryevententry.Ceemhistorynotifytype}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType5"] = types.YLeaf{"Ceemhistoryeventtype5", ceemhistoryevententry.Ceemhistoryeventtype5}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType6"] = types.YLeaf{"Ceemhistoryeventtype6", ceemhistoryevententry.Ceemhistoryeventtype6}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType7"] = types.YLeaf{"Ceemhistoryeventtype7", ceemhistoryevententry.Ceemhistoryeventtype7}
    ceemhistoryevententry.EntityData.Leafs["ceemHistoryEventType8"] = types.YLeaf{"Ceemhistoryeventtype8", ceemhistoryevententry.Ceemhistoryeventtype8}
    return &(ceemhistoryevententry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable
// A table of Embedded Event Manager policies registered on a system.
// The number of entries depends on the configuration of the system.  The 
// maximum number is implementation dependent.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An entry in the table of Embedded Event Manager policies that are
    // registered.  It provides up to four event types to support complex  event
    // specifications that are triggered when multiple events are  published
    // within a certain period of time.  A row in this table  cannot be created or
    // deleted by SNMP operations on columns of the  table. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry.
    Ceemregisteredpolicyentry []CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetEntityData() *types.CommonEntityData {
    ceemregisteredpolicytable.EntityData.YFilter = ceemregisteredpolicytable.YFilter
    ceemregisteredpolicytable.EntityData.YangName = "ceemRegisteredPolicyTable"
    ceemregisteredpolicytable.EntityData.BundleName = "cisco_ios_xe"
    ceemregisteredpolicytable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemregisteredpolicytable.EntityData.SegmentPath = "ceemRegisteredPolicyTable"
    ceemregisteredpolicytable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemregisteredpolicytable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemregisteredpolicytable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemregisteredpolicytable.EntityData.Children = make(map[string]types.YChild)
    ceemregisteredpolicytable.EntityData.Children["ceemRegisteredPolicyEntry"] = types.YChild{"Ceemregisteredpolicyentry", nil}
    for i := range ceemregisteredpolicytable.Ceemregisteredpolicyentry {
        ceemregisteredpolicytable.EntityData.Children[types.GetSegmentPath(&ceemregisteredpolicytable.Ceemregisteredpolicyentry[i])] = types.YChild{"Ceemregisteredpolicyentry", &ceemregisteredpolicytable.Ceemregisteredpolicyentry[i]}
    }
    ceemregisteredpolicytable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ceemregisteredpolicytable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry
// An entry in the table of Embedded Event Manager policies that are
// registered.  It provides up to four event types to support complex 
// event specifications that are triggered when multiple events are 
// published within a certain period of time.  A row in this table 
// cannot be created or deleted by SNMP operations on columns of the 
// table.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a policy registration.  When it reaches the maximum
    // value, the agent wraps the value back to 1 upon  receiving the next policy
    // registration. The type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyindex interface{}

    // The name of the Embedded Event Manager policy that was registered.  The
    // name must be a valid Embedded Event  Manager policy name. It must be in the
    // form of a valid  Posix filename. The type is string with length: 0..128.
    Ceemregisteredpolicyname interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype1 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype2 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype3 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype4 interface{}

    // This status indicates whether the policy is enabled or disabled. The type
    // is Ceemregisteredpolicystatus.
    Ceemregisteredpolicystatus interface{}

    // This variable indicates whether this is a user or system policy. The type
    // is Ceemregisteredpolicytype.
    Ceemregisteredpolicytype interface{}

    // This flag indicates if an SNMP notification will be sent when policy is
    // triggered. The type is bool.
    Ceemregisteredpolicynotifflag interface{}

    // The time the policy was registered.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyregtime interface{}

    // The time the policy was last enabled.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyenabledtime interface{}

    // The last time the policy was run.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyruntime interface{}

    // The number of times the policy has been run. The type is interface{} with
    // range: 0..4294967295.
    Ceemregisteredpolicyruncount interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype5 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype6 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype7 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype8 interface{}
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetEntityData() *types.CommonEntityData {
    ceemregisteredpolicyentry.EntityData.YFilter = ceemregisteredpolicyentry.YFilter
    ceemregisteredpolicyentry.EntityData.YangName = "ceemRegisteredPolicyEntry"
    ceemregisteredpolicyentry.EntityData.BundleName = "cisco_ios_xe"
    ceemregisteredpolicyentry.EntityData.ParentYangName = "ceemRegisteredPolicyTable"
    ceemregisteredpolicyentry.EntityData.SegmentPath = "ceemRegisteredPolicyEntry" + "[ceemRegisteredPolicyIndex='" + fmt.Sprintf("%v", ceemregisteredpolicyentry.Ceemregisteredpolicyindex) + "']"
    ceemregisteredpolicyentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemregisteredpolicyentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemregisteredpolicyentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemregisteredpolicyentry.EntityData.Children = make(map[string]types.YChild)
    ceemregisteredpolicyentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyIndex"] = types.YLeaf{"Ceemregisteredpolicyindex", ceemregisteredpolicyentry.Ceemregisteredpolicyindex}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyName"] = types.YLeaf{"Ceemregisteredpolicyname", ceemregisteredpolicyentry.Ceemregisteredpolicyname}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType1"] = types.YLeaf{"Ceemregisteredpolicyeventtype1", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype1}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType2"] = types.YLeaf{"Ceemregisteredpolicyeventtype2", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype2}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType3"] = types.YLeaf{"Ceemregisteredpolicyeventtype3", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype3}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType4"] = types.YLeaf{"Ceemregisteredpolicyeventtype4", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype4}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyStatus"] = types.YLeaf{"Ceemregisteredpolicystatus", ceemregisteredpolicyentry.Ceemregisteredpolicystatus}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyType"] = types.YLeaf{"Ceemregisteredpolicytype", ceemregisteredpolicyentry.Ceemregisteredpolicytype}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyNotifFlag"] = types.YLeaf{"Ceemregisteredpolicynotifflag", ceemregisteredpolicyentry.Ceemregisteredpolicynotifflag}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyRegTime"] = types.YLeaf{"Ceemregisteredpolicyregtime", ceemregisteredpolicyentry.Ceemregisteredpolicyregtime}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEnabledTime"] = types.YLeaf{"Ceemregisteredpolicyenabledtime", ceemregisteredpolicyentry.Ceemregisteredpolicyenabledtime}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyRunTime"] = types.YLeaf{"Ceemregisteredpolicyruntime", ceemregisteredpolicyentry.Ceemregisteredpolicyruntime}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyRunCount"] = types.YLeaf{"Ceemregisteredpolicyruncount", ceemregisteredpolicyentry.Ceemregisteredpolicyruncount}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType5"] = types.YLeaf{"Ceemregisteredpolicyeventtype5", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype5}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType6"] = types.YLeaf{"Ceemregisteredpolicyeventtype6", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype6}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType7"] = types.YLeaf{"Ceemregisteredpolicyeventtype7", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype7}
    ceemregisteredpolicyentry.EntityData.Leafs["ceemRegisteredPolicyEventType8"] = types.YLeaf{"Ceemregisteredpolicyeventtype8", ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype8}
    return &(ceemregisteredpolicyentry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus represents This status indicates whether the policy is enabled or disabled.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus string

const (
    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus_enabled CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus = "enabled"

    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus_disabled CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus = "disabled"
)

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype represents This variable indicates whether this is a user or system policy.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype string

const (
    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype_user CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype = "user"

    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype_system CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype = "system"
)

