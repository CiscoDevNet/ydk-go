// The MIB module to describe and store events generated
// by the Cisco Embedded Event Manager.  
// 
// The Cisco Embedded Event Manager detects hardware and software 
// faults, and other events (such as OIRs) for the system.
// It also enables users to configure fault recovery services
// for system wide components.  The Embedded Event Manager also 
// provides process reliability statistics.
// 
// The Embedded Event Manager is a policy driven process through 
// which faults in the system are reported through a defined API.
// The Embedded Event Manager policy engine receives notifications
// when faults and other events occur.  Embedded Event Manager 
// policies implement recovery based on the current state of the 
// system and the actions specified in the policy for a given 
// event.  Recovery actions are triggered when the policy is 
// run.  Developers write and customize Embedded Event Manager 
// policies to handle faults and events.
package cisco_embedded_event_mgr_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_embedded_event_mgr_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-EMBEDDED-EVENT-MGR-MIB CISCO-EMBEDDED-EVENT-MGR-MIB}", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
    ydk.RegisterEntity("CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
}

// NotifySource represents          Event Manager policy.
type NotifySource string

const (
    NotifySource_server NotifySource = "server"

    NotifySource_policy NotifySource = "policy"
)

// CISCOEMBEDDEDEVENTMGRMIB
type CISCOEMBEDDEDEVENTMGRMIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Ceemhistory CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory

    // A table containing information about ceemEventIndex value mapping.  Each
    // conceptual row specifies a  unique mapping between a ceemEventIndex value,
    // and a  Embedded Event Manager event type.  Rows are added  dynamically as
    // the Embedded Event Manager server learns of new event types.  This occurs
    // when Embedded Event  Manager Event Detectors register with the Embedded 
    // Event Manager server.
    Ceemeventmaptable CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable

    // A table of Embedded Event Manager events generated by this router. 
    // Conceptual row entries are dynamically added into  this table when Embedded
    // Event Manager events occur.  Entries are stored in FIFO order.  When the
    // maximum number  of entries has been reached in the table, the oldest entry 
    // in the table is removed immediately.    When a table is reduced to a
    // smaller size N, the oldest entries are immediately removed from the table
    // leaving  a maximum of N entries.
    Ceemhistoryeventtable CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable

    // A table of Embedded Event Manager policies registered on a system. The
    // number of entries depends on the configuration of the system.  The  maximum
    // number is implementation dependent.
    Ceemregisteredpolicytable CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetFilter() yfilter.YFilter { return cISCOEMBEDDEDEVENTMGRMIB.YFilter }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) SetFilter(yf yfilter.YFilter) { cISCOEMBEDDEDEVENTMGRMIB.YFilter = yf }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetGoName(yname string) string {
    if yname == "ceemHistory" { return "Ceemhistory" }
    if yname == "ceemEventMapTable" { return "Ceemeventmaptable" }
    if yname == "ceemHistoryEventTable" { return "Ceemhistoryeventtable" }
    if yname == "ceemRegisteredPolicyTable" { return "Ceemregisteredpolicytable" }
    return ""
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetSegmentPath() string {
    return "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB"
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceemHistory" {
        return &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistory
    }
    if childYangName == "ceemEventMapTable" {
        return &cISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable
    }
    if childYangName == "ceemHistoryEventTable" {
        return &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable
    }
    if childYangName == "ceemRegisteredPolicyTable" {
        return &cISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable
    }
    return nil
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ceemHistory"] = &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistory
    children["ceemEventMapTable"] = &cISCOEMBEDDEDEVENTMGRMIB.Ceemeventmaptable
    children["ceemHistoryEventTable"] = &cISCOEMBEDDEDEVENTMGRMIB.Ceemhistoryeventtable
    children["ceemRegisteredPolicyTable"] = &cISCOEMBEDDEDEVENTMGRMIB.Ceemregisteredpolicytable
    return children
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) SetParent(parent types.Entity) { cISCOEMBEDDEDEVENTMGRMIB.parent = parent }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetParent() types.Entity { return cISCOEMBEDDEDEVENTMGRMIB.parent }

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetParentYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The maximum number of entries that can be held in ceemHistoryEventTable.
    // The type is interface{} with range: 0..50.
    Ceemhistorymaxevententries interface{}

    // Index of last entry created in ceemHistoryEventTable. The type is
    // interface{} with range: 1..4294967295.
    Ceemhistorylastevententry interface{}
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetFilter() yfilter.YFilter { return ceemhistory.YFilter }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) SetFilter(yf yfilter.YFilter) { ceemhistory.YFilter = yf }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetGoName(yname string) string {
    if yname == "ceemHistoryMaxEventEntries" { return "Ceemhistorymaxevententries" }
    if yname == "ceemHistoryLastEventEntry" { return "Ceemhistorylastevententry" }
    return ""
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetSegmentPath() string {
    return "ceemHistory"
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceemHistoryMaxEventEntries"] = ceemhistory.Ceemhistorymaxevententries
    leafs["ceemHistoryLastEventEntry"] = ceemhistory.Ceemhistorylastevententry
    return leafs
}

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetBundleName() string { return "cisco_ios_xe" }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetYangName() string { return "ceemHistory" }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) SetParent(parent types.Entity) { ceemhistory.parent = parent }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetParent() types.Entity { return ceemhistory.parent }

func (ceemhistory *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistory) GetParentYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable
// A table containing information about ceemEventIndex
// value mapping.  Each conceptual row specifies a 
// unique mapping between a ceemEventIndex value, and a 
// Embedded Event Manager event type.  Rows are added 
// dynamically as the Embedded Event Manager server learns
// of new event types.  This occurs when Embedded Event 
// Manager Event Detectors register with the Embedded 
// Event Manager server.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A mapping between an event type and an event description. The type is slice
    // of CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry.
    Ceemeventmapentry []CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetFilter() yfilter.YFilter { return ceemeventmaptable.YFilter }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) SetFilter(yf yfilter.YFilter) { ceemeventmaptable.YFilter = yf }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetGoName(yname string) string {
    if yname == "ceemEventMapEntry" { return "Ceemeventmapentry" }
    return ""
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetSegmentPath() string {
    return "ceemEventMapTable"
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceemEventMapEntry" {
        for _, c := range ceemeventmaptable.Ceemeventmapentry {
            if ceemeventmaptable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry{}
        ceemeventmaptable.Ceemeventmapentry = append(ceemeventmaptable.Ceemeventmapentry, child)
        return &ceemeventmaptable.Ceemeventmapentry[len(ceemeventmaptable.Ceemeventmapentry)-1]
    }
    return nil
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ceemeventmaptable.Ceemeventmapentry {
        children[ceemeventmaptable.Ceemeventmapentry[i].GetSegmentPath()] = &ceemeventmaptable.Ceemeventmapentry[i]
    }
    return children
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetBundleName() string { return "cisco_ios_xe" }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetYangName() string { return "ceemEventMapTable" }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) SetParent(parent types.Entity) { ceemeventmaptable.parent = parent }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetParent() types.Entity { return ceemeventmaptable.parent }

func (ceemeventmaptable *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable) GetParentYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry
// A mapping between an event type and an event description.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies an event.  Events
    // are not persisted across reloads. The type is interface{} with range:
    // 0..4294967295.
    Ceemeventindex interface{}

    // The name of the Embedded Event Manager event. The type is string with
    // length: 1..128.
    Ceemeventname interface{}

    // This object specifies a human-readable message describing information about
    // the  Embedded Event Manager event. The type is string.
    Ceemeventdescrtext interface{}
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetFilter() yfilter.YFilter { return ceemeventmapentry.YFilter }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) SetFilter(yf yfilter.YFilter) { ceemeventmapentry.YFilter = yf }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetGoName(yname string) string {
    if yname == "ceemEventIndex" { return "Ceemeventindex" }
    if yname == "ceemEventName" { return "Ceemeventname" }
    if yname == "ceemEventDescrText" { return "Ceemeventdescrtext" }
    return ""
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetSegmentPath() string {
    return "ceemEventMapEntry" + "[ceemEventIndex='" + fmt.Sprintf("%v", ceemeventmapentry.Ceemeventindex) + "']"
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceemEventIndex"] = ceemeventmapentry.Ceemeventindex
    leafs["ceemEventName"] = ceemeventmapentry.Ceemeventname
    leafs["ceemEventDescrText"] = ceemeventmapentry.Ceemeventdescrtext
    return leafs
}

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetBundleName() string { return "cisco_ios_xe" }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetYangName() string { return "ceemEventMapEntry" }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) SetParent(parent types.Entity) { ceemeventmapentry.parent = parent }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetParent() types.Entity { return ceemeventmapentry.parent }

func (ceemeventmapentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemeventmaptable_Ceemeventmapentry) GetParentYangName() string { return "ceemEventMapTable" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable
// A table of Embedded Event Manager events generated by this
// router.  Conceptual row entries are dynamically added into 
// this table when Embedded Event Manager events occur.
// 
// Entries are stored in FIFO order.  When the maximum number 
// of entries has been reached in the table, the oldest entry 
// in the table is removed immediately.  
// 
// When a table is reduced to a smaller size N, the oldest
// entries are immediately removed from the table leaving 
// a maximum of N entries.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Information about an Embedded Event Manager event which has been generated
    // by this router.  It provides up to four event types to support complex
    // event specifications that are triggered when multiple events are published
    // within a certain period of time. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry.
    Ceemhistoryevententry []CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetFilter() yfilter.YFilter { return ceemhistoryeventtable.YFilter }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) SetFilter(yf yfilter.YFilter) { ceemhistoryeventtable.YFilter = yf }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetGoName(yname string) string {
    if yname == "ceemHistoryEventEntry" { return "Ceemhistoryevententry" }
    return ""
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetSegmentPath() string {
    return "ceemHistoryEventTable"
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceemHistoryEventEntry" {
        for _, c := range ceemhistoryeventtable.Ceemhistoryevententry {
            if ceemhistoryeventtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry{}
        ceemhistoryeventtable.Ceemhistoryevententry = append(ceemhistoryeventtable.Ceemhistoryevententry, child)
        return &ceemhistoryeventtable.Ceemhistoryevententry[len(ceemhistoryeventtable.Ceemhistoryevententry)-1]
    }
    return nil
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ceemhistoryeventtable.Ceemhistoryevententry {
        children[ceemhistoryeventtable.Ceemhistoryevententry[i].GetSegmentPath()] = &ceemhistoryeventtable.Ceemhistoryevententry[i]
    }
    return children
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetBundleName() string { return "cisco_ios_xe" }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetYangName() string { return "ceemHistoryEventTable" }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) SetParent(parent types.Entity) { ceemhistoryeventtable.parent = parent }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetParent() types.Entity { return ceemhistoryeventtable.parent }

func (ceemhistoryeventtable *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable) GetParentYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry
// Information about an Embedded Event Manager event which has
// been generated by this router.  It provides up to four event
// types to support complex event specifications that are
// triggered when multiple events are published within a certain
// period of time.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a generated event.  When it reaches the  maximum
    // value, the agent wraps the value back to 1  and may flush all existing
    // entries in the event table. The type is interface{} with range:
    // 1..4294967295.
    Ceemhistoryeventindex interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype1 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype2 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype3 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the ceemEventTable. The type is interface{} with
    // range: 0..4294967295.
    Ceemhistoryeventtype4 interface{}

    // The file path on the router where the Embedded Event Manager policy that
    // was triggered is stored.  If the size of the  file path string is larger
    // than 128, the end characters  will be truncated. The type is string with
    // length: 0..128.
    Ceemhistorypolicypath interface{}

    // The name of the Embedded Event Manager policy that was triggered because of
    // an Embedded Event Manager event. The name must be a valid Embedded Event
    // Manager policy name.  It must be in the form of a valid Posix filename. The
    // type is string with length: 0..128.
    Ceemhistorypolicyname interface{}

    // The exit status of the Embedded Event Manager policy execution.  This value
    // corresponds to the Posix process  exit status. The type is interface{} with
    // range: -2147483648..2147483647.
    Ceemhistorypolicyexitstatus interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    Ceemhistorypolicyintdata1 interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    Ceemhistorypolicyintdata2 interface{}

    // Arbitrary string data the Embedded Event Manager policy can use.  Use of
    // this object is optional.  If unused by a policy, this object will not be
    // instantiated for  that policy. The type is string with length: 0..255.
    Ceemhistorypolicystrdata interface{}

    // The notification type that was sent from the Embedded Event Manager.  The
    // valid values are server or policy. The type is NotifySource.
    Ceemhistorynotifytype interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype5 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype6 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype7 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    Ceemhistoryeventtype8 interface{}
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetFilter() yfilter.YFilter { return ceemhistoryevententry.YFilter }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) SetFilter(yf yfilter.YFilter) { ceemhistoryevententry.YFilter = yf }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetGoName(yname string) string {
    if yname == "ceemHistoryEventIndex" { return "Ceemhistoryeventindex" }
    if yname == "ceemHistoryEventType1" { return "Ceemhistoryeventtype1" }
    if yname == "ceemHistoryEventType2" { return "Ceemhistoryeventtype2" }
    if yname == "ceemHistoryEventType3" { return "Ceemhistoryeventtype3" }
    if yname == "ceemHistoryEventType4" { return "Ceemhistoryeventtype4" }
    if yname == "ceemHistoryPolicyPath" { return "Ceemhistorypolicypath" }
    if yname == "ceemHistoryPolicyName" { return "Ceemhistorypolicyname" }
    if yname == "ceemHistoryPolicyExitStatus" { return "Ceemhistorypolicyexitstatus" }
    if yname == "ceemHistoryPolicyIntData1" { return "Ceemhistorypolicyintdata1" }
    if yname == "ceemHistoryPolicyIntData2" { return "Ceemhistorypolicyintdata2" }
    if yname == "ceemHistoryPolicyStrData" { return "Ceemhistorypolicystrdata" }
    if yname == "ceemHistoryNotifyType" { return "Ceemhistorynotifytype" }
    if yname == "ceemHistoryEventType5" { return "Ceemhistoryeventtype5" }
    if yname == "ceemHistoryEventType6" { return "Ceemhistoryeventtype6" }
    if yname == "ceemHistoryEventType7" { return "Ceemhistoryeventtype7" }
    if yname == "ceemHistoryEventType8" { return "Ceemhistoryeventtype8" }
    return ""
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetSegmentPath() string {
    return "ceemHistoryEventEntry" + "[ceemHistoryEventIndex='" + fmt.Sprintf("%v", ceemhistoryevententry.Ceemhistoryeventindex) + "']"
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceemHistoryEventIndex"] = ceemhistoryevententry.Ceemhistoryeventindex
    leafs["ceemHistoryEventType1"] = ceemhistoryevententry.Ceemhistoryeventtype1
    leafs["ceemHistoryEventType2"] = ceemhistoryevententry.Ceemhistoryeventtype2
    leafs["ceemHistoryEventType3"] = ceemhistoryevententry.Ceemhistoryeventtype3
    leafs["ceemHistoryEventType4"] = ceemhistoryevententry.Ceemhistoryeventtype4
    leafs["ceemHistoryPolicyPath"] = ceemhistoryevententry.Ceemhistorypolicypath
    leafs["ceemHistoryPolicyName"] = ceemhistoryevententry.Ceemhistorypolicyname
    leafs["ceemHistoryPolicyExitStatus"] = ceemhistoryevententry.Ceemhistorypolicyexitstatus
    leafs["ceemHistoryPolicyIntData1"] = ceemhistoryevententry.Ceemhistorypolicyintdata1
    leafs["ceemHistoryPolicyIntData2"] = ceemhistoryevententry.Ceemhistorypolicyintdata2
    leafs["ceemHistoryPolicyStrData"] = ceemhistoryevententry.Ceemhistorypolicystrdata
    leafs["ceemHistoryNotifyType"] = ceemhistoryevententry.Ceemhistorynotifytype
    leafs["ceemHistoryEventType5"] = ceemhistoryevententry.Ceemhistoryeventtype5
    leafs["ceemHistoryEventType6"] = ceemhistoryevententry.Ceemhistoryeventtype6
    leafs["ceemHistoryEventType7"] = ceemhistoryevententry.Ceemhistoryeventtype7
    leafs["ceemHistoryEventType8"] = ceemhistoryevententry.Ceemhistoryeventtype8
    return leafs
}

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetBundleName() string { return "cisco_ios_xe" }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetYangName() string { return "ceemHistoryEventEntry" }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) SetParent(parent types.Entity) { ceemhistoryevententry.parent = parent }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetParent() types.Entity { return ceemhistoryevententry.parent }

func (ceemhistoryevententry *CISCOEMBEDDEDEVENTMGRMIB_Ceemhistoryeventtable_Ceemhistoryevententry) GetParentYangName() string { return "ceemHistoryEventTable" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable
// A table of Embedded Event Manager policies registered on a system.
// The number of entries depends on the configuration of the system.  The 
// maximum number is implementation dependent.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An entry in the table of Embedded Event Manager policies that are
    // registered.  It provides up to four event types to support complex  event
    // specifications that are triggered when multiple events are  published
    // within a certain period of time.  A row in this table  cannot be created or
    // deleted by SNMP operations on columns of the  table. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry.
    Ceemregisteredpolicyentry []CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetFilter() yfilter.YFilter { return ceemregisteredpolicytable.YFilter }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) SetFilter(yf yfilter.YFilter) { ceemregisteredpolicytable.YFilter = yf }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetGoName(yname string) string {
    if yname == "ceemRegisteredPolicyEntry" { return "Ceemregisteredpolicyentry" }
    return ""
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetSegmentPath() string {
    return "ceemRegisteredPolicyTable"
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ceemRegisteredPolicyEntry" {
        for _, c := range ceemregisteredpolicytable.Ceemregisteredpolicyentry {
            if ceemregisteredpolicytable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry{}
        ceemregisteredpolicytable.Ceemregisteredpolicyentry = append(ceemregisteredpolicytable.Ceemregisteredpolicyentry, child)
        return &ceemregisteredpolicytable.Ceemregisteredpolicyentry[len(ceemregisteredpolicytable.Ceemregisteredpolicyentry)-1]
    }
    return nil
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ceemregisteredpolicytable.Ceemregisteredpolicyentry {
        children[ceemregisteredpolicytable.Ceemregisteredpolicyentry[i].GetSegmentPath()] = &ceemregisteredpolicytable.Ceemregisteredpolicyentry[i]
    }
    return children
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetBundleName() string { return "cisco_ios_xe" }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetYangName() string { return "ceemRegisteredPolicyTable" }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) SetParent(parent types.Entity) { ceemregisteredpolicytable.parent = parent }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetParent() types.Entity { return ceemregisteredpolicytable.parent }

func (ceemregisteredpolicytable *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable) GetParentYangName() string { return "CISCO-EMBEDDED-EVENT-MGR-MIB" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry
// An entry in the table of Embedded Event Manager policies that are
// registered.  It provides up to four event types to support complex 
// event specifications that are triggered when multiple events are 
// published within a certain period of time.  A row in this table 
// cannot be created or deleted by SNMP operations on columns of the 
// table.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a policy registration.  When it reaches the maximum
    // value, the agent wraps the value back to 1 upon  receiving the next policy
    // registration. The type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyindex interface{}

    // The name of the Embedded Event Manager policy that was registered.  The
    // name must be a valid Embedded Event  Manager policy name. It must be in the
    // form of a valid  Posix filename. The type is string with length: 0..128.
    Ceemregisteredpolicyname interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype1 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype2 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype3 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype4 interface{}

    // This status indicates whether the policy is enabled or disabled. The type
    // is Ceemregisteredpolicystatus.
    Ceemregisteredpolicystatus interface{}

    // This variable indicates whether this is a user or system policy. The type
    // is Ceemregisteredpolicytype.
    Ceemregisteredpolicytype interface{}

    // This flag indicates if an SNMP notification will be sent when policy is
    // triggered. The type is bool.
    Ceemregisteredpolicynotifflag interface{}

    // The time the policy was registered.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyregtime interface{}

    // The time the policy was last enabled.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyenabledtime interface{}

    // The last time the policy was run.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    Ceemregisteredpolicyruntime interface{}

    // The number of times the policy has been run. The type is interface{} with
    // range: 0..4294967295.
    Ceemregisteredpolicyruncount interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype5 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype6 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype7 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    Ceemregisteredpolicyeventtype8 interface{}
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetFilter() yfilter.YFilter { return ceemregisteredpolicyentry.YFilter }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) SetFilter(yf yfilter.YFilter) { ceemregisteredpolicyentry.YFilter = yf }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetGoName(yname string) string {
    if yname == "ceemRegisteredPolicyIndex" { return "Ceemregisteredpolicyindex" }
    if yname == "ceemRegisteredPolicyName" { return "Ceemregisteredpolicyname" }
    if yname == "ceemRegisteredPolicyEventType1" { return "Ceemregisteredpolicyeventtype1" }
    if yname == "ceemRegisteredPolicyEventType2" { return "Ceemregisteredpolicyeventtype2" }
    if yname == "ceemRegisteredPolicyEventType3" { return "Ceemregisteredpolicyeventtype3" }
    if yname == "ceemRegisteredPolicyEventType4" { return "Ceemregisteredpolicyeventtype4" }
    if yname == "ceemRegisteredPolicyStatus" { return "Ceemregisteredpolicystatus" }
    if yname == "ceemRegisteredPolicyType" { return "Ceemregisteredpolicytype" }
    if yname == "ceemRegisteredPolicyNotifFlag" { return "Ceemregisteredpolicynotifflag" }
    if yname == "ceemRegisteredPolicyRegTime" { return "Ceemregisteredpolicyregtime" }
    if yname == "ceemRegisteredPolicyEnabledTime" { return "Ceemregisteredpolicyenabledtime" }
    if yname == "ceemRegisteredPolicyRunTime" { return "Ceemregisteredpolicyruntime" }
    if yname == "ceemRegisteredPolicyRunCount" { return "Ceemregisteredpolicyruncount" }
    if yname == "ceemRegisteredPolicyEventType5" { return "Ceemregisteredpolicyeventtype5" }
    if yname == "ceemRegisteredPolicyEventType6" { return "Ceemregisteredpolicyeventtype6" }
    if yname == "ceemRegisteredPolicyEventType7" { return "Ceemregisteredpolicyeventtype7" }
    if yname == "ceemRegisteredPolicyEventType8" { return "Ceemregisteredpolicyeventtype8" }
    return ""
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetSegmentPath() string {
    return "ceemRegisteredPolicyEntry" + "[ceemRegisteredPolicyIndex='" + fmt.Sprintf("%v", ceemregisteredpolicyentry.Ceemregisteredpolicyindex) + "']"
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ceemRegisteredPolicyIndex"] = ceemregisteredpolicyentry.Ceemregisteredpolicyindex
    leafs["ceemRegisteredPolicyName"] = ceemregisteredpolicyentry.Ceemregisteredpolicyname
    leafs["ceemRegisteredPolicyEventType1"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype1
    leafs["ceemRegisteredPolicyEventType2"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype2
    leafs["ceemRegisteredPolicyEventType3"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype3
    leafs["ceemRegisteredPolicyEventType4"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype4
    leafs["ceemRegisteredPolicyStatus"] = ceemregisteredpolicyentry.Ceemregisteredpolicystatus
    leafs["ceemRegisteredPolicyType"] = ceemregisteredpolicyentry.Ceemregisteredpolicytype
    leafs["ceemRegisteredPolicyNotifFlag"] = ceemregisteredpolicyentry.Ceemregisteredpolicynotifflag
    leafs["ceemRegisteredPolicyRegTime"] = ceemregisteredpolicyentry.Ceemregisteredpolicyregtime
    leafs["ceemRegisteredPolicyEnabledTime"] = ceemregisteredpolicyentry.Ceemregisteredpolicyenabledtime
    leafs["ceemRegisteredPolicyRunTime"] = ceemregisteredpolicyentry.Ceemregisteredpolicyruntime
    leafs["ceemRegisteredPolicyRunCount"] = ceemregisteredpolicyentry.Ceemregisteredpolicyruncount
    leafs["ceemRegisteredPolicyEventType5"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype5
    leafs["ceemRegisteredPolicyEventType6"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype6
    leafs["ceemRegisteredPolicyEventType7"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype7
    leafs["ceemRegisteredPolicyEventType8"] = ceemregisteredpolicyentry.Ceemregisteredpolicyeventtype8
    return leafs
}

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetBundleName() string { return "cisco_ios_xe" }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetYangName() string { return "ceemRegisteredPolicyEntry" }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) SetParent(parent types.Entity) { ceemregisteredpolicyentry.parent = parent }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetParent() types.Entity { return ceemregisteredpolicyentry.parent }

func (ceemregisteredpolicyentry *CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry) GetParentYangName() string { return "ceemRegisteredPolicyTable" }

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus represents This status indicates whether the policy is enabled or disabled.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus string

const (
    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus_enabled CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus = "enabled"

    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus_disabled CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicystatus = "disabled"
)

// CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype represents This variable indicates whether this is a user or system policy.
type CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype string

const (
    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype_user CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype = "user"

    CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype_system CISCOEMBEDDEDEVENTMGRMIB_Ceemregisteredpolicytable_Ceemregisteredpolicyentry_Ceemregisteredpolicytype = "system"
)

