// The MIB module to describe and store events generated
// by the Cisco Embedded Event Manager.  
// 
// The Cisco Embedded Event Manager detects hardware and software 
// faults, and other events (such as OIRs) for the system.
// It also enables users to configure fault recovery services
// for system wide components.  The Embedded Event Manager also 
// provides process reliability statistics.
// 
// The Embedded Event Manager is a policy driven process through 
// which faults in the system are reported through a defined API.
// The Embedded Event Manager policy engine receives notifications
// when faults and other events occur.  Embedded Event Manager 
// policies implement recovery based on the current state of the 
// system and the actions specified in the policy for a given 
// event.  Recovery actions are triggered when the policy is 
// run.  Developers write and customize Embedded Event Manager 
// policies to handle faults and events.
package cisco_embedded_event_mgr_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_embedded_event_mgr_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-EMBEDDED-EVENT-MGR-MIB CISCO-EMBEDDED-EVENT-MGR-MIB}", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
    ydk.RegisterEntity("CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB", reflect.TypeOf(CISCOEMBEDDEDEVENTMGRMIB{}))
}

// NotifySource represents          Event Manager policy.
type NotifySource string

const (
    NotifySource_server NotifySource = "server"

    NotifySource_policy NotifySource = "policy"
)

// CISCOEMBEDDEDEVENTMGRMIB
type CISCOEMBEDDEDEVENTMGRMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CeemHistory CISCOEMBEDDEDEVENTMGRMIB_CeemHistory

    // A table containing information about ceemEventIndex value mapping.  Each
    // conceptual row specifies a  unique mapping between a ceemEventIndex value,
    // and a  Embedded Event Manager event type.  Rows are added  dynamically as
    // the Embedded Event Manager server learns of new event types.  This occurs
    // when Embedded Event  Manager Event Detectors register with the Embedded 
    // Event Manager server.
    CeemEventMapTable CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable

    // A table of Embedded Event Manager events generated by this router. 
    // Conceptual row entries are dynamically added into  this table when Embedded
    // Event Manager events occur.  Entries are stored in FIFO order.  When the
    // maximum number  of entries has been reached in the table, the oldest entry 
    // in the table is removed immediately.    When a table is reduced to a
    // smaller size N, the oldest entries are immediately removed from the table
    // leaving  a maximum of N entries.
    CeemHistoryEventTable CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable

    // A table of Embedded Event Manager policies registered on a system. The
    // number of entries depends on the configuration of the system.  The  maximum
    // number is implementation dependent.
    CeemRegisteredPolicyTable CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable
}

func (cISCOEMBEDDEDEVENTMGRMIB *CISCOEMBEDDEDEVENTMGRMIB) GetEntityData() *types.CommonEntityData {
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.YFilter = cISCOEMBEDDEDEVENTMGRMIB.YFilter
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.YangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.SegmentPath = "CISCO-EMBEDDED-EVENT-MGR-MIB:CISCO-EMBEDDED-EVENT-MGR-MIB"
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children = types.NewOrderedMap()
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children.Append("ceemHistory", types.YChild{"CeemHistory", &cISCOEMBEDDEDEVENTMGRMIB.CeemHistory})
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children.Append("ceemEventMapTable", types.YChild{"CeemEventMapTable", &cISCOEMBEDDEDEVENTMGRMIB.CeemEventMapTable})
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children.Append("ceemHistoryEventTable", types.YChild{"CeemHistoryEventTable", &cISCOEMBEDDEDEVENTMGRMIB.CeemHistoryEventTable})
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Children.Append("ceemRegisteredPolicyTable", types.YChild{"CeemRegisteredPolicyTable", &cISCOEMBEDDEDEVENTMGRMIB.CeemRegisteredPolicyTable})
    cISCOEMBEDDEDEVENTMGRMIB.EntityData.Leafs = types.NewOrderedMap()

    cISCOEMBEDDEDEVENTMGRMIB.EntityData.YListKeys = []string {}

    return &(cISCOEMBEDDEDEVENTMGRMIB.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemHistory
type CISCOEMBEDDEDEVENTMGRMIB_CeemHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum number of entries that can be held in ceemHistoryEventTable.
    // The type is interface{} with range: 0..50.
    CeemHistoryMaxEventEntries interface{}

    // Index of last entry created in ceemHistoryEventTable. The type is
    // interface{} with range: 1..4294967295.
    CeemHistoryLastEventEntry interface{}
}

func (ceemHistory *CISCOEMBEDDEDEVENTMGRMIB_CeemHistory) GetEntityData() *types.CommonEntityData {
    ceemHistory.EntityData.YFilter = ceemHistory.YFilter
    ceemHistory.EntityData.YangName = "ceemHistory"
    ceemHistory.EntityData.BundleName = "cisco_ios_xe"
    ceemHistory.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemHistory.EntityData.SegmentPath = "ceemHistory"
    ceemHistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemHistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemHistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemHistory.EntityData.Children = types.NewOrderedMap()
    ceemHistory.EntityData.Leafs = types.NewOrderedMap()
    ceemHistory.EntityData.Leafs.Append("ceemHistoryMaxEventEntries", types.YLeaf{"CeemHistoryMaxEventEntries", ceemHistory.CeemHistoryMaxEventEntries})
    ceemHistory.EntityData.Leafs.Append("ceemHistoryLastEventEntry", types.YLeaf{"CeemHistoryLastEventEntry", ceemHistory.CeemHistoryLastEventEntry})

    ceemHistory.EntityData.YListKeys = []string {}

    return &(ceemHistory.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable
// A table containing information about ceemEventIndex
// value mapping.  Each conceptual row specifies a 
// unique mapping between a ceemEventIndex value, and a 
// Embedded Event Manager event type.  Rows are added 
// dynamically as the Embedded Event Manager server learns
// of new event types.  This occurs when Embedded Event 
// Manager Event Detectors register with the Embedded 
// Event Manager server.
type CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A mapping between an event type and an event description. The type is slice
    // of CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable_CeemEventMapEntry.
    CeemEventMapEntry []*CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable_CeemEventMapEntry
}

func (ceemEventMapTable *CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable) GetEntityData() *types.CommonEntityData {
    ceemEventMapTable.EntityData.YFilter = ceemEventMapTable.YFilter
    ceemEventMapTable.EntityData.YangName = "ceemEventMapTable"
    ceemEventMapTable.EntityData.BundleName = "cisco_ios_xe"
    ceemEventMapTable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemEventMapTable.EntityData.SegmentPath = "ceemEventMapTable"
    ceemEventMapTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemEventMapTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemEventMapTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemEventMapTable.EntityData.Children = types.NewOrderedMap()
    ceemEventMapTable.EntityData.Children.Append("ceemEventMapEntry", types.YChild{"CeemEventMapEntry", nil})
    for i := range ceemEventMapTable.CeemEventMapEntry {
        ceemEventMapTable.EntityData.Children.Append(types.GetSegmentPath(ceemEventMapTable.CeemEventMapEntry[i]), types.YChild{"CeemEventMapEntry", ceemEventMapTable.CeemEventMapEntry[i]})
    }
    ceemEventMapTable.EntityData.Leafs = types.NewOrderedMap()

    ceemEventMapTable.EntityData.YListKeys = []string {}

    return &(ceemEventMapTable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable_CeemEventMapEntry
// A mapping between an event type and an event description.
type CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable_CeemEventMapEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. This object uniquely identifies an event.  Events
    // are not persisted across reloads. The type is interface{} with range:
    // 0..4294967295.
    CeemEventIndex interface{}

    // The name of the Embedded Event Manager event. The type is string with
    // length: 1..128.
    CeemEventName interface{}

    // This object specifies a human-readable message describing information about
    // the  Embedded Event Manager event. The type is string.
    CeemEventDescrText interface{}
}

func (ceemEventMapEntry *CISCOEMBEDDEDEVENTMGRMIB_CeemEventMapTable_CeemEventMapEntry) GetEntityData() *types.CommonEntityData {
    ceemEventMapEntry.EntityData.YFilter = ceemEventMapEntry.YFilter
    ceemEventMapEntry.EntityData.YangName = "ceemEventMapEntry"
    ceemEventMapEntry.EntityData.BundleName = "cisco_ios_xe"
    ceemEventMapEntry.EntityData.ParentYangName = "ceemEventMapTable"
    ceemEventMapEntry.EntityData.SegmentPath = "ceemEventMapEntry" + types.AddKeyToken(ceemEventMapEntry.CeemEventIndex, "ceemEventIndex")
    ceemEventMapEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemEventMapEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemEventMapEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemEventMapEntry.EntityData.Children = types.NewOrderedMap()
    ceemEventMapEntry.EntityData.Leafs = types.NewOrderedMap()
    ceemEventMapEntry.EntityData.Leafs.Append("ceemEventIndex", types.YLeaf{"CeemEventIndex", ceemEventMapEntry.CeemEventIndex})
    ceemEventMapEntry.EntityData.Leafs.Append("ceemEventName", types.YLeaf{"CeemEventName", ceemEventMapEntry.CeemEventName})
    ceemEventMapEntry.EntityData.Leafs.Append("ceemEventDescrText", types.YLeaf{"CeemEventDescrText", ceemEventMapEntry.CeemEventDescrText})

    ceemEventMapEntry.EntityData.YListKeys = []string {"CeemEventIndex"}

    return &(ceemEventMapEntry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable
// A table of Embedded Event Manager events generated by this
// router.  Conceptual row entries are dynamically added into 
// this table when Embedded Event Manager events occur.
// 
// Entries are stored in FIFO order.  When the maximum number 
// of entries has been reached in the table, the oldest entry 
// in the table is removed immediately.  
// 
// When a table is reduced to a smaller size N, the oldest
// entries are immediately removed from the table leaving 
// a maximum of N entries.
type CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about an Embedded Event Manager event which has been generated
    // by this router.  It provides up to four event types to support complex
    // event specifications that are triggered when multiple events are published
    // within a certain period of time. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable_CeemHistoryEventEntry.
    CeemHistoryEventEntry []*CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable_CeemHistoryEventEntry
}

func (ceemHistoryEventTable *CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable) GetEntityData() *types.CommonEntityData {
    ceemHistoryEventTable.EntityData.YFilter = ceemHistoryEventTable.YFilter
    ceemHistoryEventTable.EntityData.YangName = "ceemHistoryEventTable"
    ceemHistoryEventTable.EntityData.BundleName = "cisco_ios_xe"
    ceemHistoryEventTable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemHistoryEventTable.EntityData.SegmentPath = "ceemHistoryEventTable"
    ceemHistoryEventTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemHistoryEventTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemHistoryEventTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemHistoryEventTable.EntityData.Children = types.NewOrderedMap()
    ceemHistoryEventTable.EntityData.Children.Append("ceemHistoryEventEntry", types.YChild{"CeemHistoryEventEntry", nil})
    for i := range ceemHistoryEventTable.CeemHistoryEventEntry {
        ceemHistoryEventTable.EntityData.Children.Append(types.GetSegmentPath(ceemHistoryEventTable.CeemHistoryEventEntry[i]), types.YChild{"CeemHistoryEventEntry", ceemHistoryEventTable.CeemHistoryEventEntry[i]})
    }
    ceemHistoryEventTable.EntityData.Leafs = types.NewOrderedMap()

    ceemHistoryEventTable.EntityData.YListKeys = []string {}

    return &(ceemHistoryEventTable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable_CeemHistoryEventEntry
// Information about an Embedded Event Manager event which has
// been generated by this router.  It provides up to four event
// types to support complex event specifications that are
// triggered when multiple events are published within a certain
// period of time.
type CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable_CeemHistoryEventEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a generated event.  When it reaches the  maximum
    // value, the agent wraps the value back to 1  and may flush all existing
    // entries in the event table. The type is interface{} with range:
    // 1..4294967295.
    CeemHistoryEventIndex interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType1 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType2 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType3 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the ceemEventTable. The type is interface{} with
    // range: 0..4294967295.
    CeemHistoryEventType4 interface{}

    // The file path on the router where the Embedded Event Manager policy that
    // was triggered is stored.  If the size of the  file path string is larger
    // than 128, the end characters  will be truncated. The type is string with
    // length: 0..128.
    CeemHistoryPolicyPath interface{}

    // The name of the Embedded Event Manager policy that was triggered because of
    // an Embedded Event Manager event. The name must be a valid Embedded Event
    // Manager policy name.  It must be in the form of a valid Posix filename. The
    // type is string with length: 0..128.
    CeemHistoryPolicyName interface{}

    // The exit status of the Embedded Event Manager policy execution.  This value
    // corresponds to the Posix process  exit status. The type is interface{} with
    // range: -2147483648..2147483647.
    CeemHistoryPolicyExitStatus interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    CeemHistoryPolicyIntData1 interface{}

    // Arbitrary integer data that the Embedded Event Manager policy can use. Use
    // of this object is optional. If unused by a policy, this object will not be
    // instantiated for  that policy. The type is interface{} with range:
    // -2147483648..2147483647.
    CeemHistoryPolicyIntData2 interface{}

    // Arbitrary string data the Embedded Event Manager policy can use.  Use of
    // this object is optional.  If unused by a policy, this object will not be
    // instantiated for  that policy. The type is string with length: 0..255.
    CeemHistoryPolicyStrData interface{}

    // The notification type that was sent from the Embedded Event Manager.  The
    // valid values are server or policy. The type is NotifySource.
    CeemHistoryNotifyType interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType5 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType6 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType7 interface{}

    // The type of Embedded Event Manager event which was detected. The value
    // corresponds to an entry in the  ceemEventTable. The type is interface{}
    // with range: 0..4294967295.
    CeemHistoryEventType8 interface{}
}

func (ceemHistoryEventEntry *CISCOEMBEDDEDEVENTMGRMIB_CeemHistoryEventTable_CeemHistoryEventEntry) GetEntityData() *types.CommonEntityData {
    ceemHistoryEventEntry.EntityData.YFilter = ceemHistoryEventEntry.YFilter
    ceemHistoryEventEntry.EntityData.YangName = "ceemHistoryEventEntry"
    ceemHistoryEventEntry.EntityData.BundleName = "cisco_ios_xe"
    ceemHistoryEventEntry.EntityData.ParentYangName = "ceemHistoryEventTable"
    ceemHistoryEventEntry.EntityData.SegmentPath = "ceemHistoryEventEntry" + types.AddKeyToken(ceemHistoryEventEntry.CeemHistoryEventIndex, "ceemHistoryEventIndex")
    ceemHistoryEventEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemHistoryEventEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemHistoryEventEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemHistoryEventEntry.EntityData.Children = types.NewOrderedMap()
    ceemHistoryEventEntry.EntityData.Leafs = types.NewOrderedMap()
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventIndex", types.YLeaf{"CeemHistoryEventIndex", ceemHistoryEventEntry.CeemHistoryEventIndex})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType1", types.YLeaf{"CeemHistoryEventType1", ceemHistoryEventEntry.CeemHistoryEventType1})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType2", types.YLeaf{"CeemHistoryEventType2", ceemHistoryEventEntry.CeemHistoryEventType2})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType3", types.YLeaf{"CeemHistoryEventType3", ceemHistoryEventEntry.CeemHistoryEventType3})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType4", types.YLeaf{"CeemHistoryEventType4", ceemHistoryEventEntry.CeemHistoryEventType4})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyPath", types.YLeaf{"CeemHistoryPolicyPath", ceemHistoryEventEntry.CeemHistoryPolicyPath})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyName", types.YLeaf{"CeemHistoryPolicyName", ceemHistoryEventEntry.CeemHistoryPolicyName})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyExitStatus", types.YLeaf{"CeemHistoryPolicyExitStatus", ceemHistoryEventEntry.CeemHistoryPolicyExitStatus})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyIntData1", types.YLeaf{"CeemHistoryPolicyIntData1", ceemHistoryEventEntry.CeemHistoryPolicyIntData1})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyIntData2", types.YLeaf{"CeemHistoryPolicyIntData2", ceemHistoryEventEntry.CeemHistoryPolicyIntData2})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryPolicyStrData", types.YLeaf{"CeemHistoryPolicyStrData", ceemHistoryEventEntry.CeemHistoryPolicyStrData})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryNotifyType", types.YLeaf{"CeemHistoryNotifyType", ceemHistoryEventEntry.CeemHistoryNotifyType})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType5", types.YLeaf{"CeemHistoryEventType5", ceemHistoryEventEntry.CeemHistoryEventType5})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType6", types.YLeaf{"CeemHistoryEventType6", ceemHistoryEventEntry.CeemHistoryEventType6})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType7", types.YLeaf{"CeemHistoryEventType7", ceemHistoryEventEntry.CeemHistoryEventType7})
    ceemHistoryEventEntry.EntityData.Leafs.Append("ceemHistoryEventType8", types.YLeaf{"CeemHistoryEventType8", ceemHistoryEventEntry.CeemHistoryEventType8})

    ceemHistoryEventEntry.EntityData.YListKeys = []string {"CeemHistoryEventIndex"}

    return &(ceemHistoryEventEntry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable
// A table of Embedded Event Manager policies registered on a system.
// The number of entries depends on the configuration of the system.  The 
// maximum number is implementation dependent.
type CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An entry in the table of Embedded Event Manager policies that are
    // registered.  It provides up to four event types to support complex  event
    // specifications that are triggered when multiple events are  published
    // within a certain period of time.  A row in this table  cannot be created or
    // deleted by SNMP operations on columns of the  table. The type is slice of
    // CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry.
    CeemRegisteredPolicyEntry []*CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry
}

func (ceemRegisteredPolicyTable *CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable) GetEntityData() *types.CommonEntityData {
    ceemRegisteredPolicyTable.EntityData.YFilter = ceemRegisteredPolicyTable.YFilter
    ceemRegisteredPolicyTable.EntityData.YangName = "ceemRegisteredPolicyTable"
    ceemRegisteredPolicyTable.EntityData.BundleName = "cisco_ios_xe"
    ceemRegisteredPolicyTable.EntityData.ParentYangName = "CISCO-EMBEDDED-EVENT-MGR-MIB"
    ceemRegisteredPolicyTable.EntityData.SegmentPath = "ceemRegisteredPolicyTable"
    ceemRegisteredPolicyTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemRegisteredPolicyTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemRegisteredPolicyTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemRegisteredPolicyTable.EntityData.Children = types.NewOrderedMap()
    ceemRegisteredPolicyTable.EntityData.Children.Append("ceemRegisteredPolicyEntry", types.YChild{"CeemRegisteredPolicyEntry", nil})
    for i := range ceemRegisteredPolicyTable.CeemRegisteredPolicyEntry {
        ceemRegisteredPolicyTable.EntityData.Children.Append(types.GetSegmentPath(ceemRegisteredPolicyTable.CeemRegisteredPolicyEntry[i]), types.YChild{"CeemRegisteredPolicyEntry", ceemRegisteredPolicyTable.CeemRegisteredPolicyEntry[i]})
    }
    ceemRegisteredPolicyTable.EntityData.Leafs = types.NewOrderedMap()

    ceemRegisteredPolicyTable.EntityData.YListKeys = []string {}

    return &(ceemRegisteredPolicyTable.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry
// An entry in the table of Embedded Event Manager policies that are
// registered.  It provides up to four event types to support complex 
// event specifications that are triggered when multiple events are 
// published within a certain period of time.  A row in this table 
// cannot be created or deleted by SNMP operations on columns of the 
// table.
type CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing non-zero integer
    // uniquely identifying a policy registration.  When it reaches the maximum
    // value, the agent wraps the value back to 1 upon  receiving the next policy
    // registration. The type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyIndex interface{}

    // The name of the Embedded Event Manager policy that was registered.  The
    // name must be a valid Embedded Event  Manager policy name. It must be in the
    // form of a valid  Posix filename. The type is string with length: 0..128.
    CeemRegisteredPolicyName interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType1 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType2 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType3 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType4 interface{}

    // This status indicates whether the policy is enabled or disabled. The type
    // is CeemRegisteredPolicyStatus.
    CeemRegisteredPolicyStatus interface{}

    // This variable indicates whether this is a user or system policy. The type
    // is CeemRegisteredPolicyType.
    CeemRegisteredPolicyType interface{}

    // This flag indicates if an SNMP notification will be sent when policy is
    // triggered. The type is bool.
    CeemRegisteredPolicyNotifFlag interface{}

    // The time the policy was registered.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    CeemRegisteredPolicyRegTime interface{}

    // The time the policy was last enabled.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    CeemRegisteredPolicyEnabledTime interface{}

    // The last time the policy was run.  It is stored as a 32-bit count of
    // seconds since 0000 UTC, 1 January, 1970. The type is string.
    CeemRegisteredPolicyRunTime interface{}

    // The number of times the policy has been run. The type is interface{} with
    // range: 0..4294967295.
    CeemRegisteredPolicyRunCount interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType5 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType6 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType7 interface{}

    // The type of Embedded Event Manager event which was registered by the
    // policy. The value corresponds to an entry in the ceemEventMapTable. The
    // type is interface{} with range: 0..4294967295.
    CeemRegisteredPolicyEventType8 interface{}
}

func (ceemRegisteredPolicyEntry *CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry) GetEntityData() *types.CommonEntityData {
    ceemRegisteredPolicyEntry.EntityData.YFilter = ceemRegisteredPolicyEntry.YFilter
    ceemRegisteredPolicyEntry.EntityData.YangName = "ceemRegisteredPolicyEntry"
    ceemRegisteredPolicyEntry.EntityData.BundleName = "cisco_ios_xe"
    ceemRegisteredPolicyEntry.EntityData.ParentYangName = "ceemRegisteredPolicyTable"
    ceemRegisteredPolicyEntry.EntityData.SegmentPath = "ceemRegisteredPolicyEntry" + types.AddKeyToken(ceemRegisteredPolicyEntry.CeemRegisteredPolicyIndex, "ceemRegisteredPolicyIndex")
    ceemRegisteredPolicyEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ceemRegisteredPolicyEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ceemRegisteredPolicyEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ceemRegisteredPolicyEntry.EntityData.Children = types.NewOrderedMap()
    ceemRegisteredPolicyEntry.EntityData.Leafs = types.NewOrderedMap()
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyIndex", types.YLeaf{"CeemRegisteredPolicyIndex", ceemRegisteredPolicyEntry.CeemRegisteredPolicyIndex})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyName", types.YLeaf{"CeemRegisteredPolicyName", ceemRegisteredPolicyEntry.CeemRegisteredPolicyName})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType1", types.YLeaf{"CeemRegisteredPolicyEventType1", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType1})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType2", types.YLeaf{"CeemRegisteredPolicyEventType2", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType2})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType3", types.YLeaf{"CeemRegisteredPolicyEventType3", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType3})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType4", types.YLeaf{"CeemRegisteredPolicyEventType4", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType4})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyStatus", types.YLeaf{"CeemRegisteredPolicyStatus", ceemRegisteredPolicyEntry.CeemRegisteredPolicyStatus})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyType", types.YLeaf{"CeemRegisteredPolicyType", ceemRegisteredPolicyEntry.CeemRegisteredPolicyType})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyNotifFlag", types.YLeaf{"CeemRegisteredPolicyNotifFlag", ceemRegisteredPolicyEntry.CeemRegisteredPolicyNotifFlag})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyRegTime", types.YLeaf{"CeemRegisteredPolicyRegTime", ceemRegisteredPolicyEntry.CeemRegisteredPolicyRegTime})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEnabledTime", types.YLeaf{"CeemRegisteredPolicyEnabledTime", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEnabledTime})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyRunTime", types.YLeaf{"CeemRegisteredPolicyRunTime", ceemRegisteredPolicyEntry.CeemRegisteredPolicyRunTime})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyRunCount", types.YLeaf{"CeemRegisteredPolicyRunCount", ceemRegisteredPolicyEntry.CeemRegisteredPolicyRunCount})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType5", types.YLeaf{"CeemRegisteredPolicyEventType5", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType5})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType6", types.YLeaf{"CeemRegisteredPolicyEventType6", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType6})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType7", types.YLeaf{"CeemRegisteredPolicyEventType7", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType7})
    ceemRegisteredPolicyEntry.EntityData.Leafs.Append("ceemRegisteredPolicyEventType8", types.YLeaf{"CeemRegisteredPolicyEventType8", ceemRegisteredPolicyEntry.CeemRegisteredPolicyEventType8})

    ceemRegisteredPolicyEntry.EntityData.YListKeys = []string {"CeemRegisteredPolicyIndex"}

    return &(ceemRegisteredPolicyEntry.EntityData)
}

// CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus represents This status indicates whether the policy is enabled or disabled.
type CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus string

const (
    CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus_enabled CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus = "enabled"

    CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus_disabled CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyStatus = "disabled"
)

// CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType represents This variable indicates whether this is a user or system policy.
type CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType string

const (
    CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType_user CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType = "user"

    CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType_system CISCOEMBEDDEDEVENTMGRMIB_CeemRegisteredPolicyTable_CeemRegisteredPolicyEntry_CeemRegisteredPolicyType = "system"
)

