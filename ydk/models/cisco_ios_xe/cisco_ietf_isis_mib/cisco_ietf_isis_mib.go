// This document describes a management information base for
// the IS-IS Routing protocol, as described in ISO 10589,
// when it is used to construct routing tables for IP networks,
// as described in RFC 1195. This MIB is entirely based upon
// the IETF draft draft-ietf-isis-wg-mib-16.
package cisco_ietf_isis_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_ietf_isis_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-IETF-ISIS-MIB CISCO-IETF-ISIS-MIB}", reflect.TypeOf(CISCOIETFISISMIB{}))
    ydk.RegisterEntity("CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB", reflect.TypeOf(CISCOIETFISISMIB{}))
}

// CiiMetricStyle represents Do we use 1195 style Metrics or wide metrics.
type CiiMetricStyle string

const (
    CiiMetricStyle_narrow CiiMetricStyle = "narrow"

    CiiMetricStyle_wide CiiMetricStyle = "wide"

    CiiMetricStyle_both CiiMetricStyle = "both"
)

// CiiLevelState represents States of the IS-IS protocol.
type CiiLevelState string

const (
    CiiLevelState_off CiiLevelState = "off"

    CiiLevelState_on CiiLevelState = "on"

    CiiLevelState_waiting CiiLevelState = "waiting"

    CiiLevelState_overloaded CiiLevelState = "overloaded"
)

// CiiSupportedProtocol represents these protocols in ISO TR9577.
type CiiSupportedProtocol string

const (
    CiiSupportedProtocol_iso8473 CiiSupportedProtocol = "iso8473"

    CiiSupportedProtocol_ipV6 CiiSupportedProtocol = "ipV6"

    CiiSupportedProtocol_ip CiiSupportedProtocol = "ip"
)

// CiiAdminState represents Values match those in RFC 2863.
type CiiAdminState string

const (
    CiiAdminState_on CiiAdminState = "on"

    CiiAdminState_off CiiAdminState = "off"
)

// CiiMetricType represents Is this an Internal or External Metric?
type CiiMetricType string

const (
    CiiMetricType_internal CiiMetricType = "internal"

    CiiMetricType_external CiiMetricType = "external"
)

// CiiISLevel represents Identifies a level.
type CiiISLevel string

const (
    CiiISLevel_none CiiISLevel = "none"

    CiiISLevel_area CiiISLevel = "area"

    CiiISLevel_domain CiiISLevel = "domain"
)

// CISCOIETFISISMIB
type CISCOIETFISISMIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Ciisysobject CISCOIETFISISMIB_Ciisysobject

    
    Ciicirc CISCOIETFISISMIB_Ciicirc

    // The set of manual area addresses configured on this Intermediate System.
    Ciimanareaaddrtable CISCOIETFISISMIB_Ciimanareaaddrtable

    // The union of the sets of area addresses reported in all Level 1 LSPs with
    // fragment number zero generated by this Intermediate System, or received
    // from other Intermediate Systems which are reachable via Level 1 routing.
    Ciiareaaddrtable CISCOIETFISISMIB_Ciiareaaddrtable

    // This table contains the manually configured set of protocols supported by
    // this Intermediate System.
    Ciisysprotsupptable CISCOIETFISISMIB_Ciisysprotsupptable

    // The set of IP summary addresses to use in forming summary TLVs originated
    // by this Intermediate System.  An administrator may use a summary address to
    // combine and modify IP Reachability announcements.  If the Intermediate
    // system can reach any subset of the summary address, the summary address
    // will be announced instead, at the configured metric.
    Ciisummaddrtable CISCOIETFISISMIB_Ciisummaddrtable

    // This table provides criteria to decide if a route should be leaked from L2
    // to L1 when Domain Wide Prefix leaking is enabled.  Addresses that match the
    // summary mask in the table will be announced at L1 by routers when
    // ciiSysL2toL1Leaking is enabled.  Routes that fall into the ranges specified
    // are announced as is, without being summarized.  Routes that do not match a
    // summary mask are not announced.
    Ciiredistributeaddrtable CISCOIETFISISMIB_Ciiredistributeaddrtable

    // The set of hostnames and router ID.
    Ciiroutertable CISCOIETFISISMIB_Ciiroutertable

    // Level specific information about the System.
    Ciisysleveltable CISCOIETFISISMIB_Ciisysleveltable

    // The table of circuits used by this Intermediate System.
    Ciicirctable CISCOIETFISISMIB_Ciicirctable

    // Level specific information about circuits used by IS-IS.
    Ciicircleveltable CISCOIETFISISMIB_Ciicircleveltable

    // System wide counters for this Intermediate System.
    Ciisystemcountertable CISCOIETFISISMIB_Ciisystemcountertable

    // Circuit specific counters for this Intermediate System.
    Ciicircuitcountertable CISCOIETFISISMIB_Ciicircuitcountertable

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction.
    Ciipacketcountertable CISCOIETFISISMIB_Ciipacketcountertable

    // The table of adjacencies to Intermediate Systems.
    Ciiisadjtable CISCOIETFISISMIB_Ciiisadjtable

    // This table contains the set of Area Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    Ciiisadjareaaddrtable CISCOIETFISISMIB_Ciiisadjareaaddrtable

    // This table contains the set of IP Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    Ciiisadjipaddrtable CISCOIETFISISMIB_Ciiisadjipaddrtable

    // This table contains the set of protocols supported by neighboring
    // Intermediate Systems as reported in received IIH PDUs.
    Ciiisadjprotsupptable CISCOIETFISISMIB_Ciiisadjprotsupptable

    // The table of Reachable Addresses to NSAPs or Address Prefixes.
    Ciiratable CISCOIETFISISMIB_Ciiratable

    // The table of IP Reachable Addresses to networks, subnetworks or hosts
    // either manually configured or learned from another protocol.
    Ciiipratable CISCOIETFISISMIB_Ciiipratable

    // The table of LSP Headers.
    Ciilspsummarytable CISCOIETFISISMIB_Ciilspsummarytable

    // The contents of each LSP.
    Ciilsptlvtable CISCOIETFISISMIB_Ciilsptlvtable
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetFilter() yfilter.YFilter { return cISCOIETFISISMIB.YFilter }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) SetFilter(yf yfilter.YFilter) { cISCOIETFISISMIB.YFilter = yf }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetGoName(yname string) string {
    if yname == "ciiSysObject" { return "Ciisysobject" }
    if yname == "ciiCirc" { return "Ciicirc" }
    if yname == "ciiManAreaAddrTable" { return "Ciimanareaaddrtable" }
    if yname == "ciiAreaAddrTable" { return "Ciiareaaddrtable" }
    if yname == "ciiSysProtSuppTable" { return "Ciisysprotsupptable" }
    if yname == "ciiSummAddrTable" { return "Ciisummaddrtable" }
    if yname == "ciiRedistributeAddrTable" { return "Ciiredistributeaddrtable" }
    if yname == "ciiRouterTable" { return "Ciiroutertable" }
    if yname == "ciiSysLevelTable" { return "Ciisysleveltable" }
    if yname == "ciiCircTable" { return "Ciicirctable" }
    if yname == "ciiCircLevelTable" { return "Ciicircleveltable" }
    if yname == "ciiSystemCounterTable" { return "Ciisystemcountertable" }
    if yname == "ciiCircuitCounterTable" { return "Ciicircuitcountertable" }
    if yname == "ciiPacketCounterTable" { return "Ciipacketcountertable" }
    if yname == "ciiISAdjTable" { return "Ciiisadjtable" }
    if yname == "ciiISAdjAreaAddrTable" { return "Ciiisadjareaaddrtable" }
    if yname == "ciiISAdjIPAddrTable" { return "Ciiisadjipaddrtable" }
    if yname == "ciiISAdjProtSuppTable" { return "Ciiisadjprotsupptable" }
    if yname == "ciiRATable" { return "Ciiratable" }
    if yname == "ciiIPRATable" { return "Ciiipratable" }
    if yname == "ciiLSPSummaryTable" { return "Ciilspsummarytable" }
    if yname == "ciiLSPTLVTable" { return "Ciilsptlvtable" }
    return ""
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetSegmentPath() string {
    return "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB"
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiSysObject" {
        return &cISCOIETFISISMIB.Ciisysobject
    }
    if childYangName == "ciiCirc" {
        return &cISCOIETFISISMIB.Ciicirc
    }
    if childYangName == "ciiManAreaAddrTable" {
        return &cISCOIETFISISMIB.Ciimanareaaddrtable
    }
    if childYangName == "ciiAreaAddrTable" {
        return &cISCOIETFISISMIB.Ciiareaaddrtable
    }
    if childYangName == "ciiSysProtSuppTable" {
        return &cISCOIETFISISMIB.Ciisysprotsupptable
    }
    if childYangName == "ciiSummAddrTable" {
        return &cISCOIETFISISMIB.Ciisummaddrtable
    }
    if childYangName == "ciiRedistributeAddrTable" {
        return &cISCOIETFISISMIB.Ciiredistributeaddrtable
    }
    if childYangName == "ciiRouterTable" {
        return &cISCOIETFISISMIB.Ciiroutertable
    }
    if childYangName == "ciiSysLevelTable" {
        return &cISCOIETFISISMIB.Ciisysleveltable
    }
    if childYangName == "ciiCircTable" {
        return &cISCOIETFISISMIB.Ciicirctable
    }
    if childYangName == "ciiCircLevelTable" {
        return &cISCOIETFISISMIB.Ciicircleveltable
    }
    if childYangName == "ciiSystemCounterTable" {
        return &cISCOIETFISISMIB.Ciisystemcountertable
    }
    if childYangName == "ciiCircuitCounterTable" {
        return &cISCOIETFISISMIB.Ciicircuitcountertable
    }
    if childYangName == "ciiPacketCounterTable" {
        return &cISCOIETFISISMIB.Ciipacketcountertable
    }
    if childYangName == "ciiISAdjTable" {
        return &cISCOIETFISISMIB.Ciiisadjtable
    }
    if childYangName == "ciiISAdjAreaAddrTable" {
        return &cISCOIETFISISMIB.Ciiisadjareaaddrtable
    }
    if childYangName == "ciiISAdjIPAddrTable" {
        return &cISCOIETFISISMIB.Ciiisadjipaddrtable
    }
    if childYangName == "ciiISAdjProtSuppTable" {
        return &cISCOIETFISISMIB.Ciiisadjprotsupptable
    }
    if childYangName == "ciiRATable" {
        return &cISCOIETFISISMIB.Ciiratable
    }
    if childYangName == "ciiIPRATable" {
        return &cISCOIETFISISMIB.Ciiipratable
    }
    if childYangName == "ciiLSPSummaryTable" {
        return &cISCOIETFISISMIB.Ciilspsummarytable
    }
    if childYangName == "ciiLSPTLVTable" {
        return &cISCOIETFISISMIB.Ciilsptlvtable
    }
    return nil
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ciiSysObject"] = &cISCOIETFISISMIB.Ciisysobject
    children["ciiCirc"] = &cISCOIETFISISMIB.Ciicirc
    children["ciiManAreaAddrTable"] = &cISCOIETFISISMIB.Ciimanareaaddrtable
    children["ciiAreaAddrTable"] = &cISCOIETFISISMIB.Ciiareaaddrtable
    children["ciiSysProtSuppTable"] = &cISCOIETFISISMIB.Ciisysprotsupptable
    children["ciiSummAddrTable"] = &cISCOIETFISISMIB.Ciisummaddrtable
    children["ciiRedistributeAddrTable"] = &cISCOIETFISISMIB.Ciiredistributeaddrtable
    children["ciiRouterTable"] = &cISCOIETFISISMIB.Ciiroutertable
    children["ciiSysLevelTable"] = &cISCOIETFISISMIB.Ciisysleveltable
    children["ciiCircTable"] = &cISCOIETFISISMIB.Ciicirctable
    children["ciiCircLevelTable"] = &cISCOIETFISISMIB.Ciicircleveltable
    children["ciiSystemCounterTable"] = &cISCOIETFISISMIB.Ciisystemcountertable
    children["ciiCircuitCounterTable"] = &cISCOIETFISISMIB.Ciicircuitcountertable
    children["ciiPacketCounterTable"] = &cISCOIETFISISMIB.Ciipacketcountertable
    children["ciiISAdjTable"] = &cISCOIETFISISMIB.Ciiisadjtable
    children["ciiISAdjAreaAddrTable"] = &cISCOIETFISISMIB.Ciiisadjareaaddrtable
    children["ciiISAdjIPAddrTable"] = &cISCOIETFISISMIB.Ciiisadjipaddrtable
    children["ciiISAdjProtSuppTable"] = &cISCOIETFISISMIB.Ciiisadjprotsupptable
    children["ciiRATable"] = &cISCOIETFISISMIB.Ciiratable
    children["ciiIPRATable"] = &cISCOIETFISISMIB.Ciiipratable
    children["ciiLSPSummaryTable"] = &cISCOIETFISISMIB.Ciilspsummarytable
    children["ciiLSPTLVTable"] = &cISCOIETFISISMIB.Ciilsptlvtable
    return children
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetYangName() string { return "CISCO-IETF-ISIS-MIB" }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) SetParent(parent types.Entity) { cISCOIETFISISMIB.parent = parent }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetParent() types.Entity { return cISCOIETFISISMIB.parent }

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisysobject
type CISCOIETFISISMIB_Ciisysobject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The version number of the IS-IS protocol that is implemented. The type is
    // Ciisysversion.
    Ciisysversion interface{}

    // At which levels is the Intermediate System running? This object follows the
    // replaceOnlyWhileDisabled behavior. The type is Ciisystype.
    Ciisystype interface{}

    // The ID for this Intermediate System. This value is appended to each of the
    // area addresses to form the Network Entity Titles. The derivation of a value
    // for this object is implementation-specific.  Some implementations may
    // automatically assign values and not permit an SNMP write, while others may
    // require the value to be set manually. The type is string with length: 6.
    Ciisysid interface{}

    // Maximum number of paths with equal routing metric value which it is
    // permitted to split between. This object follows the
    // replaceOnlyWhileDisabled behavior. The type is interface{} with range:
    // 1..32.
    Ciisysmaxpathsplits interface{}

    // Maximum interval, in seconds, between generated LSPs by this Intermediate
    // System. This object follows the resettingTimer behavior.  The value must be
    // greater than any value configured for ciiSysLevelMinLSPGenInt, and should
    // be at least 300 seconds less than ciiSysMaxAge. The type is interface{}
    // with range: 1..65235. Units are seconds.
    Ciisysmaxlspgenint interface{}

    // The value, in seconds, to be used for the suggested ES configuration timer
    // in ISH PDUs when soliciting the ES configuration. The type is interface{}
    // with range: 0..65535. Units are seconds.
    Ciisyspolleshellorate interface{}

    // Number of seconds to delay in 'waiting' state before entering 'on' state.
    // This object follows the resettingTimer behavior. The type is interface{}
    // with range: 1..65535. Units are seconds.
    Ciisyswaittime interface{}

    // The administrative state of this Intermediate System.  Setting this object
    // to the value 'on' when its current value is 'off' enables the Intermediate
    // System. The type is CiiAdminState.
    Ciisysadminstate interface{}

    // If true, allow the router to leak L2 routes into L1. The type is bool.
    Ciisysl2Tol1Leaking interface{}

    // Value to place in RemainingLifeTime field of the LSPs we generate. This
    // should be at least 300 seconds greater than ciiSysMaxLSPGenInt. The type is
    // interface{} with range: 350..65535. Units are seconds.
    Ciisysmaxage interface{}

    // Size of the largest Buffer we are designed or configured to store.  This
    // should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize
    // supported by the system.  If resources allow, we will store and flood LSPs
    // larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in
    // networks with different values for ciiSysLevelOrigLSPBuffSize. The type is
    // interface{} with range: 1492..16000. Units are bytes.
    Ciisysreceivelspbuffersize interface{}
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetFilter() yfilter.YFilter { return ciisysobject.YFilter }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) SetFilter(yf yfilter.YFilter) { ciisysobject.YFilter = yf }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetGoName(yname string) string {
    if yname == "ciiSysVersion" { return "Ciisysversion" }
    if yname == "ciiSysType" { return "Ciisystype" }
    if yname == "ciiSysID" { return "Ciisysid" }
    if yname == "ciiSysMaxPathSplits" { return "Ciisysmaxpathsplits" }
    if yname == "ciiSysMaxLSPGenInt" { return "Ciisysmaxlspgenint" }
    if yname == "ciiSysPollESHelloRate" { return "Ciisyspolleshellorate" }
    if yname == "ciiSysWaitTime" { return "Ciisyswaittime" }
    if yname == "ciiSysAdminState" { return "Ciisysadminstate" }
    if yname == "ciiSysL2toL1Leaking" { return "Ciisysl2Tol1Leaking" }
    if yname == "ciiSysMaxAge" { return "Ciisysmaxage" }
    if yname == "ciiSysReceiveLSPBufferSize" { return "Ciisysreceivelspbuffersize" }
    return ""
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetSegmentPath() string {
    return "ciiSysObject"
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiSysVersion"] = ciisysobject.Ciisysversion
    leafs["ciiSysType"] = ciisysobject.Ciisystype
    leafs["ciiSysID"] = ciisysobject.Ciisysid
    leafs["ciiSysMaxPathSplits"] = ciisysobject.Ciisysmaxpathsplits
    leafs["ciiSysMaxLSPGenInt"] = ciisysobject.Ciisysmaxlspgenint
    leafs["ciiSysPollESHelloRate"] = ciisysobject.Ciisyspolleshellorate
    leafs["ciiSysWaitTime"] = ciisysobject.Ciisyswaittime
    leafs["ciiSysAdminState"] = ciisysobject.Ciisysadminstate
    leafs["ciiSysL2toL1Leaking"] = ciisysobject.Ciisysl2Tol1Leaking
    leafs["ciiSysMaxAge"] = ciisysobject.Ciisysmaxage
    leafs["ciiSysReceiveLSPBufferSize"] = ciisysobject.Ciisysreceivelspbuffersize
    return leafs
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetBundleName() string { return "cisco_ios_xe" }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetYangName() string { return "ciiSysObject" }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) SetParent(parent types.Entity) { ciisysobject.parent = parent }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetParent() types.Entity { return ciisysobject.parent }

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisysobject_Ciisystype represents replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_Ciisysobject_Ciisystype string

const (
    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level1IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level1IS"

    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level2IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level2IS"

    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level1L2IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level1L2IS"
)

// CISCOIETFISISMIB_Ciisysobject_Ciisysversion represents is implemented.
type CISCOIETFISISMIB_Ciisysobject_Ciisysversion string

const (
    CISCOIETFISISMIB_Ciisysobject_Ciisysversion_unknown CISCOIETFISISMIB_Ciisysobject_Ciisysversion = "unknown"

    CISCOIETFISISMIB_Ciisysobject_Ciisysversion_one CISCOIETFISISMIB_Ciisysobject_Ciisysversion = "one"
)

// CISCOIETFISISMIB_Ciicirc
type CISCOIETFISISMIB_Ciicirc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object is used to assign values to ciiCircIndex as described in
    // 'Textual Conventions for SNMPv2'.  The network manager reads this object,
    // and then writes the value back as the ciiCircIndex in a SET that creates a
    // new instance of ciiCircEntry.  If the SET fails with the code
    // 'inconsistentValue', then the process must be repeated; If the SET
    // succeeds, then the object is incremented, and the new ciiCircEntry is
    // created according to the manager's directions. The type is interface{} with
    // range: 0..4294967295.
    Ciinextcircindex interface{}
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetFilter() yfilter.YFilter { return ciicirc.YFilter }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) SetFilter(yf yfilter.YFilter) { ciicirc.YFilter = yf }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetGoName(yname string) string {
    if yname == "ciiNextCircIndex" { return "Ciinextcircindex" }
    return ""
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetSegmentPath() string {
    return "ciiCirc"
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiNextCircIndex"] = ciicirc.Ciinextcircindex
    return leafs
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetBundleName() string { return "cisco_ios_xe" }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetYangName() string { return "ciiCirc" }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) SetParent(parent types.Entity) { ciicirc.parent = parent }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetParent() types.Entity { return ciicirc.parent }

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciimanareaaddrtable
// The set of manual area addresses configured on this
// Intermediate System.
type CISCOIETFISISMIB_Ciimanareaaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one area address manually configured on this system.
    // The type is slice of
    // CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry.
    Ciimanareaaddrentry []CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetFilter() yfilter.YFilter { return ciimanareaaddrtable.YFilter }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) SetFilter(yf yfilter.YFilter) { ciimanareaaddrtable.YFilter = yf }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetGoName(yname string) string {
    if yname == "ciiManAreaAddrEntry" { return "Ciimanareaaddrentry" }
    return ""
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetSegmentPath() string {
    return "ciiManAreaAddrTable"
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiManAreaAddrEntry" {
        for _, c := range ciimanareaaddrtable.Ciimanareaaddrentry {
            if ciimanareaaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry{}
        ciimanareaaddrtable.Ciimanareaaddrentry = append(ciimanareaaddrtable.Ciimanareaaddrentry, child)
        return &ciimanareaaddrtable.Ciimanareaaddrentry[len(ciimanareaaddrtable.Ciimanareaaddrentry)-1]
    }
    return nil
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciimanareaaddrtable.Ciimanareaaddrentry {
        children[ciimanareaaddrtable.Ciimanareaaddrentry[i].GetSegmentPath()] = &ciimanareaaddrtable.Ciimanareaaddrentry[i]
    }
    return children
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetYangName() string { return "ciiManAreaAddrTable" }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) SetParent(parent types.Entity) { ciimanareaaddrtable.parent = parent }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetParent() types.Entity { return ciimanareaaddrtable.parent }

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry
// Each entry contains one area address manually configured
// on this system
type CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. A manually configured area address for this
    // system. This object follows the index behavior.  Note: an index for the
    // entry {1, {49.0001} active} in this table would be the ordered pair (1,
    // (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the
    // OID. The type is string with length: 0..20.
    Ciimanareaaddr interface{}

    // The state of the ciiManAreaAddrEntry. This object follows the Row Status
    // behavior. If the ciiSysAdminState for this Intermediate System is 'on', and
    // an attempt is made to set this object to the value 'destroy' or
    // 'notInService' when this is the only ciiManAreaAddrEntry in state 'active'
    // for this Intermediate System should return inconsistentValue. The type is
    // RowStatus.
    Ciimanareaaddrexiststate interface{}
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetFilter() yfilter.YFilter { return ciimanareaaddrentry.YFilter }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) SetFilter(yf yfilter.YFilter) { ciimanareaaddrentry.YFilter = yf }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetGoName(yname string) string {
    if yname == "ciiManAreaAddr" { return "Ciimanareaaddr" }
    if yname == "ciiManAreaAddrExistState" { return "Ciimanareaaddrexiststate" }
    return ""
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetSegmentPath() string {
    return "ciiManAreaAddrEntry" + "[ciiManAreaAddr='" + fmt.Sprintf("%v", ciimanareaaddrentry.Ciimanareaaddr) + "']"
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiManAreaAddr"] = ciimanareaaddrentry.Ciimanareaaddr
    leafs["ciiManAreaAddrExistState"] = ciimanareaaddrentry.Ciimanareaaddrexiststate
    return leafs
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetYangName() string { return "ciiManAreaAddrEntry" }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) SetParent(parent types.Entity) { ciimanareaaddrentry.parent = parent }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetParent() types.Entity { return ciimanareaaddrentry.parent }

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetParentYangName() string { return "ciiManAreaAddrTable" }

// CISCOIETFISISMIB_Ciiareaaddrtable
// The union of the sets of area addresses reported in all
// Level 1 LSPs with fragment number zero generated by this
// Intermediate System, or received from other Intermediate
// Systems which are reachable via Level 1 routing.
type CISCOIETFISISMIB_Ciiareaaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one area address reported in a Level 1 LSP generated or
    // received by this Intermediate System. The type is slice of
    // CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry.
    Ciiareaaddrentry []CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetFilter() yfilter.YFilter { return ciiareaaddrtable.YFilter }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) SetFilter(yf yfilter.YFilter) { ciiareaaddrtable.YFilter = yf }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetGoName(yname string) string {
    if yname == "ciiAreaAddrEntry" { return "Ciiareaaddrentry" }
    return ""
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetSegmentPath() string {
    return "ciiAreaAddrTable"
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiAreaAddrEntry" {
        for _, c := range ciiareaaddrtable.Ciiareaaddrentry {
            if ciiareaaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry{}
        ciiareaaddrtable.Ciiareaaddrentry = append(ciiareaaddrtable.Ciiareaaddrentry, child)
        return &ciiareaaddrtable.Ciiareaaddrentry[len(ciiareaaddrtable.Ciiareaaddrentry)-1]
    }
    return nil
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiareaaddrtable.Ciiareaaddrentry {
        children[ciiareaaddrtable.Ciiareaaddrentry[i].GetSegmentPath()] = &ciiareaaddrtable.Ciiareaaddrentry[i]
    }
    return children
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetYangName() string { return "ciiAreaAddrTable" }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) SetParent(parent types.Entity) { ciiareaaddrtable.parent = parent }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetParent() types.Entity { return ciiareaaddrtable.parent }

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry
// Each entry contains one area address reported in a
// Level 1 LSP generated or received by this Intermediate
// System.
type CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. An area address reported in a Level 1 LSP. The
    // type is string with length: 0..20.
    Ciiareaaddr interface{}
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetFilter() yfilter.YFilter { return ciiareaaddrentry.YFilter }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) SetFilter(yf yfilter.YFilter) { ciiareaaddrentry.YFilter = yf }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetGoName(yname string) string {
    if yname == "ciiAreaAddr" { return "Ciiareaaddr" }
    return ""
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetSegmentPath() string {
    return "ciiAreaAddrEntry" + "[ciiAreaAddr='" + fmt.Sprintf("%v", ciiareaaddrentry.Ciiareaaddr) + "']"
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiAreaAddr"] = ciiareaaddrentry.Ciiareaaddr
    return leafs
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetYangName() string { return "ciiAreaAddrEntry" }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) SetParent(parent types.Entity) { ciiareaaddrentry.parent = parent }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetParent() types.Entity { return ciiareaaddrentry.parent }

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetParentYangName() string { return "ciiAreaAddrTable" }

// CISCOIETFISISMIB_Ciisysprotsupptable
// This table contains the manually configured set of
// protocols supported by this Intermediate System.
type CISCOIETFISISMIB_Ciisysprotsupptable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by this Intermediate System. The
    // type is slice of CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry.
    Ciisysprotsuppentry []CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetFilter() yfilter.YFilter { return ciisysprotsupptable.YFilter }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) SetFilter(yf yfilter.YFilter) { ciisysprotsupptable.YFilter = yf }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetGoName(yname string) string {
    if yname == "ciiSysProtSuppEntry" { return "Ciisysprotsuppentry" }
    return ""
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetSegmentPath() string {
    return "ciiSysProtSuppTable"
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiSysProtSuppEntry" {
        for _, c := range ciisysprotsupptable.Ciisysprotsuppentry {
            if ciisysprotsupptable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry{}
        ciisysprotsupptable.Ciisysprotsuppentry = append(ciisysprotsupptable.Ciisysprotsuppentry, child)
        return &ciisysprotsupptable.Ciisysprotsuppentry[len(ciisysprotsupptable.Ciisysprotsuppentry)-1]
    }
    return nil
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciisysprotsupptable.Ciisysprotsuppentry {
        children[ciisysprotsupptable.Ciisysprotsuppentry[i].GetSegmentPath()] = &ciisysprotsupptable.Ciisysprotsuppentry[i]
    }
    return children
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetBundleName() string { return "cisco_ios_xe" }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetYangName() string { return "ciiSysProtSuppTable" }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) SetParent(parent types.Entity) { ciisysprotsupptable.parent = parent }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetParent() types.Entity { return ciisysprotsupptable.parent }

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry
// Each entry contains one protocol supported by
// this Intermediate System.
type CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. One supported protocol. This object follows the
    // index behavior. The type is CiiSupportedProtocol.
    Ciisysprotsuppprotocol interface{}

    // The state of the ciiSysProtSuppEntry. This object follows the RowStatus
    // behavior. The type is RowStatus.
    Ciisysprotsuppexiststate interface{}
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetFilter() yfilter.YFilter { return ciisysprotsuppentry.YFilter }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) SetFilter(yf yfilter.YFilter) { ciisysprotsuppentry.YFilter = yf }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetGoName(yname string) string {
    if yname == "ciiSysProtSuppProtocol" { return "Ciisysprotsuppprotocol" }
    if yname == "ciiSysProtSuppExistState" { return "Ciisysprotsuppexiststate" }
    return ""
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetSegmentPath() string {
    return "ciiSysProtSuppEntry" + "[ciiSysProtSuppProtocol='" + fmt.Sprintf("%v", ciisysprotsuppentry.Ciisysprotsuppprotocol) + "']"
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiSysProtSuppProtocol"] = ciisysprotsuppentry.Ciisysprotsuppprotocol
    leafs["ciiSysProtSuppExistState"] = ciisysprotsuppentry.Ciisysprotsuppexiststate
    return leafs
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetYangName() string { return "ciiSysProtSuppEntry" }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) SetParent(parent types.Entity) { ciisysprotsuppentry.parent = parent }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetParent() types.Entity { return ciisysprotsuppentry.parent }

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetParentYangName() string { return "ciiSysProtSuppTable" }

// CISCOIETFISISMIB_Ciisummaddrtable
// The set of IP summary addresses to use in forming
// summary TLVs originated by this Intermediate System.
// 
// An administrator may use a summary address to combine
// and modify IP Reachability announcements.  If the
// Intermediate system can reach any subset of the summary
// address, the summary address will be announced instead,
// at the configured metric.
type CISCOIETFISISMIB_Ciisummaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address. The type is slice of
    // CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry.
    Ciisummaddrentry []CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetFilter() yfilter.YFilter { return ciisummaddrtable.YFilter }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) SetFilter(yf yfilter.YFilter) { ciisummaddrtable.YFilter = yf }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetGoName(yname string) string {
    if yname == "ciiSummAddrEntry" { return "Ciisummaddrentry" }
    return ""
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetSegmentPath() string {
    return "ciiSummAddrTable"
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiSummAddrEntry" {
        for _, c := range ciisummaddrtable.Ciisummaddrentry {
            if ciisummaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry{}
        ciisummaddrtable.Ciisummaddrentry = append(ciisummaddrtable.Ciisummaddrentry, child)
        return &ciisummaddrtable.Ciisummaddrentry[len(ciisummaddrtable.Ciisummaddrentry)-1]
    }
    return nil
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciisummaddrtable.Ciisummaddrentry {
        children[ciisummaddrtable.Ciisummaddrentry[i].GetSegmentPath()] = &ciisummaddrtable.Ciisummaddrentry[i]
    }
    return children
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetYangName() string { return "ciiSummAddrTable" }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) SetParent(parent types.Entity) { ciisummaddrtable.parent = parent }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetParent() types.Entity { return ciisummaddrtable.parent }

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry
// Each entry contains one IP summary address.
type CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    Ciisummaddresstype interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    Ciisummaddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    Ciisummaddrprefixlen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    Ciisummaddrexiststate interface{}

    // The metric value to announce this summary address with in LSPs generated by
    // this system. The type is interface{} with range: 0..63.
    Ciisummaddrmetric interface{}

    // The wide metric value to announce this summary address with in LSPs
    // generated by this system. The type is interface{} with range:
    // 0..4294967295.
    Ciisummaddrfullmetric interface{}
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetFilter() yfilter.YFilter { return ciisummaddrentry.YFilter }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) SetFilter(yf yfilter.YFilter) { ciisummaddrentry.YFilter = yf }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetGoName(yname string) string {
    if yname == "ciiSummAddressType" { return "Ciisummaddresstype" }
    if yname == "ciiSummAddress" { return "Ciisummaddress" }
    if yname == "ciiSummAddrPrefixLen" { return "Ciisummaddrprefixlen" }
    if yname == "ciiSummAddrExistState" { return "Ciisummaddrexiststate" }
    if yname == "ciiSummAddrMetric" { return "Ciisummaddrmetric" }
    if yname == "ciiSummAddrFullMetric" { return "Ciisummaddrfullmetric" }
    return ""
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetSegmentPath() string {
    return "ciiSummAddrEntry" + "[ciiSummAddressType='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddresstype) + "']" + "[ciiSummAddress='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddress) + "']" + "[ciiSummAddrPrefixLen='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddrprefixlen) + "']"
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiSummAddressType"] = ciisummaddrentry.Ciisummaddresstype
    leafs["ciiSummAddress"] = ciisummaddrentry.Ciisummaddress
    leafs["ciiSummAddrPrefixLen"] = ciisummaddrentry.Ciisummaddrprefixlen
    leafs["ciiSummAddrExistState"] = ciisummaddrentry.Ciisummaddrexiststate
    leafs["ciiSummAddrMetric"] = ciisummaddrentry.Ciisummaddrmetric
    leafs["ciiSummAddrFullMetric"] = ciisummaddrentry.Ciisummaddrfullmetric
    return leafs
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetYangName() string { return "ciiSummAddrEntry" }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) SetParent(parent types.Entity) { ciisummaddrentry.parent = parent }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetParent() types.Entity { return ciisummaddrentry.parent }

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetParentYangName() string { return "ciiSummAddrTable" }

// CISCOIETFISISMIB_Ciiredistributeaddrtable
// This table provides criteria to decide if a route should
// be leaked from L2 to L1 when Domain Wide Prefix leaking is
// enabled.
// 
// Addresses that match the summary mask in the table will
// be announced at L1 by routers when ciiSysL2toL1Leaking
// is enabled.  Routes that fall into the ranges specified
// are announced as is, without being summarized.  Routes
// that do not match a summary mask are not announced.
type CISCOIETFISISMIB_Ciiredistributeaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address to manage leaking L2 addresses
    // into L1. The type is slice of
    // CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry.
    Ciiredistributeaddrentry []CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetFilter() yfilter.YFilter { return ciiredistributeaddrtable.YFilter }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) SetFilter(yf yfilter.YFilter) { ciiredistributeaddrtable.YFilter = yf }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetGoName(yname string) string {
    if yname == "ciiRedistributeAddrEntry" { return "Ciiredistributeaddrentry" }
    return ""
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetSegmentPath() string {
    return "ciiRedistributeAddrTable"
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiRedistributeAddrEntry" {
        for _, c := range ciiredistributeaddrtable.Ciiredistributeaddrentry {
            if ciiredistributeaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry{}
        ciiredistributeaddrtable.Ciiredistributeaddrentry = append(ciiredistributeaddrtable.Ciiredistributeaddrentry, child)
        return &ciiredistributeaddrtable.Ciiredistributeaddrentry[len(ciiredistributeaddrtable.Ciiredistributeaddrentry)-1]
    }
    return nil
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiredistributeaddrtable.Ciiredistributeaddrentry {
        children[ciiredistributeaddrtable.Ciiredistributeaddrentry[i].GetSegmentPath()] = &ciiredistributeaddrtable.Ciiredistributeaddrentry[i]
    }
    return children
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetYangName() string { return "ciiRedistributeAddrTable" }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) SetParent(parent types.Entity) { ciiredistributeaddrtable.parent = parent }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetParent() types.Entity { return ciiredistributeaddrtable.parent }

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry
// Each entry contains one IP summary address to
// manage leaking L2 addresses into L1.
type CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    Ciiredistributeaddrtype interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    Ciiredistributeaddraddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    Ciiredistributeaddrprefixlen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    Ciiredistributeaddrexiststate interface{}
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetFilter() yfilter.YFilter { return ciiredistributeaddrentry.YFilter }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) SetFilter(yf yfilter.YFilter) { ciiredistributeaddrentry.YFilter = yf }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetGoName(yname string) string {
    if yname == "ciiRedistributeAddrType" { return "Ciiredistributeaddrtype" }
    if yname == "ciiRedistributeAddrAddress" { return "Ciiredistributeaddraddress" }
    if yname == "ciiRedistributeAddrPrefixLen" { return "Ciiredistributeaddrprefixlen" }
    if yname == "ciiRedistributeAddrExistState" { return "Ciiredistributeaddrexiststate" }
    return ""
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetSegmentPath() string {
    return "ciiRedistributeAddrEntry" + "[ciiRedistributeAddrType='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddrtype) + "']" + "[ciiRedistributeAddrAddress='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddraddress) + "']" + "[ciiRedistributeAddrPrefixLen='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddrprefixlen) + "']"
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiRedistributeAddrType"] = ciiredistributeaddrentry.Ciiredistributeaddrtype
    leafs["ciiRedistributeAddrAddress"] = ciiredistributeaddrentry.Ciiredistributeaddraddress
    leafs["ciiRedistributeAddrPrefixLen"] = ciiredistributeaddrentry.Ciiredistributeaddrprefixlen
    leafs["ciiRedistributeAddrExistState"] = ciiredistributeaddrentry.Ciiredistributeaddrexiststate
    return leafs
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetYangName() string { return "ciiRedistributeAddrEntry" }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) SetParent(parent types.Entity) { ciiredistributeaddrentry.parent = parent }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetParent() types.Entity { return ciiredistributeaddrentry.parent }

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetParentYangName() string { return "ciiRedistributeAddrTable" }

// CISCOIETFISISMIB_Ciiroutertable
// The set of hostnames and router ID.
type CISCOIETFISISMIB_Ciiroutertable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry tracks information about one peer at one level. The type is
    // slice of CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry.
    Ciirouterentry []CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetFilter() yfilter.YFilter { return ciiroutertable.YFilter }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) SetFilter(yf yfilter.YFilter) { ciiroutertable.YFilter = yf }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetGoName(yname string) string {
    if yname == "ciiRouterEntry" { return "Ciirouterentry" }
    return ""
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetSegmentPath() string {
    return "ciiRouterTable"
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiRouterEntry" {
        for _, c := range ciiroutertable.Ciirouterentry {
            if ciiroutertable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry{}
        ciiroutertable.Ciirouterentry = append(ciiroutertable.Ciirouterentry, child)
        return &ciiroutertable.Ciirouterentry[len(ciiroutertable.Ciirouterentry)-1]
    }
    return nil
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiroutertable.Ciirouterentry {
        children[ciiroutertable.Ciirouterentry[i].GetSegmentPath()] = &ciiroutertable.Ciirouterentry[i]
    }
    return children
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetYangName() string { return "ciiRouterTable" }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) SetParent(parent types.Entity) { ciiroutertable.parent = parent }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetParent() types.Entity { return ciiroutertable.parent }

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry
// Each entry tracks information about one peer at
// one level.
type CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The System ID of the Router Peer. The type is
    // string with length: 6.
    Ciiroutersysid interface{}

    // This attribute is a key. The level of this Intermediate System. The type is
    // CiiISLevel.
    Ciirouterlevel interface{}

    // The hostname listed in LSP, or zero-length string if none. The type is
    // string.
    Ciirouterhostname interface{}

    // The Router ID of the Peer found in LSP, or zero if none. The type is
    // interface{} with range: 0..4294967295.
    Ciirouterid interface{}
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetFilter() yfilter.YFilter { return ciirouterentry.YFilter }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) SetFilter(yf yfilter.YFilter) { ciirouterentry.YFilter = yf }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetGoName(yname string) string {
    if yname == "ciiRouterSysID" { return "Ciiroutersysid" }
    if yname == "ciiRouterLevel" { return "Ciirouterlevel" }
    if yname == "ciiRouterHostName" { return "Ciirouterhostname" }
    if yname == "ciiRouterID" { return "Ciirouterid" }
    return ""
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetSegmentPath() string {
    return "ciiRouterEntry" + "[ciiRouterSysID='" + fmt.Sprintf("%v", ciirouterentry.Ciiroutersysid) + "']" + "[ciiRouterLevel='" + fmt.Sprintf("%v", ciirouterentry.Ciirouterlevel) + "']"
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiRouterSysID"] = ciirouterentry.Ciiroutersysid
    leafs["ciiRouterLevel"] = ciirouterentry.Ciirouterlevel
    leafs["ciiRouterHostName"] = ciirouterentry.Ciirouterhostname
    leafs["ciiRouterID"] = ciirouterentry.Ciirouterid
    return leafs
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetYangName() string { return "ciiRouterEntry" }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) SetParent(parent types.Entity) { ciirouterentry.parent = parent }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetParent() types.Entity { return ciirouterentry.parent }

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetParentYangName() string { return "ciiRouterTable" }

// CISCOIETFISISMIB_Ciisysleveltable
// Level specific information about the System.
type CISCOIETFISISMIB_Ciisysleveltable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Describe variables defined for Area or Domain. The type is slice of
    // CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry.
    Ciisyslevelentry []CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetFilter() yfilter.YFilter { return ciisysleveltable.YFilter }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) SetFilter(yf yfilter.YFilter) { ciisysleveltable.YFilter = yf }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetGoName(yname string) string {
    if yname == "ciiSysLevelEntry" { return "Ciisyslevelentry" }
    return ""
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetSegmentPath() string {
    return "ciiSysLevelTable"
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiSysLevelEntry" {
        for _, c := range ciisysleveltable.Ciisyslevelentry {
            if ciisysleveltable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry{}
        ciisysleveltable.Ciisyslevelentry = append(ciisysleveltable.Ciisyslevelentry, child)
        return &ciisysleveltable.Ciisyslevelentry[len(ciisysleveltable.Ciisyslevelentry)-1]
    }
    return nil
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciisysleveltable.Ciisyslevelentry {
        children[ciisysleveltable.Ciisyslevelentry[i].GetSegmentPath()] = &ciisysleveltable.Ciisyslevelentry[i]
    }
    return children
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetBundleName() string { return "cisco_ios_xe" }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetYangName() string { return "ciiSysLevelTable" }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) SetParent(parent types.Entity) { ciisysleveltable.parent = parent }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetParent() types.Entity { return ciisysleveltable.parent }

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry
// Describe variables defined for Area or Domain.
type CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // Ciisyslevelindex.
    Ciisyslevelindex interface{}

    // The maximum size of LSPs and SNPs originated by this Intermediate System at
    // this level. This object follows the replaceOnlyWhileDisabled behavior. The
    // type is interface{} with range: 512..16000.
    Ciisysleveloriglspbuffsize interface{}

    // Minimum interval, in seconds, between successive generation of LSPs with
    // the same LSPID at this level by this Intermediate System.  This object
    // follows the resettingTimer behavior. The type is interface{} with range:
    // 1..65535. Units are seconds.
    Ciisyslevelminlspgenint interface{}

    // The state of the database at this level. The value 'off' indicates that
    // IS-IS is not active at this level. The value 'on' indicates that IS-IS is
    // active at this level, and not overloaded. The value 'waiting' indicates a
    // database that is low on an essential resource, such as memory. The
    // administrator may force the state to 'overloaded' by setting the object
    // ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we
    // originate LSPs with the Overload bit set. The type is CiiLevelState.
    Ciisysleveloverloadstate interface{}

    // Administratively set the overload bit for the level. The overload bit will
    // continue to be set if the implementation runs out of memory, independent of
    // this variable. The type is bool.
    Ciisyslevelsetoverload interface{}

    // If set, the overload bit should be set, and cleared after sysUpTime exceeds
    // this value. The type is interface{} with range: 0..4294967295.
    Ciisyslevelsetoverloaduntil interface{}

    // Which style of Metric do we generate in our LSPs at this level? This object
    // follows the replaceOnlyWhileDisabled behavior. The type is CiiMetricStyle.
    Ciisyslevelmetricstyle interface{}

    // Which style of Metric do we consider in our SPF computation at this level?.
    // The type is CiiMetricStyle.
    Ciisyslevelspfconsiders interface{}

    // Do we do Traffic Engineering at this level?. The type is bool.
    Ciisyslevelteenabled interface{}
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetFilter() yfilter.YFilter { return ciisyslevelentry.YFilter }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) SetFilter(yf yfilter.YFilter) { ciisyslevelentry.YFilter = yf }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetGoName(yname string) string {
    if yname == "ciiSysLevelIndex" { return "Ciisyslevelindex" }
    if yname == "ciiSysLevelOrigLSPBuffSize" { return "Ciisysleveloriglspbuffsize" }
    if yname == "ciiSysLevelMinLSPGenInt" { return "Ciisyslevelminlspgenint" }
    if yname == "ciiSysLevelOverloadState" { return "Ciisysleveloverloadstate" }
    if yname == "ciiSysLevelSetOverload" { return "Ciisyslevelsetoverload" }
    if yname == "ciiSysLevelSetOverloadUntil" { return "Ciisyslevelsetoverloaduntil" }
    if yname == "ciiSysLevelMetricStyle" { return "Ciisyslevelmetricstyle" }
    if yname == "ciiSysLevelSPFConsiders" { return "Ciisyslevelspfconsiders" }
    if yname == "ciiSysLevelTEEnabled" { return "Ciisyslevelteenabled" }
    return ""
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetSegmentPath() string {
    return "ciiSysLevelEntry" + "[ciiSysLevelIndex='" + fmt.Sprintf("%v", ciisyslevelentry.Ciisyslevelindex) + "']"
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiSysLevelIndex"] = ciisyslevelentry.Ciisyslevelindex
    leafs["ciiSysLevelOrigLSPBuffSize"] = ciisyslevelentry.Ciisysleveloriglspbuffsize
    leafs["ciiSysLevelMinLSPGenInt"] = ciisyslevelentry.Ciisyslevelminlspgenint
    leafs["ciiSysLevelOverloadState"] = ciisyslevelentry.Ciisysleveloverloadstate
    leafs["ciiSysLevelSetOverload"] = ciisyslevelentry.Ciisyslevelsetoverload
    leafs["ciiSysLevelSetOverloadUntil"] = ciisyslevelentry.Ciisyslevelsetoverloaduntil
    leafs["ciiSysLevelMetricStyle"] = ciisyslevelentry.Ciisyslevelmetricstyle
    leafs["ciiSysLevelSPFConsiders"] = ciisyslevelentry.Ciisyslevelspfconsiders
    leafs["ciiSysLevelTEEnabled"] = ciisyslevelentry.Ciisyslevelteenabled
    return leafs
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetYangName() string { return "ciiSysLevelEntry" }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) SetParent(parent types.Entity) { ciisyslevelentry.parent = parent }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetParent() types.Entity { return ciisyslevelentry.parent }

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetParentYangName() string { return "ciiSysLevelTable" }

// CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex represents The level that this entry describes.
type CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex string

const (
    CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex_level1IS CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex = "level1IS"

    CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex_level2IS CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex = "level2IS"
)

// CISCOIETFISISMIB_Ciicirctable
// The table of circuits used by this
// Intermediate System.
type CISCOIETFISISMIB_Ciicirctable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An ciiCircEntry exists for each circuit used by Integrated IS-IS on this
    // system. The type is slice of CISCOIETFISISMIB_Ciicirctable_Ciicircentry.
    Ciicircentry []CISCOIETFISISMIB_Ciicirctable_Ciicircentry
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetFilter() yfilter.YFilter { return ciicirctable.YFilter }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) SetFilter(yf yfilter.YFilter) { ciicirctable.YFilter = yf }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetGoName(yname string) string {
    if yname == "ciiCircEntry" { return "Ciicircentry" }
    return ""
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetSegmentPath() string {
    return "ciiCircTable"
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiCircEntry" {
        for _, c := range ciicirctable.Ciicircentry {
            if ciicirctable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciicirctable_Ciicircentry{}
        ciicirctable.Ciicircentry = append(ciicirctable.Ciicircentry, child)
        return &ciicirctable.Ciicircentry[len(ciicirctable.Ciicircentry)-1]
    }
    return nil
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciicirctable.Ciicircentry {
        children[ciicirctable.Ciicircentry[i].GetSegmentPath()] = &ciicirctable.Ciicircentry[i]
    }
    return children
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetBundleName() string { return "cisco_ios_xe" }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetYangName() string { return "ciiCircTable" }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) SetParent(parent types.Entity) { ciicirctable.parent = parent }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetParent() types.Entity { return ciicirctable.parent }

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry
// An ciiCircEntry exists for each circuit used by
// Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The identifier of this circuit, unique within the
    // Intermediate System.  This object follows the index behavior.  This is for
    // SNMP Indexing purposes only and need not have any relation to any protocol
    // value. The type is interface{} with range: 1..2147483647.
    Ciicircindex interface{}

    // The value of ifIndex for the interface to which this circuit corresponds.  
    // This object cannot be modified after creation. The type is interface{} with
    // range: 1..2147483647.
    Ciicircifindex interface{}

    // A specifier for the part of the interface ifIndex to which this circuit
    // corresponds, such as a DLCI or VPI/VCI. This object cannot be modified
    // after creation. The type is interface{} with range:
    // -2147483648..2147483647.
    Ciicircifsubindex interface{}

    // The administrative state of the circuit. This object follows the
    // CiiAdminState behavior. The type is CiiAdminState.
    Ciicircadminstate interface{}

    // The existence state of this circuit. This object follows the RowStatus
    // behavior.  Setting the state to 'notInService' halts the generation and
    // processing of IS-IS protocol PDUs on this circuit.  Setting the state to
    // 'destroy' will also erase any configuration associated with the circuit.
    // The type is RowStatus.
    Ciicircexiststate interface{}

    // The type of the circuit. This object follows the replaceOnlyWhileDisabled
    // behavior. The type specified must be compatible with the type of the
    // interface defined by the value of ciiCircIfIndex. The type is Ciicirctype.
    Ciicirctype interface{}

    // If true, suppress normal transmission of and interpretation of Intra-domain
    // IS-IS PDUs on this circuit. The type is bool.
    Ciicircextdomain interface{}

    // Indicates which type of packets will be sent and accepted on this circuit.
    // The values used will be modified by the settings of ciiSysType. This object
    // follows the replaceOnlyWhileDisabled behavior. The type is Ciicirclevel.
    Ciicirclevel interface{}

    // Should we include this interface in LSPs, even if it is not running the
    // IS-IS Protocol?. The type is bool.
    Ciicircpassivecircuit interface{}

    // Is this port a member of a mesh group, or blocked? Circuits in the same
    // mesh group act as a virtual multiaccess network.  LSPs seen on one circuit
    // in a mesh group will not be flooded to another circuit in the same mesh
    // group. The type is Ciicircmeshgroupenabled.
    Ciicircmeshgroupenabled interface{}

    // Circuits in the same mesh group act as a virtual multiaccess network.  LSPs
    // seen on one circuit in a mesh group will not be flooded to another circuit
    // in the same mesh group.  If ciiCircMeshGroupEnabled is inactive or blocked,
    // this value is ignored. The type is interface{} with range: 0..4294967295.
    Ciicircmeshgroup interface{}

    // Can we send unpadded hellos on LAN circuits?  'false' means LAN Hellos must
    // be padded. Implementations should allow the administrator to read this
    // value.  An implementation need not be able to support unpadded hellos to be
    // conformant. The type is bool.
    Ciicircsmallhellos interface{}

    // If the circuit is enabled, the value of sysUpTime when ciiCircAdminState
    // most recently entered the state 'on'.  If the circuit is not 'on', the
    // value of sysUpTime when the circuit last entered state 'on', 0 if the
    // circuit has never been 'on'. The type is interface{} with range:
    // 0..4294967295.
    Ciicirclastuptime interface{}

    // Is this circuit enabled to run 3Way handshake?. The type is bool.
    Ciicirc3Wayenabled interface{}

    // The value to be used as the extended circuit ID in 3Way handshake.  This
    // value is only used if ciiCirc3WayEnabled is true, and must be unique across
    // all circuits on this IS. The type is interface{} with range: 0..4294967295.
    Ciicircextendedcircid interface{}
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetFilter() yfilter.YFilter { return ciicircentry.YFilter }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) SetFilter(yf yfilter.YFilter) { ciicircentry.YFilter = yf }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiCircIfIndex" { return "Ciicircifindex" }
    if yname == "ciiCircIfSubIndex" { return "Ciicircifsubindex" }
    if yname == "ciiCircAdminState" { return "Ciicircadminstate" }
    if yname == "ciiCircExistState" { return "Ciicircexiststate" }
    if yname == "ciiCircType" { return "Ciicirctype" }
    if yname == "ciiCircExtDomain" { return "Ciicircextdomain" }
    if yname == "ciiCircLevel" { return "Ciicirclevel" }
    if yname == "ciiCircPassiveCircuit" { return "Ciicircpassivecircuit" }
    if yname == "ciiCircMeshGroupEnabled" { return "Ciicircmeshgroupenabled" }
    if yname == "ciiCircMeshGroup" { return "Ciicircmeshgroup" }
    if yname == "ciiCircSmallHellos" { return "Ciicircsmallhellos" }
    if yname == "ciiCircLastUpTime" { return "Ciicirclastuptime" }
    if yname == "ciiCirc3WayEnabled" { return "Ciicirc3Wayenabled" }
    if yname == "ciiCircExtendedCircID" { return "Ciicircextendedcircid" }
    return ""
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetSegmentPath() string {
    return "ciiCircEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicircentry.Ciicircindex) + "']"
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciicircentry.Ciicircindex
    leafs["ciiCircIfIndex"] = ciicircentry.Ciicircifindex
    leafs["ciiCircIfSubIndex"] = ciicircentry.Ciicircifsubindex
    leafs["ciiCircAdminState"] = ciicircentry.Ciicircadminstate
    leafs["ciiCircExistState"] = ciicircentry.Ciicircexiststate
    leafs["ciiCircType"] = ciicircentry.Ciicirctype
    leafs["ciiCircExtDomain"] = ciicircentry.Ciicircextdomain
    leafs["ciiCircLevel"] = ciicircentry.Ciicirclevel
    leafs["ciiCircPassiveCircuit"] = ciicircentry.Ciicircpassivecircuit
    leafs["ciiCircMeshGroupEnabled"] = ciicircentry.Ciicircmeshgroupenabled
    leafs["ciiCircMeshGroup"] = ciicircentry.Ciicircmeshgroup
    leafs["ciiCircSmallHellos"] = ciicircentry.Ciicircsmallhellos
    leafs["ciiCircLastUpTime"] = ciicircentry.Ciicirclastuptime
    leafs["ciiCirc3WayEnabled"] = ciicircentry.Ciicirc3Wayenabled
    leafs["ciiCircExtendedCircID"] = ciicircentry.Ciicircextendedcircid
    return leafs
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetYangName() string { return "ciiCircEntry" }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) SetParent(parent types.Entity) { ciicircentry.parent = parent }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetParent() types.Entity { return ciicircentry.parent }

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetParentYangName() string { return "ciiCircTable" }

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel represents object follows the replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level1 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level1"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level2 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level2"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level1L2 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level1L2"
)

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled represents in the same mesh group.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_inactive CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "inactive"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_blocked CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "blocked"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_set CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "set"
)

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype represents by the value of ciiCircIfIndex.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_broadcast CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "broadcast"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_ptToPt CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "ptToPt"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_staticIn CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "staticIn"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_staticOut CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "staticOut"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_dA CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "dA"
)

// CISCOIETFISISMIB_Ciicircleveltable
// Level specific information about circuits used by IS-IS
type CISCOIETFISISMIB_Ciicircleveltable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An ciiCircLevelEntry exists for each level on each circuit used by
    // Integrated IS-IS on this system. The type is slice of
    // CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry.
    Ciicirclevelentry []CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetFilter() yfilter.YFilter { return ciicircleveltable.YFilter }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) SetFilter(yf yfilter.YFilter) { ciicircleveltable.YFilter = yf }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetGoName(yname string) string {
    if yname == "ciiCircLevelEntry" { return "Ciicirclevelentry" }
    return ""
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetSegmentPath() string {
    return "ciiCircLevelTable"
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiCircLevelEntry" {
        for _, c := range ciicircleveltable.Ciicirclevelentry {
            if ciicircleveltable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry{}
        ciicircleveltable.Ciicirclevelentry = append(ciicircleveltable.Ciicirclevelentry, child)
        return &ciicircleveltable.Ciicirclevelentry[len(ciicircleveltable.Ciicirclevelentry)-1]
    }
    return nil
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciicircleveltable.Ciicirclevelentry {
        children[ciicircleveltable.Ciicirclevelentry[i].GetSegmentPath()] = &ciicircleveltable.Ciicirclevelentry[i]
    }
    return children
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetBundleName() string { return "cisco_ios_xe" }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetYangName() string { return "ciiCircLevelTable" }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) SetParent(parent types.Entity) { ciicircleveltable.parent = parent }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetParent() types.Entity { return ciicircleveltable.parent }

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry
// An ciiCircLevelEntry exists for each level on
// each circuit used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The level that this entry describes. The type is
    // Ciicirclevelindex.
    Ciicirclevelindex interface{}

    // The metric value of this circuit for this level. The type is interface{}
    // with range: 0..63.
    Ciicirclevelmetric interface{}

    // The wide metric value of this circuit for this level. The type is
    // interface{} with range: 0..16777215.
    Ciicirclevelwidemetric interface{}

    // The priority for becoming LAN Designated Intermediate System at this level.
    // The type is interface{} with range: 0..127.
    Ciicirclevelispriority interface{}

    // A one byte identifier that can be used in protocol packets to identify a
    // circuit.  Values of ciiCircLevelIDOctet do not need to be unique.  They are
    // only required to differ on LANs where the Intermediate System is the
    // Designated Intermediate System. The type is interface{} with range: 0..255.
    Ciicirclevelidoctet interface{}

    // On a point to point circuit with a fully initialized adjacency to a peer
    // IS, the value of this object is the circuit ID negotiated during adjacency
    // initialization. On a point to point circuit without such an adjacency, the
    // value is the concatenation of the local system ID and the one byte
    // ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed
    // for the circuit ID.  On other circuit types, the value returned is the zero
    // length OCTET STRING. The type is string with length: 0 | 7.
    Ciicirclevelid interface{}

    // The ID of the LAN Designated Intermediate System on this circuit at this
    // level. If, for any reason, this system is not partaking in the relevant
    // Designated Intermediate System election process, then the value returned is
    // the zero length OCTET STRING. The type is string with length: 0 | 7.
    Ciicircleveldesis interface{}

    // This value is multiplied by the corresponding HelloTimer and the result in
    // seconds (rounded up) is used as the holding time in transmitted hellos, to
    // be used by receivers of hello packets from this IS. The type is interface{}
    // with range: 2..100.
    Ciicirclevelhellomultiplier interface{}

    // Maximum period, in milliseconds, between IIH PDUs on multiaccess networks
    // at this level for LANs. The value at L1 is used as the period between
    // Hellos on L1L2 point to point circuits.  Setting this value at level 2 on
    // an L1L2 point to point circuit will result in an error of
    // InconsistentValue.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 10..600000. Units are milliseconds.
    Ciicirclevelhellotimer interface{}

    // Period, in milliseconds, between Hello PDUs on multiaccess networks when
    // this IS is the Designated Intermediate System.  This object follows the
    // resettingTimer behavior. The type is interface{} with range: 10..120000.
    // Units are milliseconds.
    Ciicircleveldrhellotimer interface{}

    // Minimal interval of time, in milliseconds, between transmissions of LSPs on
    // an interface at this level. The type is interface{} with range: 1..65535.
    // Units are milliseconds.
    Ciicirclevellspthrottle interface{}

    // Minimum interval, in seconds, between re-transmission of an LSP at this
    // level. This object follows the resettingTimer behavior.  Note that
    // ciiCircLevelLSPThrottle controls how fast we send back to back LSPs.  This
    // variable controls how fast we re-send the same LSP. The type is interface{}
    // with range: 1..300. Units are seconds.
    Ciicirclevelminlspretransint interface{}

    // Interval of time, in seconds, between periodic transmission of a complete
    // set of CSNPs on multiaccess networks if this router is the designated
    // router at this level.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 1..600. Units are seconds.
    Ciicirclevelcsnpinterval interface{}

    // Minimum interval in seconds between sending Partial Sequence Number PDUs at
    // this level. This object follows the resettingTimer behavior. The type is
    // interface{} with range: 1..120. Units are seconds.
    Ciicirclevelpartsnpinterval interface{}
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetFilter() yfilter.YFilter { return ciicirclevelentry.YFilter }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) SetFilter(yf yfilter.YFilter) { ciicirclevelentry.YFilter = yf }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiCircLevelIndex" { return "Ciicirclevelindex" }
    if yname == "ciiCircLevelMetric" { return "Ciicirclevelmetric" }
    if yname == "ciiCircLevelWideMetric" { return "Ciicirclevelwidemetric" }
    if yname == "ciiCircLevelISPriority" { return "Ciicirclevelispriority" }
    if yname == "ciiCircLevelIDOctet" { return "Ciicirclevelidoctet" }
    if yname == "ciiCircLevelID" { return "Ciicirclevelid" }
    if yname == "ciiCircLevelDesIS" { return "Ciicircleveldesis" }
    if yname == "ciiCircLevelHelloMultiplier" { return "Ciicirclevelhellomultiplier" }
    if yname == "ciiCircLevelHelloTimer" { return "Ciicirclevelhellotimer" }
    if yname == "ciiCircLevelDRHelloTimer" { return "Ciicircleveldrhellotimer" }
    if yname == "ciiCircLevelLSPThrottle" { return "Ciicirclevellspthrottle" }
    if yname == "ciiCircLevelMinLSPRetransInt" { return "Ciicirclevelminlspretransint" }
    if yname == "ciiCircLevelCSNPInterval" { return "Ciicirclevelcsnpinterval" }
    if yname == "ciiCircLevelPartSNPInterval" { return "Ciicirclevelpartsnpinterval" }
    return ""
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetSegmentPath() string {
    return "ciiCircLevelEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicirclevelentry.Ciicircindex) + "']" + "[ciiCircLevelIndex='" + fmt.Sprintf("%v", ciicirclevelentry.Ciicirclevelindex) + "']"
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciicirclevelentry.Ciicircindex
    leafs["ciiCircLevelIndex"] = ciicirclevelentry.Ciicirclevelindex
    leafs["ciiCircLevelMetric"] = ciicirclevelentry.Ciicirclevelmetric
    leafs["ciiCircLevelWideMetric"] = ciicirclevelentry.Ciicirclevelwidemetric
    leafs["ciiCircLevelISPriority"] = ciicirclevelentry.Ciicirclevelispriority
    leafs["ciiCircLevelIDOctet"] = ciicirclevelentry.Ciicirclevelidoctet
    leafs["ciiCircLevelID"] = ciicirclevelentry.Ciicirclevelid
    leafs["ciiCircLevelDesIS"] = ciicirclevelentry.Ciicircleveldesis
    leafs["ciiCircLevelHelloMultiplier"] = ciicirclevelentry.Ciicirclevelhellomultiplier
    leafs["ciiCircLevelHelloTimer"] = ciicirclevelentry.Ciicirclevelhellotimer
    leafs["ciiCircLevelDRHelloTimer"] = ciicirclevelentry.Ciicircleveldrhellotimer
    leafs["ciiCircLevelLSPThrottle"] = ciicirclevelentry.Ciicirclevellspthrottle
    leafs["ciiCircLevelMinLSPRetransInt"] = ciicirclevelentry.Ciicirclevelminlspretransint
    leafs["ciiCircLevelCSNPInterval"] = ciicirclevelentry.Ciicirclevelcsnpinterval
    leafs["ciiCircLevelPartSNPInterval"] = ciicirclevelentry.Ciicirclevelpartsnpinterval
    return leafs
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetYangName() string { return "ciiCircLevelEntry" }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) SetParent(parent types.Entity) { ciicirclevelentry.parent = parent }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetParent() types.Entity { return ciicirclevelentry.parent }

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetParentYangName() string { return "ciiCircLevelTable" }

// CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex represents The level that this entry describes.
type CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex string

const (
    CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex_level1IS CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex = "level1IS"

    CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex_level2IS CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex = "level2IS"
)

// CISCOIETFISISMIB_Ciisystemcountertable
// System wide counters for this Intermediate System.
type CISCOIETFISISMIB_Ciisystemcountertable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // System-wide IS-IS counters. The type is slice of
    // CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry.
    Ciisystemcounterentry []CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetFilter() yfilter.YFilter { return ciisystemcountertable.YFilter }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) SetFilter(yf yfilter.YFilter) { ciisystemcountertable.YFilter = yf }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetGoName(yname string) string {
    if yname == "ciiSystemCounterEntry" { return "Ciisystemcounterentry" }
    return ""
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetSegmentPath() string {
    return "ciiSystemCounterTable"
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiSystemCounterEntry" {
        for _, c := range ciisystemcountertable.Ciisystemcounterentry {
            if ciisystemcountertable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry{}
        ciisystemcountertable.Ciisystemcounterentry = append(ciisystemcountertable.Ciisystemcounterentry, child)
        return &ciisystemcountertable.Ciisystemcounterentry[len(ciisystemcountertable.Ciisystemcounterentry)-1]
    }
    return nil
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciisystemcountertable.Ciisystemcounterentry {
        children[ciisystemcountertable.Ciisystemcounterentry[i].GetSegmentPath()] = &ciisystemcountertable.Ciisystemcounterentry[i]
    }
    return children
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetBundleName() string { return "cisco_ios_xe" }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetYangName() string { return "ciiSystemCounterTable" }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) SetParent(parent types.Entity) { ciisystemcountertable.parent = parent }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetParent() types.Entity { return ciisystemcountertable.parent }

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry
// System-wide IS-IS counters.
type CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // Ciisysstatlevel.
    Ciisysstatlevel interface{}

    // Number of corrupted in-memory LSP frames detected.  LSPs received from the
    // wire with a bad checksum are silently dropped and not counted.  LSPs
    // received from the wire with parse errors are counted by
    // ciiSysStatLSPErrors. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatcorrlsps interface{}

    // The number of frames with authentication type mismatches recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatauthtypefails interface{}

    // The number of frames with authentication failures recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatauthfails interface{}

    // Number of times the LSP database has become overloaded. The type is
    // interface{} with range: 0..4294967295.
    Ciisysstatlspdbaseoloads interface{}

    // Number of times a manual address has been dropped from the area. The type
    // is interface{} with range: 0..4294967295.
    Ciisysstatmanaddrdropfromareas interface{}

    // Number of times the IS has attempted to exceed the maximum sequence number.
    // The type is interface{} with range: 0..4294967295.
    Ciisysstatattmpttoexmaxseqnums interface{}

    // Number of times a sequence number skip has occurred. The type is
    // interface{} with range: 0..4294967295.
    Ciisysstatseqnumskips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. The type is interface{} with range: 0..4294967295.
    Ciisysstatownlsppurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length to that of the receiving system. The type is interface{} with range:
    // 0..4294967295. Units are frames.
    Ciisysstatidfieldlenmismatches interface{}

    // Partition changes. The type is interface{} with range: 0..4294967295.
    Ciisysstatpartchanges interface{}

    // Number of times we ran SPF at this level. The type is interface{} with
    // range: 0..4294967295.
    Ciisysstatspfruns interface{}

    // Number of LSP frames with errors we have received. The type is interface{}
    // with range: 0..4294967295. Units are frames.
    Ciisysstatlsperrors interface{}
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetFilter() yfilter.YFilter { return ciisystemcounterentry.YFilter }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) SetFilter(yf yfilter.YFilter) { ciisystemcounterentry.YFilter = yf }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetGoName(yname string) string {
    if yname == "ciiSysStatLevel" { return "Ciisysstatlevel" }
    if yname == "ciiSysStatCorrLSPs" { return "Ciisysstatcorrlsps" }
    if yname == "ciiSysStatAuthTypeFails" { return "Ciisysstatauthtypefails" }
    if yname == "ciiSysStatAuthFails" { return "Ciisysstatauthfails" }
    if yname == "ciiSysStatLSPDbaseOloads" { return "Ciisysstatlspdbaseoloads" }
    if yname == "ciiSysStatManAddrDropFromAreas" { return "Ciisysstatmanaddrdropfromareas" }
    if yname == "ciiSysStatAttmptToExMaxSeqNums" { return "Ciisysstatattmpttoexmaxseqnums" }
    if yname == "ciiSysStatSeqNumSkips" { return "Ciisysstatseqnumskips" }
    if yname == "ciiSysStatOwnLSPPurges" { return "Ciisysstatownlsppurges" }
    if yname == "ciiSysStatIDFieldLenMismatches" { return "Ciisysstatidfieldlenmismatches" }
    if yname == "ciiSysStatPartChanges" { return "Ciisysstatpartchanges" }
    if yname == "ciiSysStatSPFRuns" { return "Ciisysstatspfruns" }
    if yname == "ciiSysStatLSPErrors" { return "Ciisysstatlsperrors" }
    return ""
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetSegmentPath() string {
    return "ciiSystemCounterEntry" + "[ciiSysStatLevel='" + fmt.Sprintf("%v", ciisystemcounterentry.Ciisysstatlevel) + "']"
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiSysStatLevel"] = ciisystemcounterentry.Ciisysstatlevel
    leafs["ciiSysStatCorrLSPs"] = ciisystemcounterentry.Ciisysstatcorrlsps
    leafs["ciiSysStatAuthTypeFails"] = ciisystemcounterentry.Ciisysstatauthtypefails
    leafs["ciiSysStatAuthFails"] = ciisystemcounterentry.Ciisysstatauthfails
    leafs["ciiSysStatLSPDbaseOloads"] = ciisystemcounterentry.Ciisysstatlspdbaseoloads
    leafs["ciiSysStatManAddrDropFromAreas"] = ciisystemcounterentry.Ciisysstatmanaddrdropfromareas
    leafs["ciiSysStatAttmptToExMaxSeqNums"] = ciisystemcounterentry.Ciisysstatattmpttoexmaxseqnums
    leafs["ciiSysStatSeqNumSkips"] = ciisystemcounterentry.Ciisysstatseqnumskips
    leafs["ciiSysStatOwnLSPPurges"] = ciisystemcounterentry.Ciisysstatownlsppurges
    leafs["ciiSysStatIDFieldLenMismatches"] = ciisystemcounterentry.Ciisysstatidfieldlenmismatches
    leafs["ciiSysStatPartChanges"] = ciisystemcounterentry.Ciisysstatpartchanges
    leafs["ciiSysStatSPFRuns"] = ciisystemcounterentry.Ciisysstatspfruns
    leafs["ciiSysStatLSPErrors"] = ciisystemcounterentry.Ciisysstatlsperrors
    return leafs
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetYangName() string { return "ciiSystemCounterEntry" }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) SetParent(parent types.Entity) { ciisystemcounterentry.parent = parent }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetParent() types.Entity { return ciisystemcounterentry.parent }

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetParentYangName() string { return "ciiSystemCounterTable" }

// CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel represents The level that this entry describes.
type CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel string

const (
    CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel_level1IS CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel = "level1IS"

    CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel_level2IS CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel = "level2IS"
)

// CISCOIETFISISMIB_Ciicircuitcountertable
// Circuit specific counters for this
// Intermediate System.
type CISCOIETFISISMIB_Ciicircuitcountertable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // An ciiCircuitCounterEntry exists for each circuit used by Integrated IS-IS
    // on this system. The type is slice of
    // CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry.
    Ciicircuitcounterentry []CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetFilter() yfilter.YFilter { return ciicircuitcountertable.YFilter }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) SetFilter(yf yfilter.YFilter) { ciicircuitcountertable.YFilter = yf }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetGoName(yname string) string {
    if yname == "ciiCircuitCounterEntry" { return "Ciicircuitcounterentry" }
    return ""
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetSegmentPath() string {
    return "ciiCircuitCounterTable"
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiCircuitCounterEntry" {
        for _, c := range ciicircuitcountertable.Ciicircuitcounterentry {
            if ciicircuitcountertable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry{}
        ciicircuitcountertable.Ciicircuitcounterentry = append(ciicircuitcountertable.Ciicircuitcounterentry, child)
        return &ciicircuitcountertable.Ciicircuitcounterentry[len(ciicircuitcountertable.Ciicircuitcounterentry)-1]
    }
    return nil
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciicircuitcountertable.Ciicircuitcounterentry {
        children[ciicircuitcountertable.Ciicircuitcounterentry[i].GetSegmentPath()] = &ciicircuitcountertable.Ciicircuitcounterentry[i]
    }
    return children
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetBundleName() string { return "cisco_ios_xe" }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetYangName() string { return "ciiCircuitCounterTable" }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) SetParent(parent types.Entity) { ciicircuitcountertable.parent = parent }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetParent() types.Entity { return ciicircuitcountertable.parent }

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry
// An ciiCircuitCounterEntry exists for each circuit
// used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. What type of circuit saw these counts?  The point
    // to point Hello PDU includes both L1 and L2, and ISs form a single adjacency
    // on point to point links. Thus we combine counts on point to point links
    // into one group. The type is Ciicircuittype.
    Ciicircuittype interface{}

    // The number of times an adjacency state change has occurred on this circuit.
    // The type is interface{} with range: 0..4294967295.
    Ciicircadjchanges interface{}

    // The number of adjacencies on this circuit. The type is interface{} with
    // range: 0..4294967295.
    Ciicircnumadj interface{}

    // The number of times initialization of this circuit has failed.  This counts
    // events such as PPP NCP failures. Failures to form an adjacency are counted
    // by ciiCircRejAdjs. The type is interface{} with range: 0..4294967295.
    Ciicircinitfails interface{}

    // The number of times an adjacency has been rejected on this circuit. The
    // type is interface{} with range: 0..4294967295.
    Ciicircrejadjs interface{}

    // The number of times an IS-IS control PDU with an ID field length different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    Ciicircidfieldlenmismatches interface{}

    // The number of times an IS-IS control PDU with a max area address field
    // different to that for this system has been received. The type is
    // interface{} with range: 0..4294967295.
    Ciicircmaxareaaddrmismatches interface{}

    // The number of times an IS-IS control PDU with an auth type field different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295.
    Ciicircauthtypefails interface{}

    // The number of times an IS-IS control PDU with the correct auth type has
    // failed to pass authentication validation. The type is interface{} with
    // range: 0..4294967295.
    Ciicircauthfails interface{}

    // The number of times the Designated IS has changed on this circuit at this
    // level.  If the circuit is point to point, this count is zero. The type is
    // interface{} with range: 0..4294967295.
    Ciicirclandesischanges interface{}
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetFilter() yfilter.YFilter { return ciicircuitcounterentry.YFilter }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) SetFilter(yf yfilter.YFilter) { ciicircuitcounterentry.YFilter = yf }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiCircuitType" { return "Ciicircuittype" }
    if yname == "ciiCircAdjChanges" { return "Ciicircadjchanges" }
    if yname == "ciiCircNumAdj" { return "Ciicircnumadj" }
    if yname == "ciiCircInitFails" { return "Ciicircinitfails" }
    if yname == "ciiCircRejAdjs" { return "Ciicircrejadjs" }
    if yname == "ciiCircIDFieldLenMismatches" { return "Ciicircidfieldlenmismatches" }
    if yname == "ciiCircMaxAreaAddrMismatches" { return "Ciicircmaxareaaddrmismatches" }
    if yname == "ciiCircAuthTypeFails" { return "Ciicircauthtypefails" }
    if yname == "ciiCircAuthFails" { return "Ciicircauthfails" }
    if yname == "ciiCircLANDesISChanges" { return "Ciicirclandesischanges" }
    return ""
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetSegmentPath() string {
    return "ciiCircuitCounterEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicircuitcounterentry.Ciicircindex) + "']" + "[ciiCircuitType='" + fmt.Sprintf("%v", ciicircuitcounterentry.Ciicircuittype) + "']"
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciicircuitcounterentry.Ciicircindex
    leafs["ciiCircuitType"] = ciicircuitcounterentry.Ciicircuittype
    leafs["ciiCircAdjChanges"] = ciicircuitcounterentry.Ciicircadjchanges
    leafs["ciiCircNumAdj"] = ciicircuitcounterentry.Ciicircnumadj
    leafs["ciiCircInitFails"] = ciicircuitcounterentry.Ciicircinitfails
    leafs["ciiCircRejAdjs"] = ciicircuitcounterentry.Ciicircrejadjs
    leafs["ciiCircIDFieldLenMismatches"] = ciicircuitcounterentry.Ciicircidfieldlenmismatches
    leafs["ciiCircMaxAreaAddrMismatches"] = ciicircuitcounterentry.Ciicircmaxareaaddrmismatches
    leafs["ciiCircAuthTypeFails"] = ciicircuitcounterentry.Ciicircauthtypefails
    leafs["ciiCircAuthFails"] = ciicircuitcounterentry.Ciicircauthfails
    leafs["ciiCircLANDesISChanges"] = ciicircuitcounterentry.Ciicirclandesischanges
    return leafs
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetYangName() string { return "ciiCircuitCounterEntry" }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) SetParent(parent types.Entity) { ciicircuitcounterentry.parent = parent }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetParent() types.Entity { return ciicircuitcounterentry.parent }

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetParentYangName() string { return "ciiCircuitCounterTable" }

// CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype represents point to point links into one group.
type CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype string

const (
    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_lanlevel1 CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "lanlevel1"

    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_lanlevel2 CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "lanlevel2"

    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_p2pcircuit CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "p2pcircuit"
)

// CISCOIETFISISMIB_Ciipacketcountertable
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_Ciipacketcountertable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction. The type is slice of
    // CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry.
    Ciipacketcounterentry []CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetFilter() yfilter.YFilter { return ciipacketcountertable.YFilter }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) SetFilter(yf yfilter.YFilter) { ciipacketcountertable.YFilter = yf }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetGoName(yname string) string {
    if yname == "ciiPacketCounterEntry" { return "Ciipacketcounterentry" }
    return ""
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetSegmentPath() string {
    return "ciiPacketCounterTable"
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiPacketCounterEntry" {
        for _, c := range ciipacketcountertable.Ciipacketcounterentry {
            if ciipacketcountertable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry{}
        ciipacketcountertable.Ciipacketcounterentry = append(ciipacketcountertable.Ciipacketcounterentry, child)
        return &ciipacketcountertable.Ciipacketcounterentry[len(ciipacketcountertable.Ciipacketcounterentry)-1]
    }
    return nil
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciipacketcountertable.Ciipacketcounterentry {
        children[ciipacketcountertable.Ciipacketcounterentry[i].GetSegmentPath()] = &ciipacketcountertable.Ciipacketcounterentry[i]
    }
    return children
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetBundleName() string { return "cisco_ios_xe" }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetYangName() string { return "ciiPacketCounterTable" }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) SetParent(parent types.Entity) { ciipacketcountertable.parent = parent }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetParent() types.Entity { return ciipacketcountertable.parent }

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The level at which these PDU counts have been
    // collected. The type is Ciipacketcountlevel.
    Ciipacketcountlevel interface{}

    // This attribute is a key. Were we sending or receiving these PDUs?. The type
    // is Ciipacketcountdirection.
    Ciipacketcountdirection interface{}

    // The number of IS-IS Hello PDU frames seen in this direction at this level. 
    // Point-to-Point IIH PDUs are counted at the lowest enabled level: at L1 on
    // L1 or L1L2 circuits, and at L2 otherwise. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    Ciipacketcountiihellos interface{}

    // The number of ES-IS Hello PDU frames seen in this direction.  ISH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    Ciipacketcountishellos interface{}

    // The number of ES Hello PDU frames seen in this direction.  ESH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    Ciipacketcounteshellos interface{}

    // The number of IS-IS LSP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountlsps interface{}

    // The number of IS-IS CSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountcsnps interface{}

    // The number of IS-IS PSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountpsnps interface{}

    // The number of unknown IS-IS PDU frames seen at this level. The type is
    // interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountunknowns interface{}
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetFilter() yfilter.YFilter { return ciipacketcounterentry.YFilter }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) SetFilter(yf yfilter.YFilter) { ciipacketcounterentry.YFilter = yf }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiPacketCountLevel" { return "Ciipacketcountlevel" }
    if yname == "ciiPacketCountDirection" { return "Ciipacketcountdirection" }
    if yname == "ciiPacketCountIIHellos" { return "Ciipacketcountiihellos" }
    if yname == "ciiPacketCountISHellos" { return "Ciipacketcountishellos" }
    if yname == "ciiPacketCountESHellos" { return "Ciipacketcounteshellos" }
    if yname == "ciiPacketCountLSPs" { return "Ciipacketcountlsps" }
    if yname == "ciiPacketCountCSNPs" { return "Ciipacketcountcsnps" }
    if yname == "ciiPacketCountPSNPs" { return "Ciipacketcountpsnps" }
    if yname == "ciiPacketCountUnknowns" { return "Ciipacketcountunknowns" }
    return ""
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetSegmentPath() string {
    return "ciiPacketCounterEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciicircindex) + "']" + "[ciiPacketCountLevel='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciipacketcountlevel) + "']" + "[ciiPacketCountDirection='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciipacketcountdirection) + "']"
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciipacketcounterentry.Ciicircindex
    leafs["ciiPacketCountLevel"] = ciipacketcounterentry.Ciipacketcountlevel
    leafs["ciiPacketCountDirection"] = ciipacketcounterentry.Ciipacketcountdirection
    leafs["ciiPacketCountIIHellos"] = ciipacketcounterentry.Ciipacketcountiihellos
    leafs["ciiPacketCountISHellos"] = ciipacketcounterentry.Ciipacketcountishellos
    leafs["ciiPacketCountESHellos"] = ciipacketcounterentry.Ciipacketcounteshellos
    leafs["ciiPacketCountLSPs"] = ciipacketcounterentry.Ciipacketcountlsps
    leafs["ciiPacketCountCSNPs"] = ciipacketcounterentry.Ciipacketcountcsnps
    leafs["ciiPacketCountPSNPs"] = ciipacketcounterentry.Ciipacketcountpsnps
    leafs["ciiPacketCountUnknowns"] = ciipacketcounterentry.Ciipacketcountunknowns
    return leafs
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetYangName() string { return "ciiPacketCounterEntry" }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) SetParent(parent types.Entity) { ciipacketcounterentry.parent = parent }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetParent() types.Entity { return ciipacketcounterentry.parent }

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetParentYangName() string { return "ciiPacketCounterTable" }

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection represents Were we sending or receiving these PDUs?
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection string

const (
    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection_sending CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection = "sending"

    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection_receiving CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection = "receiving"
)

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel represents The level at which these PDU counts have been collected.
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel string

const (
    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel_level1 CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel = "level1"

    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel_level2 CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel = "level2"
)

// CISCOIETFISISMIB_Ciiisadjtable
// The table of adjacencies to Intermediate Systems.
type CISCOIETFISISMIB_Ciiisadjtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry corresponds to one adjacency to an Intermediate System on this
    // system. The type is slice of CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry.
    Ciiisadjentry []CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetFilter() yfilter.YFilter { return ciiisadjtable.YFilter }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) SetFilter(yf yfilter.YFilter) { ciiisadjtable.YFilter = yf }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetGoName(yname string) string {
    if yname == "ciiISAdjEntry" { return "Ciiisadjentry" }
    return ""
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetSegmentPath() string {
    return "ciiISAdjTable"
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiISAdjEntry" {
        for _, c := range ciiisadjtable.Ciiisadjentry {
            if ciiisadjtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry{}
        ciiisadjtable.Ciiisadjentry = append(ciiisadjtable.Ciiisadjentry, child)
        return &ciiisadjtable.Ciiisadjentry[len(ciiisadjtable.Ciiisadjentry)-1]
    }
    return nil
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiisadjtable.Ciiisadjentry {
        children[ciiisadjtable.Ciiisadjentry[i].GetSegmentPath()] = &ciiisadjtable.Ciiisadjentry[i]
    }
    return children
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetYangName() string { return "ciiISAdjTable" }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) SetParent(parent types.Entity) { ciiisadjtable.parent = parent }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetParent() types.Entity { return ciiisadjtable.parent }

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry
// Each entry corresponds to one adjacency to an
// Intermediate System on this system.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. A unique value identifying the IS adjacency from
    // all other such adjacencies on this circuit. This value is automatically
    // assigned by the system when the adjacency is created. The type is
    // interface{} with range: 1..2000000000.
    Ciiisadjindex interface{}

    // The state of the adjacency. The type is Ciiisadjstate.
    Ciiisadjstate interface{}

    // The 3Way state of the adjacency.  These are picked to match the historical
    // on-the-wire representation of the 3Way state, and are not intended to match
    // ciiISAdjState. The type is Ciiisadj3Waystate.
    Ciiisadj3Waystate interface{}

    // The SNPA address of the neighboring system. The type is string with length:
    // 0..20.
    Ciiisadjneighsnpaaddress interface{}

    // The type of the neighboring system. The type is Ciiisadjneighsystype.
    Ciiisadjneighsystype interface{}

    // The system ID of the neighboring Intermediate System. The type is string
    // with length: 6.
    Ciiisadjneighsysid interface{}

    // The 4 byte Extended Circuit ID learned from the Neighbor during 3-way
    // handshake, or 0. The type is interface{} with range: 0..4294967295.
    Ciiisadjnbrextendedcircid interface{}

    // How is the adjacency used?  On a point-to-point link, this might be
    // level1and2, but on a LAN, the usage will be level1 on the adjacency between
    // peers at L1, and level2 for the adjacency between peers at L2. The type is
    // Ciiisadjusage.
    Ciiisadjusage interface{}

    // The holding time in seconds for this adjacency. This value is based on
    // received IIH PDUs and the elapsed time since receipt. The type is
    // interface{} with range: 1..65535. Units are seconds.
    Ciiisadjholdtimer interface{}

    // Priority of the neighboring Intermediate System for becoming the Designated
    // Intermediate System. The type is interface{} with range: 0..127.
    Ciiisadjneighpriority interface{}

    // If the ciiISAdjState is in state 'up', the value of sysUpTime when the
    // adjacency most recently entered the state 'up',  or 0 if it has never been
    // in state 'up'. The type is interface{} with range: 0..4294967295. Units are
    // hundredths of a second.
    Ciiisadjlastuptime interface{}
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetFilter() yfilter.YFilter { return ciiisadjentry.YFilter }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) SetFilter(yf yfilter.YFilter) { ciiisadjentry.YFilter = yf }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiISAdjIndex" { return "Ciiisadjindex" }
    if yname == "ciiISAdjState" { return "Ciiisadjstate" }
    if yname == "ciiISAdj3WayState" { return "Ciiisadj3Waystate" }
    if yname == "ciiISAdjNeighSNPAAddress" { return "Ciiisadjneighsnpaaddress" }
    if yname == "ciiISAdjNeighSysType" { return "Ciiisadjneighsystype" }
    if yname == "ciiISAdjNeighSysID" { return "Ciiisadjneighsysid" }
    if yname == "ciiISAdjNbrExtendedCircID" { return "Ciiisadjnbrextendedcircid" }
    if yname == "ciiISAdjUsage" { return "Ciiisadjusage" }
    if yname == "ciiISAdjHoldTimer" { return "Ciiisadjholdtimer" }
    if yname == "ciiISAdjNeighPriority" { return "Ciiisadjneighpriority" }
    if yname == "ciiISAdjLastUpTime" { return "Ciiisadjlastuptime" }
    return ""
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetSegmentPath() string {
    return "ciiISAdjEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjentry.Ciiisadjindex) + "']"
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciiisadjentry.Ciicircindex
    leafs["ciiISAdjIndex"] = ciiisadjentry.Ciiisadjindex
    leafs["ciiISAdjState"] = ciiisadjentry.Ciiisadjstate
    leafs["ciiISAdj3WayState"] = ciiisadjentry.Ciiisadj3Waystate
    leafs["ciiISAdjNeighSNPAAddress"] = ciiisadjentry.Ciiisadjneighsnpaaddress
    leafs["ciiISAdjNeighSysType"] = ciiisadjentry.Ciiisadjneighsystype
    leafs["ciiISAdjNeighSysID"] = ciiisadjentry.Ciiisadjneighsysid
    leafs["ciiISAdjNbrExtendedCircID"] = ciiisadjentry.Ciiisadjnbrextendedcircid
    leafs["ciiISAdjUsage"] = ciiisadjentry.Ciiisadjusage
    leafs["ciiISAdjHoldTimer"] = ciiisadjentry.Ciiisadjholdtimer
    leafs["ciiISAdjNeighPriority"] = ciiisadjentry.Ciiisadjneighpriority
    leafs["ciiISAdjLastUpTime"] = ciiisadjentry.Ciiisadjlastuptime
    return leafs
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetYangName() string { return "ciiISAdjEntry" }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) SetParent(parent types.Entity) { ciiisadjentry.parent = parent }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetParent() types.Entity { return ciiisadjentry.parent }

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetParentYangName() string { return "ciiISAdjTable" }

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate represents ciiISAdjState.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_up CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "up"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_initializing CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "initializing"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_down CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "down"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_failed CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "failed"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype represents The type of the neighboring system.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l1IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l1IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l2IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l2IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l1L2IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l1L2IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_unknown CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "unknown"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate represents The state of the adjacency
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_down CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "down"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_initializing CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "initializing"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_up CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "up"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_failed CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "failed"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage represents and level2 for the adjacency between peers at L2.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level1 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level1"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level2 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level2"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level1and2 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level1and2"
)

// CISCOIETFISISMIB_Ciiisadjareaaddrtable
// This table contains the set of Area Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjareaaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one Area Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry.
    Ciiisadjareaaddrentry []CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetFilter() yfilter.YFilter { return ciiisadjareaaddrtable.YFilter }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) SetFilter(yf yfilter.YFilter) { ciiisadjareaaddrtable.YFilter = yf }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetGoName(yname string) string {
    if yname == "ciiISAdjAreaAddrEntry" { return "Ciiisadjareaaddrentry" }
    return ""
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetSegmentPath() string {
    return "ciiISAdjAreaAddrTable"
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiISAdjAreaAddrEntry" {
        for _, c := range ciiisadjareaaddrtable.Ciiisadjareaaddrentry {
            if ciiisadjareaaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry{}
        ciiisadjareaaddrtable.Ciiisadjareaaddrentry = append(ciiisadjareaaddrtable.Ciiisadjareaaddrentry, child)
        return &ciiisadjareaaddrtable.Ciiisadjareaaddrentry[len(ciiisadjareaaddrtable.Ciiisadjareaaddrentry)-1]
    }
    return nil
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiisadjareaaddrtable.Ciiisadjareaaddrentry {
        children[ciiisadjareaaddrtable.Ciiisadjareaaddrentry[i].GetSegmentPath()] = &ciiisadjareaaddrtable.Ciiisadjareaaddrentry[i]
    }
    return children
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetYangName() string { return "ciiISAdjAreaAddrTable" }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) SetParent(parent types.Entity) { ciiisadjareaaddrtable.parent = parent }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetParent() types.Entity { return ciiisadjareaaddrtable.parent }

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry
// Each entry contains one Area Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. An index for the areas associated with one
    // neighbor. This provides a simple way to walk the table. The type is
    // interface{} with range: 1..2000000000.
    Ciiisadjareaaddrindex interface{}

    // One Area Address as reported in IIH PDUs received from the neighbor. The
    // type is string with length: 0..20.
    Ciiisadjareaaddress interface{}
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetFilter() yfilter.YFilter { return ciiisadjareaaddrentry.YFilter }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) SetFilter(yf yfilter.YFilter) { ciiisadjareaaddrentry.YFilter = yf }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiISAdjIndex" { return "Ciiisadjindex" }
    if yname == "ciiISAdjAreaAddrIndex" { return "Ciiisadjareaaddrindex" }
    if yname == "ciiISAdjAreaAddress" { return "Ciiisadjareaaddress" }
    return ""
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetSegmentPath() string {
    return "ciiISAdjAreaAddrEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciiisadjindex) + "']" + "[ciiISAdjAreaAddrIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciiisadjareaaddrindex) + "']"
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciiisadjareaaddrentry.Ciicircindex
    leafs["ciiISAdjIndex"] = ciiisadjareaaddrentry.Ciiisadjindex
    leafs["ciiISAdjAreaAddrIndex"] = ciiisadjareaaddrentry.Ciiisadjareaaddrindex
    leafs["ciiISAdjAreaAddress"] = ciiisadjareaaddrentry.Ciiisadjareaaddress
    return leafs
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetYangName() string { return "ciiISAdjAreaAddrEntry" }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) SetParent(parent types.Entity) { ciiisadjareaaddrentry.parent = parent }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetParent() types.Entity { return ciiisadjareaaddrentry.parent }

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetParentYangName() string { return "ciiISAdjAreaAddrTable" }

// CISCOIETFISISMIB_Ciiisadjipaddrtable
// This table contains the set of IP Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjipaddrtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one IP Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry.
    Ciiisadjipaddrentry []CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetFilter() yfilter.YFilter { return ciiisadjipaddrtable.YFilter }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) SetFilter(yf yfilter.YFilter) { ciiisadjipaddrtable.YFilter = yf }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetGoName(yname string) string {
    if yname == "ciiISAdjIPAddrEntry" { return "Ciiisadjipaddrentry" }
    return ""
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetSegmentPath() string {
    return "ciiISAdjIPAddrTable"
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiISAdjIPAddrEntry" {
        for _, c := range ciiisadjipaddrtable.Ciiisadjipaddrentry {
            if ciiisadjipaddrtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry{}
        ciiisadjipaddrtable.Ciiisadjipaddrentry = append(ciiisadjipaddrtable.Ciiisadjipaddrentry, child)
        return &ciiisadjipaddrtable.Ciiisadjipaddrentry[len(ciiisadjipaddrtable.Ciiisadjipaddrentry)-1]
    }
    return nil
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiisadjipaddrtable.Ciiisadjipaddrentry {
        children[ciiisadjipaddrtable.Ciiisadjipaddrentry[i].GetSegmentPath()] = &ciiisadjipaddrtable.Ciiisadjipaddrentry[i]
    }
    return children
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetYangName() string { return "ciiISAdjIPAddrTable" }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) SetParent(parent types.Entity) { ciiisadjipaddrtable.parent = parent }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetParent() types.Entity { return ciiisadjipaddrtable.parent }

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry
// Each entry contains one IP Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. An index to this table which identifies the IP
    // addresses to which this entry belongs. The type is interface{} with range:
    // 1..2000000000.
    Ciiisadjipaddrindex interface{}

    // The type of one IP Address as reported in IIH PDUs received from the
    // neighbor. The type is InetAddressType.
    Ciiisadjipaddrtype interface{}

    // One IP Address as reported in IIH PDUs received from the neighbor. The type
    // is string with length: 4 | 16.
    Ciiisadjipaddraddress interface{}
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetFilter() yfilter.YFilter { return ciiisadjipaddrentry.YFilter }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) SetFilter(yf yfilter.YFilter) { ciiisadjipaddrentry.YFilter = yf }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiISAdjIndex" { return "Ciiisadjindex" }
    if yname == "ciiISAdjIPAddrIndex" { return "Ciiisadjipaddrindex" }
    if yname == "ciiISAdjIPAddrType" { return "Ciiisadjipaddrtype" }
    if yname == "ciiISAdjIPAddrAddress" { return "Ciiisadjipaddraddress" }
    return ""
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetSegmentPath() string {
    return "ciiISAdjIPAddrEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciiisadjindex) + "']" + "[ciiISAdjIPAddrIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciiisadjipaddrindex) + "']"
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciiisadjipaddrentry.Ciicircindex
    leafs["ciiISAdjIndex"] = ciiisadjipaddrentry.Ciiisadjindex
    leafs["ciiISAdjIPAddrIndex"] = ciiisadjipaddrentry.Ciiisadjipaddrindex
    leafs["ciiISAdjIPAddrType"] = ciiisadjipaddrentry.Ciiisadjipaddrtype
    leafs["ciiISAdjIPAddrAddress"] = ciiisadjipaddrentry.Ciiisadjipaddraddress
    return leafs
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetYangName() string { return "ciiISAdjIPAddrEntry" }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) SetParent(parent types.Entity) { ciiisadjipaddrentry.parent = parent }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetParent() types.Entity { return ciiisadjipaddrentry.parent }

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetParentYangName() string { return "ciiISAdjIPAddrTable" }

// CISCOIETFISISMIB_Ciiisadjprotsupptable
// This table contains the set of protocols supported by
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjprotsupptable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by a neighboring Intermediate
    // System as reported in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry.
    Ciiisadjprotsuppentry []CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetFilter() yfilter.YFilter { return ciiisadjprotsupptable.YFilter }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) SetFilter(yf yfilter.YFilter) { ciiisadjprotsupptable.YFilter = yf }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetGoName(yname string) string {
    if yname == "ciiISAdjProtSuppEntry" { return "Ciiisadjprotsuppentry" }
    return ""
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetSegmentPath() string {
    return "ciiISAdjProtSuppTable"
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiISAdjProtSuppEntry" {
        for _, c := range ciiisadjprotsupptable.Ciiisadjprotsuppentry {
            if ciiisadjprotsupptable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry{}
        ciiisadjprotsupptable.Ciiisadjprotsuppentry = append(ciiisadjprotsupptable.Ciiisadjprotsuppentry, child)
        return &ciiisadjprotsupptable.Ciiisadjprotsuppentry[len(ciiisadjprotsupptable.Ciiisadjprotsuppentry)-1]
    }
    return nil
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiisadjprotsupptable.Ciiisadjprotsuppentry {
        children[ciiisadjprotsupptable.Ciiisadjprotsuppentry[i].GetSegmentPath()] = &ciiisadjprotsupptable.Ciiisadjprotsuppentry[i]
    }
    return children
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetYangName() string { return "ciiISAdjProtSuppTable" }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) SetParent(parent types.Entity) { ciiisadjprotsupptable.parent = parent }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetParent() types.Entity { return ciiisadjprotsupptable.parent }

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry
// Each entry contains one protocol supported by a
// neighboring Intermediate System as reported in its IIH
// PDUs.
type CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. One supported protocol as reported in IIH PDUs
    // received from the neighbor. The type is CiiSupportedProtocol.
    Ciiisadjprotsuppprotocol interface{}
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetFilter() yfilter.YFilter { return ciiisadjprotsuppentry.YFilter }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) SetFilter(yf yfilter.YFilter) { ciiisadjprotsuppentry.YFilter = yf }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiISAdjIndex" { return "Ciiisadjindex" }
    if yname == "ciiISAdjProtSuppProtocol" { return "Ciiisadjprotsuppprotocol" }
    return ""
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetSegmentPath() string {
    return "ciiISAdjProtSuppEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciiisadjindex) + "']" + "[ciiISAdjProtSuppProtocol='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciiisadjprotsuppprotocol) + "']"
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciiisadjprotsuppentry.Ciicircindex
    leafs["ciiISAdjIndex"] = ciiisadjprotsuppentry.Ciiisadjindex
    leafs["ciiISAdjProtSuppProtocol"] = ciiisadjprotsuppentry.Ciiisadjprotsuppprotocol
    return leafs
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetYangName() string { return "ciiISAdjProtSuppEntry" }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) SetParent(parent types.Entity) { ciiisadjprotsuppentry.parent = parent }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetParent() types.Entity { return ciiisadjprotsuppentry.parent }

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetParentYangName() string { return "ciiISAdjProtSuppTable" }

// CISCOIETFISISMIB_Ciiratable
// The table of Reachable Addresses to NSAPs or Address
// Prefixes.
type CISCOIETFISISMIB_Ciiratable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry defines a Reachable Address to a NSAP or Address Prefix. The
    // type is slice of CISCOIETFISISMIB_Ciiratable_Ciiraentry.
    Ciiraentry []CISCOIETFISISMIB_Ciiratable_Ciiraentry
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetFilter() yfilter.YFilter { return ciiratable.YFilter }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) SetFilter(yf yfilter.YFilter) { ciiratable.YFilter = yf }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetGoName(yname string) string {
    if yname == "ciiRAEntry" { return "Ciiraentry" }
    return ""
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetSegmentPath() string {
    return "ciiRATable"
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiRAEntry" {
        for _, c := range ciiratable.Ciiraentry {
            if ciiratable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiratable_Ciiraentry{}
        ciiratable.Ciiraentry = append(ciiratable.Ciiraentry, child)
        return &ciiratable.Ciiraentry[len(ciiratable.Ciiraentry)-1]
    }
    return nil
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiratable.Ciiraentry {
        children[ciiratable.Ciiraentry[i].GetSegmentPath()] = &ciiratable.Ciiraentry[i]
    }
    return children
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetYangName() string { return "ciiRATable" }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) SetParent(parent types.Entity) { ciiratable.parent = parent }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetParent() types.Entity { return ciiratable.parent }

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiratable_Ciiraentry
// Each entry defines a Reachable Address to a NSAP or
// Address Prefix.
type CISCOIETFISISMIB_Ciiratable_Ciiraentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The identifier for this ciiRAEntry. This value
    // must be unique amongst all Reachable Addresses on the same parent Circuit.
    // This object follows the index and ManualOrAutomatic behaviors. The type is
    // interface{} with range: 1..2000000000.
    Ciiraindex interface{}

    // The existence state of this Reachable Address. This object follows the
    // ManualOrAutomatic behaviors. The type is RowStatus.
    Ciiraexiststate interface{}

    // The administrative state of the Reachable Address. This object follows the
    // CiiAdminState and ManualOrAutomatic behaviors. The type is CiiAdminState.
    Ciiraadminstate interface{}

    // The destination of this Reachable Address. This is an Address Prefix. This
    // object follows the replaceOnlyWhileDisabled and ManualOrAutomatic
    // behaviors. The type is string with length: 0..20.
    Ciiraaddrprefix interface{}

    // The type of mapping to be employed to ascertain the SNPA Address which
    // should be used in forwarding PDUs for this Reachable Address prefix. This
    // object follows the ManualOrAutomatic behavior. The following values of
    // mapping type are defined:      none: The mapping is null because the
    // neighbor SNPA is           implicit by nature of the subnetwork (e.g. a    
    // point-to-point linkage).      explicit: The subnetwork addresses in the
    // object           ciiRASNPAAddress is to be used.      extractIDI: The SNPA
    // is embedded in the IDI of           the destination NSAP Address. The
    // mapping           algorithm extracts the SNPA to be used          
    // according to the format and encoding rules of           ISO8473/Add2. This
    // SNPA extraction algorithm can           be used in conjunction with
    // Reachable Address           prefixes from the X.121, F.69, E.163 and E.164 
    // addressing subdomains.      extractDSP: All, or a suffix, of the SNPA is
    // embedded           in the DSP of the destination address. This SNPA        
    // extraction algorithm extracts the embedded           subnetwork addressing
    // information by performing a           logical AND of the ciiRASNPAMask
    // object value           with the destination address. The part of the       
    // SNPA extracted from the destination NSAP is           appended to the
    // ciiRASNPAPrefix object value to           form the next hop subnetwork
    // addressing           information. The type is Ciiramaptype.
    Ciiramaptype interface{}

    // The metric value for reaching the specified prefix over this circuit. This
    // object follows the ManualOrAutomatic behavior. The type is interface{} with
    // range: 0..63.
    Ciirametric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    Ciirametrictype interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches the address prefix of the Reachable Address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 0..20.
    Ciirasnpaaddress interface{}

    // A bit mask with 1 bits indicating the positions in the effective
    // destination address from which embedded SNPA information is to be
    // extracted. For the extraction the first octet of the ciiRASNPAMask object
    // value is aligned with the first octet (AFI) of the NSAP Address. If the
    // ciiRASNPAMask object value and NSAP Address are of different lengths, the
    // shorter of the two is logically padded with zeros before performing the
    // extraction. This object follows the ManualOrAutomatic behavior. The type is
    // string with length: 0..20.
    Ciirasnpamask interface{}

    // A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA
    // Address to use is formed by concatenating the fixed SNPA prefix with a
    // variable SNPA part that is extracted from the effective destination
    // address. For Reachable Address prefixes in which the entire SNPA is
    // embedded in the DSP the SNPA Prefix shall be null. This object follows the
    // ManualOrAutomatic behavior. The type is string with length: 0..20.
    Ciirasnpaprefix interface{}

    // The type of Reachable address. Those of type manual are created by the
    // network manager. Those of type automatic are created through propagation of
    // routing information from another routing protocol (eg. IDRP). . The type is
    // Ciiratype.
    Ciiratype interface{}
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetFilter() yfilter.YFilter { return ciiraentry.YFilter }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) SetFilter(yf yfilter.YFilter) { ciiraentry.YFilter = yf }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetGoName(yname string) string {
    if yname == "ciiCircIndex" { return "Ciicircindex" }
    if yname == "ciiRAIndex" { return "Ciiraindex" }
    if yname == "ciiRAExistState" { return "Ciiraexiststate" }
    if yname == "ciiRAAdminState" { return "Ciiraadminstate" }
    if yname == "ciiRAAddrPrefix" { return "Ciiraaddrprefix" }
    if yname == "ciiRAMapType" { return "Ciiramaptype" }
    if yname == "ciiRAMetric" { return "Ciirametric" }
    if yname == "ciiRAMetricType" { return "Ciirametrictype" }
    if yname == "ciiRASNPAAddress" { return "Ciirasnpaaddress" }
    if yname == "ciiRASNPAMask" { return "Ciirasnpamask" }
    if yname == "ciiRASNPAPrefix" { return "Ciirasnpaprefix" }
    if yname == "ciiRAType" { return "Ciiratype" }
    return ""
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetSegmentPath() string {
    return "ciiRAEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiraentry.Ciicircindex) + "']" + "[ciiRAIndex='" + fmt.Sprintf("%v", ciiraentry.Ciiraindex) + "']"
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiCircIndex"] = ciiraentry.Ciicircindex
    leafs["ciiRAIndex"] = ciiraentry.Ciiraindex
    leafs["ciiRAExistState"] = ciiraentry.Ciiraexiststate
    leafs["ciiRAAdminState"] = ciiraentry.Ciiraadminstate
    leafs["ciiRAAddrPrefix"] = ciiraentry.Ciiraaddrprefix
    leafs["ciiRAMapType"] = ciiraentry.Ciiramaptype
    leafs["ciiRAMetric"] = ciiraentry.Ciirametric
    leafs["ciiRAMetricType"] = ciiraentry.Ciirametrictype
    leafs["ciiRASNPAAddress"] = ciiraentry.Ciirasnpaaddress
    leafs["ciiRASNPAMask"] = ciiraentry.Ciirasnpamask
    leafs["ciiRASNPAPrefix"] = ciiraentry.Ciirasnpaprefix
    leafs["ciiRAType"] = ciiraentry.Ciiratype
    return leafs
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetYangName() string { return "ciiRAEntry" }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) SetParent(parent types.Entity) { ciiraentry.parent = parent }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetParent() types.Entity { return ciiraentry.parent }

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetParentYangName() string { return "ciiRATable" }

// CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype represents           information.
type CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype string

const (
    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_none CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "none"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_explicit CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "explicit"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_extractIDI CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "extractIDI"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_extractDSP CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "extractDSP"
)

// CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype represents protocol (eg. IDRP). 
type CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype string

const (
    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype_manual CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype = "manual"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype_automatic CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype = "automatic"
)

// CISCOIETFISISMIB_Ciiipratable
// The table of IP Reachable Addresses to networks,
// subnetworks or hosts either manually configured or
// learned from another protocol.
type CISCOIETFISISMIB_Ciiipratable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry defines an IP Reachable Address to a network, subnetwork or
    // host.  Each IP Reachable Address may have multiple entries in the table,
    // one for each equal cost path to the reachable address. The type is slice of
    // CISCOIETFISISMIB_Ciiipratable_Ciiipraentry.
    Ciiipraentry []CISCOIETFISISMIB_Ciiipratable_Ciiipraentry
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetFilter() yfilter.YFilter { return ciiipratable.YFilter }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) SetFilter(yf yfilter.YFilter) { ciiipratable.YFilter = yf }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetGoName(yname string) string {
    if yname == "ciiIPRAEntry" { return "Ciiipraentry" }
    return ""
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetSegmentPath() string {
    return "ciiIPRATable"
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiIPRAEntry" {
        for _, c := range ciiipratable.Ciiipraentry {
            if ciiipratable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciiipratable_Ciiipraentry{}
        ciiipratable.Ciiipraentry = append(ciiipratable.Ciiipraentry, child)
        return &ciiipratable.Ciiipraentry[len(ciiipratable.Ciiipraentry)-1]
    }
    return nil
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciiipratable.Ciiipraentry {
        children[ciiipratable.Ciiipraentry[i].GetSegmentPath()] = &ciiipratable.Ciiipraentry[i]
    }
    return children
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetBundleName() string { return "cisco_ios_xe" }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetYangName() string { return "ciiIPRATable" }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) SetParent(parent types.Entity) { ciiipratable.parent = parent }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetParent() types.Entity { return ciiipratable.parent }

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry
// Each entry defines an IP Reachable Address to a network,
// subnetwork or host.
// 
// Each IP Reachable Address may have multiple entries in the
// table, one for each equal cost path to the reachable address.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type of this IP Reachable Address.  This
    // object follows the ManualOrAutomatic behavior. The type is InetAddressType.
    Ciiipradesttype interface{}

    // This attribute is a key. The destination of this IP Reachable Address. This
    // is either a network address, subnetwork address or host address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 4 | 16.
    Ciiipradest interface{}

    // This attribute is a key. The length of the IP Netmask for Reachability
    // Address. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..128.
    Ciiipradestprefixlen interface{}

    // This attribute is a key. Index of next hop.  Used when there are multiple
    // Equal Cost Multipath alternatives for the same destination. The type is
    // interface{} with range: 1..65535.
    Ciiipranexthopindex interface{}

    // The type of the IP next hop address. The type is InetAddressType.
    Ciiipranexthoptype interface{}

    // The IP next hop to this destination. The type is string with length: 4 |
    // 16.
    Ciiipranexthop interface{}

    // The type of this IP Reachable Address. Those of type manual are created by
    // the network manager. Those of type automatic are created through
    // propagation of routing information from another routing protocol.  This
    // object follows the ManualOrAutomatic behavior. The type is Ciiipratype.
    Ciiipratype interface{}

    // The state of this IP Reachable Address. This object follows the
    // ExistenceState and ManualOrAutomatic behaviors. The type is RowStatus.
    Ciiipraexiststate interface{}

    // The administrative state of the IP Reachable Address. This object follows
    // the CiiAdminState and ManualOrAutomatic behaviors. The type is
    // CiiAdminState.
    Ciiipraadminstate interface{}

    // The metric value for reaching the specified destination over this circuit.
    // This object follows the ManualOrAutomatic behavior. The type is interface{}
    // with range: 0..63.
    Ciiiprametric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    Ciiiprametrictype interface{}

    // The wide metric value for reaching the specified destination over this
    // circuit. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..4294967295.
    Ciiiprafullmetric interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches this IP Reachable Address. This object follows
    // the ManualOrAutomatic behavior. The type is string with length: 0..20.
    Ciiiprasnpaaddress interface{}

    // The origin of this route. The type is Ciiiprasourcetype.
    Ciiiprasourcetype interface{}
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetFilter() yfilter.YFilter { return ciiipraentry.YFilter }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) SetFilter(yf yfilter.YFilter) { ciiipraentry.YFilter = yf }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetGoName(yname string) string {
    if yname == "ciiIPRADestType" { return "Ciiipradesttype" }
    if yname == "ciiIPRADest" { return "Ciiipradest" }
    if yname == "ciiIPRADestPrefixLen" { return "Ciiipradestprefixlen" }
    if yname == "ciiIPRANextHopIndex" { return "Ciiipranexthopindex" }
    if yname == "ciiIPRANextHopType" { return "Ciiipranexthoptype" }
    if yname == "ciiIPRANextHop" { return "Ciiipranexthop" }
    if yname == "ciiIPRAType" { return "Ciiipratype" }
    if yname == "ciiIPRAExistState" { return "Ciiipraexiststate" }
    if yname == "ciiIPRAAdminState" { return "Ciiipraadminstate" }
    if yname == "ciiIPRAMetric" { return "Ciiiprametric" }
    if yname == "ciiIPRAMetricType" { return "Ciiiprametrictype" }
    if yname == "ciiIPRAFullMetric" { return "Ciiiprafullmetric" }
    if yname == "ciiIPRASNPAAddress" { return "Ciiiprasnpaaddress" }
    if yname == "ciiIPRASourceType" { return "Ciiiprasourcetype" }
    return ""
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetSegmentPath() string {
    return "ciiIPRAEntry" + "[ciiIPRADestType='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradesttype) + "']" + "[ciiIPRADest='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradest) + "']" + "[ciiIPRADestPrefixLen='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradestprefixlen) + "']" + "[ciiIPRANextHopIndex='" + fmt.Sprintf("%v", ciiipraentry.Ciiipranexthopindex) + "']"
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiIPRADestType"] = ciiipraentry.Ciiipradesttype
    leafs["ciiIPRADest"] = ciiipraentry.Ciiipradest
    leafs["ciiIPRADestPrefixLen"] = ciiipraentry.Ciiipradestprefixlen
    leafs["ciiIPRANextHopIndex"] = ciiipraentry.Ciiipranexthopindex
    leafs["ciiIPRANextHopType"] = ciiipraentry.Ciiipranexthoptype
    leafs["ciiIPRANextHop"] = ciiipraentry.Ciiipranexthop
    leafs["ciiIPRAType"] = ciiipraentry.Ciiipratype
    leafs["ciiIPRAExistState"] = ciiipraentry.Ciiipraexiststate
    leafs["ciiIPRAAdminState"] = ciiipraentry.Ciiipraadminstate
    leafs["ciiIPRAMetric"] = ciiipraentry.Ciiiprametric
    leafs["ciiIPRAMetricType"] = ciiipraentry.Ciiiprametrictype
    leafs["ciiIPRAFullMetric"] = ciiipraentry.Ciiiprafullmetric
    leafs["ciiIPRASNPAAddress"] = ciiipraentry.Ciiiprasnpaaddress
    leafs["ciiIPRASourceType"] = ciiipraentry.Ciiiprasourcetype
    return leafs
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetYangName() string { return "ciiIPRAEntry" }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) SetParent(parent types.Entity) { ciiipraentry.parent = parent }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetParent() types.Entity { return ciiipraentry.parent }

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetParentYangName() string { return "ciiIPRATable" }

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype represents The origin of this route.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype string

const (
    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_static CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "static"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_direct CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "direct"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_ospfv2 CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "ospfv2"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_ospfv3 CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "ospfv3"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_isis CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "isis"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_rip CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "rip"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_igrp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "igrp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_eigrp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "eigrp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_bgp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "bgp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_other CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "other"
)

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype represents follows the ManualOrAutomatic behavior.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype string

const (
    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype_manual CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype = "manual"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype_automatic CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype = "automatic"
)

// CISCOIETFISISMIB_Ciilspsummarytable
// The table of LSP Headers.
type CISCOIETFISISMIB_Ciilspsummarytable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry provides a summary describing an LSP currently stored in the
    // system. The type is slice of
    // CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry.
    Ciilspsummaryentry []CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetFilter() yfilter.YFilter { return ciilspsummarytable.YFilter }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) SetFilter(yf yfilter.YFilter) { ciilspsummarytable.YFilter = yf }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetGoName(yname string) string {
    if yname == "ciiLSPSummaryEntry" { return "Ciilspsummaryentry" }
    return ""
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetSegmentPath() string {
    return "ciiLSPSummaryTable"
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiLSPSummaryEntry" {
        for _, c := range ciilspsummarytable.Ciilspsummaryentry {
            if ciilspsummarytable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry{}
        ciilspsummarytable.Ciilspsummaryentry = append(ciilspsummarytable.Ciilspsummaryentry, child)
        return &ciilspsummarytable.Ciilspsummaryentry[len(ciilspsummarytable.Ciilspsummaryentry)-1]
    }
    return nil
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciilspsummarytable.Ciilspsummaryentry {
        children[ciilspsummarytable.Ciilspsummaryentry[i].GetSegmentPath()] = &ciilspsummarytable.Ciilspsummaryentry[i]
    }
    return children
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetBundleName() string { return "cisco_ios_xe" }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetYangName() string { return "ciiLSPSummaryTable" }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) SetParent(parent types.Entity) { ciilspsummarytable.parent = parent }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetParent() types.Entity { return ciilspsummarytable.parent }

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry
// Each entry provides a summary describing an
// LSP currently stored in the system.
type CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. At which level does this LSP appear?. The type is
    // CiiISLevel.
    Ciilsplevel interface{}

    // This attribute is a key. The 8 byte LSP ID, consisting of the SystemID,
    // Circuit ID, and Fragment Number. The type is string with length: 0 | 8.
    Ciilspid interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    Ciilspseq interface{}

    // Is this LSP being purged by this System?. The type is bool.
    Ciilspzerolife interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    Ciilspchecksum interface{}

    // The remaining lifetime in seconds for this LSP. The type is interface{}
    // with range: 0..65535. Units are seconds.
    Ciilsplifetimeremain interface{}

    // The length of this LSP. The type is interface{} with range: 0..65535.
    Ciilsppdulength interface{}

    // Flags carried by the LSP. The type is interface{} with range: 0..255.
    Ciilspattributes interface{}
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetFilter() yfilter.YFilter { return ciilspsummaryentry.YFilter }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) SetFilter(yf yfilter.YFilter) { ciilspsummaryentry.YFilter = yf }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetGoName(yname string) string {
    if yname == "ciiLSPLevel" { return "Ciilsplevel" }
    if yname == "ciiLSPID" { return "Ciilspid" }
    if yname == "ciiLSPSeq" { return "Ciilspseq" }
    if yname == "ciiLSPZeroLife" { return "Ciilspzerolife" }
    if yname == "ciiLSPChecksum" { return "Ciilspchecksum" }
    if yname == "ciiLSPLifetimeRemain" { return "Ciilsplifetimeremain" }
    if yname == "ciiLSPPDULength" { return "Ciilsppdulength" }
    if yname == "ciiLSPAttributes" { return "Ciilspattributes" }
    return ""
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetSegmentPath() string {
    return "ciiLSPSummaryEntry" + "[ciiLSPLevel='" + fmt.Sprintf("%v", ciilspsummaryentry.Ciilsplevel) + "']" + "[ciiLSPID='" + fmt.Sprintf("%v", ciilspsummaryentry.Ciilspid) + "']"
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiLSPLevel"] = ciilspsummaryentry.Ciilsplevel
    leafs["ciiLSPID"] = ciilspsummaryentry.Ciilspid
    leafs["ciiLSPSeq"] = ciilspsummaryentry.Ciilspseq
    leafs["ciiLSPZeroLife"] = ciilspsummaryentry.Ciilspzerolife
    leafs["ciiLSPChecksum"] = ciilspsummaryentry.Ciilspchecksum
    leafs["ciiLSPLifetimeRemain"] = ciilspsummaryentry.Ciilsplifetimeremain
    leafs["ciiLSPPDULength"] = ciilspsummaryentry.Ciilsppdulength
    leafs["ciiLSPAttributes"] = ciilspsummaryentry.Ciilspattributes
    return leafs
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetBundleName() string { return "cisco_ios_xe" }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetYangName() string { return "ciiLSPSummaryEntry" }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) SetParent(parent types.Entity) { ciilspsummaryentry.parent = parent }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetParent() types.Entity { return ciilspsummaryentry.parent }

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetParentYangName() string { return "ciiLSPSummaryTable" }

// CISCOIETFISISMIB_Ciilsptlvtable
// The contents of each LSP.
type CISCOIETFISISMIB_Ciilsptlvtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Each entry describes an LSP current stored in the system. The type is slice
    // of CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry.
    Ciilsptlventry []CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetFilter() yfilter.YFilter { return ciilsptlvtable.YFilter }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) SetFilter(yf yfilter.YFilter) { ciilsptlvtable.YFilter = yf }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetGoName(yname string) string {
    if yname == "ciiLSPTLVEntry" { return "Ciilsptlventry" }
    return ""
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetSegmentPath() string {
    return "ciiLSPTLVTable"
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ciiLSPTLVEntry" {
        for _, c := range ciilsptlvtable.Ciilsptlventry {
            if ciilsptlvtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry{}
        ciilsptlvtable.Ciilsptlventry = append(ciilsptlvtable.Ciilsptlventry, child)
        return &ciilsptlvtable.Ciilsptlventry[len(ciilsptlvtable.Ciilsptlventry)-1]
    }
    return nil
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ciilsptlvtable.Ciilsptlventry {
        children[ciilsptlvtable.Ciilsptlventry[i].GetSegmentPath()] = &ciilsptlvtable.Ciilsptlventry[i]
    }
    return children
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetBundleName() string { return "cisco_ios_xe" }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetYangName() string { return "ciiLSPTLVTable" }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) SetParent(parent types.Entity) { ciilsptlvtable.parent = parent }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetParent() types.Entity { return ciilsptlvtable.parent }

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetParentYangName() string { return "CISCO-IETF-ISIS-MIB" }

// CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry
// Each entry describes an LSP current stored in the
// system.
type CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is CiiISLevel. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry_Ciilsplevel
    Ciilsplevel interface{}

    // This attribute is a key. The type is string with length: 0 | 8. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry_Ciilspid
    Ciilspid interface{}

    // This attribute is a key. The index of this TLV in the LSP.  The first TLV
    // has index 1 and the Nth TLV has an index of N. The type is interface{} with
    // range: 0..4294967295.
    Ciilsptlvindex interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    Ciilsptlvseq interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    Ciilsptlvchecksum interface{}

    // The type of this TLV. The type is interface{} with range: 0..255.
    Ciilsptlvtype interface{}

    // The length of this TLV. The type is interface{} with range: 0..255.
    Ciilsptlvlen interface{}

    // The value of this TLV. The type is string with length: 0..255.
    Ciilsptlvvalue interface{}
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetFilter() yfilter.YFilter { return ciilsptlventry.YFilter }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) SetFilter(yf yfilter.YFilter) { ciilsptlventry.YFilter = yf }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetGoName(yname string) string {
    if yname == "ciiLSPLevel" { return "Ciilsplevel" }
    if yname == "ciiLSPID" { return "Ciilspid" }
    if yname == "ciiLSPTLVIndex" { return "Ciilsptlvindex" }
    if yname == "ciiLSPTLVSeq" { return "Ciilsptlvseq" }
    if yname == "ciiLSPTLVChecksum" { return "Ciilsptlvchecksum" }
    if yname == "ciiLSPTLVType" { return "Ciilsptlvtype" }
    if yname == "ciiLSPTLVLen" { return "Ciilsptlvlen" }
    if yname == "ciiLSPTLVValue" { return "Ciilsptlvvalue" }
    return ""
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetSegmentPath() string {
    return "ciiLSPTLVEntry" + "[ciiLSPLevel='" + fmt.Sprintf("%v", ciilsptlventry.Ciilsplevel) + "']" + "[ciiLSPID='" + fmt.Sprintf("%v", ciilsptlventry.Ciilspid) + "']" + "[ciiLSPTLVIndex='" + fmt.Sprintf("%v", ciilsptlventry.Ciilsptlvindex) + "']"
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ciiLSPLevel"] = ciilsptlventry.Ciilsplevel
    leafs["ciiLSPID"] = ciilsptlventry.Ciilspid
    leafs["ciiLSPTLVIndex"] = ciilsptlventry.Ciilsptlvindex
    leafs["ciiLSPTLVSeq"] = ciilsptlventry.Ciilsptlvseq
    leafs["ciiLSPTLVChecksum"] = ciilsptlventry.Ciilsptlvchecksum
    leafs["ciiLSPTLVType"] = ciilsptlventry.Ciilsptlvtype
    leafs["ciiLSPTLVLen"] = ciilsptlventry.Ciilsptlvlen
    leafs["ciiLSPTLVValue"] = ciilsptlventry.Ciilsptlvvalue
    return leafs
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetBundleName() string { return "cisco_ios_xe" }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetYangName() string { return "ciiLSPTLVEntry" }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) SetParent(parent types.Entity) { ciilsptlventry.parent = parent }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetParent() types.Entity { return ciilsptlventry.parent }

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetParentYangName() string { return "ciiLSPTLVTable" }

