// This document describes a management information base for
// the IS-IS Routing protocol, as described in ISO 10589,
// when it is used to construct routing tables for IP networks,
// as described in RFC 1195. This MIB is entirely based upon
// the IETF draft draft-ietf-isis-wg-mib-16.
package cisco_ietf_isis_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_ietf_isis_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-IETF-ISIS-MIB CISCO-IETF-ISIS-MIB}", reflect.TypeOf(CISCOIETFISISMIB{}))
    ydk.RegisterEntity("CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB", reflect.TypeOf(CISCOIETFISISMIB{}))
}

// CiiAdminState represents Values match those in RFC 2863.
type CiiAdminState string

const (
    CiiAdminState_on CiiAdminState = "on"

    CiiAdminState_off CiiAdminState = "off"
)

// CiiLevelState represents States of the IS-IS protocol.
type CiiLevelState string

const (
    CiiLevelState_off CiiLevelState = "off"

    CiiLevelState_on CiiLevelState = "on"

    CiiLevelState_waiting CiiLevelState = "waiting"

    CiiLevelState_overloaded CiiLevelState = "overloaded"
)

// CiiSupportedProtocol represents these protocols in ISO TR9577.
type CiiSupportedProtocol string

const (
    CiiSupportedProtocol_iso8473 CiiSupportedProtocol = "iso8473"

    CiiSupportedProtocol_ipV6 CiiSupportedProtocol = "ipV6"

    CiiSupportedProtocol_ip CiiSupportedProtocol = "ip"
)

// CiiMetricType represents Is this an Internal or External Metric?
type CiiMetricType string

const (
    CiiMetricType_internal CiiMetricType = "internal"

    CiiMetricType_external CiiMetricType = "external"
)

// CiiMetricStyle represents Do we use 1195 style Metrics or wide metrics.
type CiiMetricStyle string

const (
    CiiMetricStyle_narrow CiiMetricStyle = "narrow"

    CiiMetricStyle_wide CiiMetricStyle = "wide"

    CiiMetricStyle_both CiiMetricStyle = "both"
)

// CiiISLevel represents Identifies a level.
type CiiISLevel string

const (
    CiiISLevel_none CiiISLevel = "none"

    CiiISLevel_area CiiISLevel = "area"

    CiiISLevel_domain CiiISLevel = "domain"
)

// CISCOIETFISISMIB
type CISCOIETFISISMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    Ciisysobject CISCOIETFISISMIB_Ciisysobject

    
    Ciicirc CISCOIETFISISMIB_Ciicirc

    // The set of manual area addresses configured on this Intermediate System.
    Ciimanareaaddrtable CISCOIETFISISMIB_Ciimanareaaddrtable

    // The union of the sets of area addresses reported in all Level 1 LSPs with
    // fragment number zero generated by this Intermediate System, or received
    // from other Intermediate Systems which are reachable via Level 1 routing.
    Ciiareaaddrtable CISCOIETFISISMIB_Ciiareaaddrtable

    // This table contains the manually configured set of protocols supported by
    // this Intermediate System.
    Ciisysprotsupptable CISCOIETFISISMIB_Ciisysprotsupptable

    // The set of IP summary addresses to use in forming summary TLVs originated
    // by this Intermediate System.  An administrator may use a summary address to
    // combine and modify IP Reachability announcements.  If the Intermediate
    // system can reach any subset of the summary address, the summary address
    // will be announced instead, at the configured metric.
    Ciisummaddrtable CISCOIETFISISMIB_Ciisummaddrtable

    // This table provides criteria to decide if a route should be leaked from L2
    // to L1 when Domain Wide Prefix leaking is enabled.  Addresses that match the
    // summary mask in the table will be announced at L1 by routers when
    // ciiSysL2toL1Leaking is enabled.  Routes that fall into the ranges specified
    // are announced as is, without being summarized.  Routes that do not match a
    // summary mask are not announced.
    Ciiredistributeaddrtable CISCOIETFISISMIB_Ciiredistributeaddrtable

    // The set of hostnames and router ID.
    Ciiroutertable CISCOIETFISISMIB_Ciiroutertable

    // Level specific information about the System.
    Ciisysleveltable CISCOIETFISISMIB_Ciisysleveltable

    // The table of circuits used by this Intermediate System.
    Ciicirctable CISCOIETFISISMIB_Ciicirctable

    // Level specific information about circuits used by IS-IS.
    Ciicircleveltable CISCOIETFISISMIB_Ciicircleveltable

    // System wide counters for this Intermediate System.
    Ciisystemcountertable CISCOIETFISISMIB_Ciisystemcountertable

    // Circuit specific counters for this Intermediate System.
    Ciicircuitcountertable CISCOIETFISISMIB_Ciicircuitcountertable

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction.
    Ciipacketcountertable CISCOIETFISISMIB_Ciipacketcountertable

    // The table of adjacencies to Intermediate Systems.
    Ciiisadjtable CISCOIETFISISMIB_Ciiisadjtable

    // This table contains the set of Area Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    Ciiisadjareaaddrtable CISCOIETFISISMIB_Ciiisadjareaaddrtable

    // This table contains the set of IP Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    Ciiisadjipaddrtable CISCOIETFISISMIB_Ciiisadjipaddrtable

    // This table contains the set of protocols supported by neighboring
    // Intermediate Systems as reported in received IIH PDUs.
    Ciiisadjprotsupptable CISCOIETFISISMIB_Ciiisadjprotsupptable

    // The table of Reachable Addresses to NSAPs or Address Prefixes.
    Ciiratable CISCOIETFISISMIB_Ciiratable

    // The table of IP Reachable Addresses to networks, subnetworks or hosts
    // either manually configured or learned from another protocol.
    Ciiipratable CISCOIETFISISMIB_Ciiipratable

    // The table of LSP Headers.
    Ciilspsummarytable CISCOIETFISISMIB_Ciilspsummarytable

    // The contents of each LSP.
    Ciilsptlvtable CISCOIETFISISMIB_Ciilsptlvtable
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetEntityData() *types.CommonEntityData {
    cISCOIETFISISMIB.EntityData.YFilter = cISCOIETFISISMIB.YFilter
    cISCOIETFISISMIB.EntityData.YangName = "CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOIETFISISMIB.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.SegmentPath = "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOIETFISISMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOIETFISISMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOIETFISISMIB.EntityData.Children = make(map[string]types.YChild)
    cISCOIETFISISMIB.EntityData.Children["ciiSysObject"] = types.YChild{"Ciisysobject", &cISCOIETFISISMIB.Ciisysobject}
    cISCOIETFISISMIB.EntityData.Children["ciiCirc"] = types.YChild{"Ciicirc", &cISCOIETFISISMIB.Ciicirc}
    cISCOIETFISISMIB.EntityData.Children["ciiManAreaAddrTable"] = types.YChild{"Ciimanareaaddrtable", &cISCOIETFISISMIB.Ciimanareaaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiAreaAddrTable"] = types.YChild{"Ciiareaaddrtable", &cISCOIETFISISMIB.Ciiareaaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiSysProtSuppTable"] = types.YChild{"Ciisysprotsupptable", &cISCOIETFISISMIB.Ciisysprotsupptable}
    cISCOIETFISISMIB.EntityData.Children["ciiSummAddrTable"] = types.YChild{"Ciisummaddrtable", &cISCOIETFISISMIB.Ciisummaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiRedistributeAddrTable"] = types.YChild{"Ciiredistributeaddrtable", &cISCOIETFISISMIB.Ciiredistributeaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiRouterTable"] = types.YChild{"Ciiroutertable", &cISCOIETFISISMIB.Ciiroutertable}
    cISCOIETFISISMIB.EntityData.Children["ciiSysLevelTable"] = types.YChild{"Ciisysleveltable", &cISCOIETFISISMIB.Ciisysleveltable}
    cISCOIETFISISMIB.EntityData.Children["ciiCircTable"] = types.YChild{"Ciicirctable", &cISCOIETFISISMIB.Ciicirctable}
    cISCOIETFISISMIB.EntityData.Children["ciiCircLevelTable"] = types.YChild{"Ciicircleveltable", &cISCOIETFISISMIB.Ciicircleveltable}
    cISCOIETFISISMIB.EntityData.Children["ciiSystemCounterTable"] = types.YChild{"Ciisystemcountertable", &cISCOIETFISISMIB.Ciisystemcountertable}
    cISCOIETFISISMIB.EntityData.Children["ciiCircuitCounterTable"] = types.YChild{"Ciicircuitcountertable", &cISCOIETFISISMIB.Ciicircuitcountertable}
    cISCOIETFISISMIB.EntityData.Children["ciiPacketCounterTable"] = types.YChild{"Ciipacketcountertable", &cISCOIETFISISMIB.Ciipacketcountertable}
    cISCOIETFISISMIB.EntityData.Children["ciiISAdjTable"] = types.YChild{"Ciiisadjtable", &cISCOIETFISISMIB.Ciiisadjtable}
    cISCOIETFISISMIB.EntityData.Children["ciiISAdjAreaAddrTable"] = types.YChild{"Ciiisadjareaaddrtable", &cISCOIETFISISMIB.Ciiisadjareaaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiISAdjIPAddrTable"] = types.YChild{"Ciiisadjipaddrtable", &cISCOIETFISISMIB.Ciiisadjipaddrtable}
    cISCOIETFISISMIB.EntityData.Children["ciiISAdjProtSuppTable"] = types.YChild{"Ciiisadjprotsupptable", &cISCOIETFISISMIB.Ciiisadjprotsupptable}
    cISCOIETFISISMIB.EntityData.Children["ciiRATable"] = types.YChild{"Ciiratable", &cISCOIETFISISMIB.Ciiratable}
    cISCOIETFISISMIB.EntityData.Children["ciiIPRATable"] = types.YChild{"Ciiipratable", &cISCOIETFISISMIB.Ciiipratable}
    cISCOIETFISISMIB.EntityData.Children["ciiLSPSummaryTable"] = types.YChild{"Ciilspsummarytable", &cISCOIETFISISMIB.Ciilspsummarytable}
    cISCOIETFISISMIB.EntityData.Children["ciiLSPTLVTable"] = types.YChild{"Ciilsptlvtable", &cISCOIETFISISMIB.Ciilsptlvtable}
    cISCOIETFISISMIB.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(cISCOIETFISISMIB.EntityData)
}

// CISCOIETFISISMIB_Ciisysobject
type CISCOIETFISISMIB_Ciisysobject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The version number of the IS-IS protocol that is implemented. The type is
    // Ciisysversion.
    Ciisysversion interface{}

    // At which levels is the Intermediate System running? This object follows the
    // replaceOnlyWhileDisabled behavior. The type is Ciisystype.
    Ciisystype interface{}

    // The ID for this Intermediate System. This value is appended to each of the
    // area addresses to form the Network Entity Titles. The derivation of a value
    // for this object is implementation-specific.  Some implementations may
    // automatically assign values and not permit an SNMP write, while others may
    // require the value to be set manually. The type is string with length: 6.
    Ciisysid interface{}

    // Maximum number of paths with equal routing metric value which it is
    // permitted to split between. This object follows the
    // replaceOnlyWhileDisabled behavior. The type is interface{} with range:
    // 1..32.
    Ciisysmaxpathsplits interface{}

    // Maximum interval, in seconds, between generated LSPs by this Intermediate
    // System. This object follows the resettingTimer behavior.  The value must be
    // greater than any value configured for ciiSysLevelMinLSPGenInt, and should
    // be at least 300 seconds less than ciiSysMaxAge. The type is interface{}
    // with range: 1..65235. Units are seconds.
    Ciisysmaxlspgenint interface{}

    // The value, in seconds, to be used for the suggested ES configuration timer
    // in ISH PDUs when soliciting the ES configuration. The type is interface{}
    // with range: 0..65535. Units are seconds.
    Ciisyspolleshellorate interface{}

    // Number of seconds to delay in 'waiting' state before entering 'on' state.
    // This object follows the resettingTimer behavior. The type is interface{}
    // with range: 1..65535. Units are seconds.
    Ciisyswaittime interface{}

    // The administrative state of this Intermediate System.  Setting this object
    // to the value 'on' when its current value is 'off' enables the Intermediate
    // System. The type is CiiAdminState.
    Ciisysadminstate interface{}

    // If true, allow the router to leak L2 routes into L1. The type is bool.
    Ciisysl2Tol1Leaking interface{}

    // Value to place in RemainingLifeTime field of the LSPs we generate. This
    // should be at least 300 seconds greater than ciiSysMaxLSPGenInt. The type is
    // interface{} with range: 350..65535. Units are seconds.
    Ciisysmaxage interface{}

    // Size of the largest Buffer we are designed or configured to store.  This
    // should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize
    // supported by the system.  If resources allow, we will store and flood LSPs
    // larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in
    // networks with different values for ciiSysLevelOrigLSPBuffSize. The type is
    // interface{} with range: 1492..16000. Units are bytes.
    Ciisysreceivelspbuffersize interface{}
}

func (ciisysobject *CISCOIETFISISMIB_Ciisysobject) GetEntityData() *types.CommonEntityData {
    ciisysobject.EntityData.YFilter = ciisysobject.YFilter
    ciisysobject.EntityData.YangName = "ciiSysObject"
    ciisysobject.EntityData.BundleName = "cisco_ios_xe"
    ciisysobject.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciisysobject.EntityData.SegmentPath = "ciiSysObject"
    ciisysobject.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisysobject.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisysobject.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisysobject.EntityData.Children = make(map[string]types.YChild)
    ciisysobject.EntityData.Leafs = make(map[string]types.YLeaf)
    ciisysobject.EntityData.Leafs["ciiSysVersion"] = types.YLeaf{"Ciisysversion", ciisysobject.Ciisysversion}
    ciisysobject.EntityData.Leafs["ciiSysType"] = types.YLeaf{"Ciisystype", ciisysobject.Ciisystype}
    ciisysobject.EntityData.Leafs["ciiSysID"] = types.YLeaf{"Ciisysid", ciisysobject.Ciisysid}
    ciisysobject.EntityData.Leafs["ciiSysMaxPathSplits"] = types.YLeaf{"Ciisysmaxpathsplits", ciisysobject.Ciisysmaxpathsplits}
    ciisysobject.EntityData.Leafs["ciiSysMaxLSPGenInt"] = types.YLeaf{"Ciisysmaxlspgenint", ciisysobject.Ciisysmaxlspgenint}
    ciisysobject.EntityData.Leafs["ciiSysPollESHelloRate"] = types.YLeaf{"Ciisyspolleshellorate", ciisysobject.Ciisyspolleshellorate}
    ciisysobject.EntityData.Leafs["ciiSysWaitTime"] = types.YLeaf{"Ciisyswaittime", ciisysobject.Ciisyswaittime}
    ciisysobject.EntityData.Leafs["ciiSysAdminState"] = types.YLeaf{"Ciisysadminstate", ciisysobject.Ciisysadminstate}
    ciisysobject.EntityData.Leafs["ciiSysL2toL1Leaking"] = types.YLeaf{"Ciisysl2Tol1Leaking", ciisysobject.Ciisysl2Tol1Leaking}
    ciisysobject.EntityData.Leafs["ciiSysMaxAge"] = types.YLeaf{"Ciisysmaxage", ciisysobject.Ciisysmaxage}
    ciisysobject.EntityData.Leafs["ciiSysReceiveLSPBufferSize"] = types.YLeaf{"Ciisysreceivelspbuffersize", ciisysobject.Ciisysreceivelspbuffersize}
    return &(ciisysobject.EntityData)
}

// CISCOIETFISISMIB_Ciisysobject_Ciisystype represents replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_Ciisysobject_Ciisystype string

const (
    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level1IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level1IS"

    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level2IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level2IS"

    CISCOIETFISISMIB_Ciisysobject_Ciisystype_level1L2IS CISCOIETFISISMIB_Ciisysobject_Ciisystype = "level1L2IS"
)

// CISCOIETFISISMIB_Ciisysobject_Ciisysversion represents is implemented.
type CISCOIETFISISMIB_Ciisysobject_Ciisysversion string

const (
    CISCOIETFISISMIB_Ciisysobject_Ciisysversion_unknown CISCOIETFISISMIB_Ciisysobject_Ciisysversion = "unknown"

    CISCOIETFISISMIB_Ciisysobject_Ciisysversion_one CISCOIETFISISMIB_Ciisysobject_Ciisysversion = "one"
)

// CISCOIETFISISMIB_Ciicirc
type CISCOIETFISISMIB_Ciicirc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is used to assign values to ciiCircIndex as described in
    // 'Textual Conventions for SNMPv2'.  The network manager reads this object,
    // and then writes the value back as the ciiCircIndex in a SET that creates a
    // new instance of ciiCircEntry.  If the SET fails with the code
    // 'inconsistentValue', then the process must be repeated; If the SET
    // succeeds, then the object is incremented, and the new ciiCircEntry is
    // created according to the manager's directions. The type is interface{} with
    // range: 0..4294967295.
    Ciinextcircindex interface{}
}

func (ciicirc *CISCOIETFISISMIB_Ciicirc) GetEntityData() *types.CommonEntityData {
    ciicirc.EntityData.YFilter = ciicirc.YFilter
    ciicirc.EntityData.YangName = "ciiCirc"
    ciicirc.EntityData.BundleName = "cisco_ios_xe"
    ciicirc.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciicirc.EntityData.SegmentPath = "ciiCirc"
    ciicirc.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicirc.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicirc.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicirc.EntityData.Children = make(map[string]types.YChild)
    ciicirc.EntityData.Leafs = make(map[string]types.YLeaf)
    ciicirc.EntityData.Leafs["ciiNextCircIndex"] = types.YLeaf{"Ciinextcircindex", ciicirc.Ciinextcircindex}
    return &(ciicirc.EntityData)
}

// CISCOIETFISISMIB_Ciimanareaaddrtable
// The set of manual area addresses configured on this
// Intermediate System.
type CISCOIETFISISMIB_Ciimanareaaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one area address manually configured on this system.
    // The type is slice of
    // CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry.
    Ciimanareaaddrentry []CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry
}

func (ciimanareaaddrtable *CISCOIETFISISMIB_Ciimanareaaddrtable) GetEntityData() *types.CommonEntityData {
    ciimanareaaddrtable.EntityData.YFilter = ciimanareaaddrtable.YFilter
    ciimanareaaddrtable.EntityData.YangName = "ciiManAreaAddrTable"
    ciimanareaaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciimanareaaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciimanareaaddrtable.EntityData.SegmentPath = "ciiManAreaAddrTable"
    ciimanareaaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciimanareaaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciimanareaaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciimanareaaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciimanareaaddrtable.EntityData.Children["ciiManAreaAddrEntry"] = types.YChild{"Ciimanareaaddrentry", nil}
    for i := range ciimanareaaddrtable.Ciimanareaaddrentry {
        ciimanareaaddrtable.EntityData.Children[types.GetSegmentPath(&ciimanareaaddrtable.Ciimanareaaddrentry[i])] = types.YChild{"Ciimanareaaddrentry", &ciimanareaaddrtable.Ciimanareaaddrentry[i]}
    }
    ciimanareaaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciimanareaaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry
// Each entry contains one area address manually configured
// on this system
type CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A manually configured area address for this
    // system. This object follows the index behavior.  Note: an index for the
    // entry {1, {49.0001} active} in this table would be the ordered pair (1,
    // (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the
    // OID. The type is string with length: 0..20.
    Ciimanareaaddr interface{}

    // The state of the ciiManAreaAddrEntry. This object follows the Row Status
    // behavior. If the ciiSysAdminState for this Intermediate System is 'on', and
    // an attempt is made to set this object to the value 'destroy' or
    // 'notInService' when this is the only ciiManAreaAddrEntry in state 'active'
    // for this Intermediate System should return inconsistentValue. The type is
    // RowStatus.
    Ciimanareaaddrexiststate interface{}
}

func (ciimanareaaddrentry *CISCOIETFISISMIB_Ciimanareaaddrtable_Ciimanareaaddrentry) GetEntityData() *types.CommonEntityData {
    ciimanareaaddrentry.EntityData.YFilter = ciimanareaaddrentry.YFilter
    ciimanareaaddrentry.EntityData.YangName = "ciiManAreaAddrEntry"
    ciimanareaaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciimanareaaddrentry.EntityData.ParentYangName = "ciiManAreaAddrTable"
    ciimanareaaddrentry.EntityData.SegmentPath = "ciiManAreaAddrEntry" + "[ciiManAreaAddr='" + fmt.Sprintf("%v", ciimanareaaddrentry.Ciimanareaaddr) + "']"
    ciimanareaaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciimanareaaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciimanareaaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciimanareaaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciimanareaaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciimanareaaddrentry.EntityData.Leafs["ciiManAreaAddr"] = types.YLeaf{"Ciimanareaaddr", ciimanareaaddrentry.Ciimanareaaddr}
    ciimanareaaddrentry.EntityData.Leafs["ciiManAreaAddrExistState"] = types.YLeaf{"Ciimanareaaddrexiststate", ciimanareaaddrentry.Ciimanareaaddrexiststate}
    return &(ciimanareaaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciiareaaddrtable
// The union of the sets of area addresses reported in all
// Level 1 LSPs with fragment number zero generated by this
// Intermediate System, or received from other Intermediate
// Systems which are reachable via Level 1 routing.
type CISCOIETFISISMIB_Ciiareaaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one area address reported in a Level 1 LSP generated or
    // received by this Intermediate System. The type is slice of
    // CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry.
    Ciiareaaddrentry []CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry
}

func (ciiareaaddrtable *CISCOIETFISISMIB_Ciiareaaddrtable) GetEntityData() *types.CommonEntityData {
    ciiareaaddrtable.EntityData.YFilter = ciiareaaddrtable.YFilter
    ciiareaaddrtable.EntityData.YangName = "ciiAreaAddrTable"
    ciiareaaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciiareaaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiareaaddrtable.EntityData.SegmentPath = "ciiAreaAddrTable"
    ciiareaaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiareaaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiareaaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiareaaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciiareaaddrtable.EntityData.Children["ciiAreaAddrEntry"] = types.YChild{"Ciiareaaddrentry", nil}
    for i := range ciiareaaddrtable.Ciiareaaddrentry {
        ciiareaaddrtable.EntityData.Children[types.GetSegmentPath(&ciiareaaddrtable.Ciiareaaddrentry[i])] = types.YChild{"Ciiareaaddrentry", &ciiareaaddrtable.Ciiareaaddrentry[i]}
    }
    ciiareaaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiareaaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry
// Each entry contains one area address reported in a
// Level 1 LSP generated or received by this Intermediate
// System.
type CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. An area address reported in a Level 1 LSP. The
    // type is string with length: 0..20.
    Ciiareaaddr interface{}
}

func (ciiareaaddrentry *CISCOIETFISISMIB_Ciiareaaddrtable_Ciiareaaddrentry) GetEntityData() *types.CommonEntityData {
    ciiareaaddrentry.EntityData.YFilter = ciiareaaddrentry.YFilter
    ciiareaaddrentry.EntityData.YangName = "ciiAreaAddrEntry"
    ciiareaaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciiareaaddrentry.EntityData.ParentYangName = "ciiAreaAddrTable"
    ciiareaaddrentry.EntityData.SegmentPath = "ciiAreaAddrEntry" + "[ciiAreaAddr='" + fmt.Sprintf("%v", ciiareaaddrentry.Ciiareaaddr) + "']"
    ciiareaaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiareaaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiareaaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiareaaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciiareaaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiareaaddrentry.EntityData.Leafs["ciiAreaAddr"] = types.YLeaf{"Ciiareaaddr", ciiareaaddrentry.Ciiareaaddr}
    return &(ciiareaaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciisysprotsupptable
// This table contains the manually configured set of
// protocols supported by this Intermediate System.
type CISCOIETFISISMIB_Ciisysprotsupptable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by this Intermediate System. The
    // type is slice of CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry.
    Ciisysprotsuppentry []CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry
}

func (ciisysprotsupptable *CISCOIETFISISMIB_Ciisysprotsupptable) GetEntityData() *types.CommonEntityData {
    ciisysprotsupptable.EntityData.YFilter = ciisysprotsupptable.YFilter
    ciisysprotsupptable.EntityData.YangName = "ciiSysProtSuppTable"
    ciisysprotsupptable.EntityData.BundleName = "cisco_ios_xe"
    ciisysprotsupptable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciisysprotsupptable.EntityData.SegmentPath = "ciiSysProtSuppTable"
    ciisysprotsupptable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisysprotsupptable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisysprotsupptable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisysprotsupptable.EntityData.Children = make(map[string]types.YChild)
    ciisysprotsupptable.EntityData.Children["ciiSysProtSuppEntry"] = types.YChild{"Ciisysprotsuppentry", nil}
    for i := range ciisysprotsupptable.Ciisysprotsuppentry {
        ciisysprotsupptable.EntityData.Children[types.GetSegmentPath(&ciisysprotsupptable.Ciisysprotsuppentry[i])] = types.YChild{"Ciisysprotsuppentry", &ciisysprotsupptable.Ciisysprotsuppentry[i]}
    }
    ciisysprotsupptable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciisysprotsupptable.EntityData)
}

// CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry
// Each entry contains one protocol supported by
// this Intermediate System.
type CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. One supported protocol. This object follows the
    // index behavior. The type is CiiSupportedProtocol.
    Ciisysprotsuppprotocol interface{}

    // The state of the ciiSysProtSuppEntry. This object follows the RowStatus
    // behavior. The type is RowStatus.
    Ciisysprotsuppexiststate interface{}
}

func (ciisysprotsuppentry *CISCOIETFISISMIB_Ciisysprotsupptable_Ciisysprotsuppentry) GetEntityData() *types.CommonEntityData {
    ciisysprotsuppentry.EntityData.YFilter = ciisysprotsuppentry.YFilter
    ciisysprotsuppentry.EntityData.YangName = "ciiSysProtSuppEntry"
    ciisysprotsuppentry.EntityData.BundleName = "cisco_ios_xe"
    ciisysprotsuppentry.EntityData.ParentYangName = "ciiSysProtSuppTable"
    ciisysprotsuppentry.EntityData.SegmentPath = "ciiSysProtSuppEntry" + "[ciiSysProtSuppProtocol='" + fmt.Sprintf("%v", ciisysprotsuppentry.Ciisysprotsuppprotocol) + "']"
    ciisysprotsuppentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisysprotsuppentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisysprotsuppentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisysprotsuppentry.EntityData.Children = make(map[string]types.YChild)
    ciisysprotsuppentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciisysprotsuppentry.EntityData.Leafs["ciiSysProtSuppProtocol"] = types.YLeaf{"Ciisysprotsuppprotocol", ciisysprotsuppentry.Ciisysprotsuppprotocol}
    ciisysprotsuppentry.EntityData.Leafs["ciiSysProtSuppExistState"] = types.YLeaf{"Ciisysprotsuppexiststate", ciisysprotsuppentry.Ciisysprotsuppexiststate}
    return &(ciisysprotsuppentry.EntityData)
}

// CISCOIETFISISMIB_Ciisummaddrtable
// The set of IP summary addresses to use in forming
// summary TLVs originated by this Intermediate System.
// 
// An administrator may use a summary address to combine
// and modify IP Reachability announcements.  If the
// Intermediate system can reach any subset of the summary
// address, the summary address will be announced instead,
// at the configured metric.
type CISCOIETFISISMIB_Ciisummaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address. The type is slice of
    // CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry.
    Ciisummaddrentry []CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry
}

func (ciisummaddrtable *CISCOIETFISISMIB_Ciisummaddrtable) GetEntityData() *types.CommonEntityData {
    ciisummaddrtable.EntityData.YFilter = ciisummaddrtable.YFilter
    ciisummaddrtable.EntityData.YangName = "ciiSummAddrTable"
    ciisummaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciisummaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciisummaddrtable.EntityData.SegmentPath = "ciiSummAddrTable"
    ciisummaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisummaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisummaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisummaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciisummaddrtable.EntityData.Children["ciiSummAddrEntry"] = types.YChild{"Ciisummaddrentry", nil}
    for i := range ciisummaddrtable.Ciisummaddrentry {
        ciisummaddrtable.EntityData.Children[types.GetSegmentPath(&ciisummaddrtable.Ciisummaddrentry[i])] = types.YChild{"Ciisummaddrentry", &ciisummaddrtable.Ciisummaddrentry[i]}
    }
    ciisummaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciisummaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry
// Each entry contains one IP summary address.
type CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    Ciisummaddresstype interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    Ciisummaddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    Ciisummaddrprefixlen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    Ciisummaddrexiststate interface{}

    // The metric value to announce this summary address with in LSPs generated by
    // this system. The type is interface{} with range: 0..63.
    Ciisummaddrmetric interface{}

    // The wide metric value to announce this summary address with in LSPs
    // generated by this system. The type is interface{} with range:
    // 0..4294967295.
    Ciisummaddrfullmetric interface{}
}

func (ciisummaddrentry *CISCOIETFISISMIB_Ciisummaddrtable_Ciisummaddrentry) GetEntityData() *types.CommonEntityData {
    ciisummaddrentry.EntityData.YFilter = ciisummaddrentry.YFilter
    ciisummaddrentry.EntityData.YangName = "ciiSummAddrEntry"
    ciisummaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciisummaddrentry.EntityData.ParentYangName = "ciiSummAddrTable"
    ciisummaddrentry.EntityData.SegmentPath = "ciiSummAddrEntry" + "[ciiSummAddressType='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddresstype) + "']" + "[ciiSummAddress='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddress) + "']" + "[ciiSummAddrPrefixLen='" + fmt.Sprintf("%v", ciisummaddrentry.Ciisummaddrprefixlen) + "']"
    ciisummaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisummaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisummaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisummaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciisummaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciisummaddrentry.EntityData.Leafs["ciiSummAddressType"] = types.YLeaf{"Ciisummaddresstype", ciisummaddrentry.Ciisummaddresstype}
    ciisummaddrentry.EntityData.Leafs["ciiSummAddress"] = types.YLeaf{"Ciisummaddress", ciisummaddrentry.Ciisummaddress}
    ciisummaddrentry.EntityData.Leafs["ciiSummAddrPrefixLen"] = types.YLeaf{"Ciisummaddrprefixlen", ciisummaddrentry.Ciisummaddrprefixlen}
    ciisummaddrentry.EntityData.Leafs["ciiSummAddrExistState"] = types.YLeaf{"Ciisummaddrexiststate", ciisummaddrentry.Ciisummaddrexiststate}
    ciisummaddrentry.EntityData.Leafs["ciiSummAddrMetric"] = types.YLeaf{"Ciisummaddrmetric", ciisummaddrentry.Ciisummaddrmetric}
    ciisummaddrentry.EntityData.Leafs["ciiSummAddrFullMetric"] = types.YLeaf{"Ciisummaddrfullmetric", ciisummaddrentry.Ciisummaddrfullmetric}
    return &(ciisummaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciiredistributeaddrtable
// This table provides criteria to decide if a route should
// be leaked from L2 to L1 when Domain Wide Prefix leaking is
// enabled.
// 
// Addresses that match the summary mask in the table will
// be announced at L1 by routers when ciiSysL2toL1Leaking
// is enabled.  Routes that fall into the ranges specified
// are announced as is, without being summarized.  Routes
// that do not match a summary mask are not announced.
type CISCOIETFISISMIB_Ciiredistributeaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address to manage leaking L2 addresses
    // into L1. The type is slice of
    // CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry.
    Ciiredistributeaddrentry []CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry
}

func (ciiredistributeaddrtable *CISCOIETFISISMIB_Ciiredistributeaddrtable) GetEntityData() *types.CommonEntityData {
    ciiredistributeaddrtable.EntityData.YFilter = ciiredistributeaddrtable.YFilter
    ciiredistributeaddrtable.EntityData.YangName = "ciiRedistributeAddrTable"
    ciiredistributeaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciiredistributeaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiredistributeaddrtable.EntityData.SegmentPath = "ciiRedistributeAddrTable"
    ciiredistributeaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiredistributeaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiredistributeaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiredistributeaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciiredistributeaddrtable.EntityData.Children["ciiRedistributeAddrEntry"] = types.YChild{"Ciiredistributeaddrentry", nil}
    for i := range ciiredistributeaddrtable.Ciiredistributeaddrentry {
        ciiredistributeaddrtable.EntityData.Children[types.GetSegmentPath(&ciiredistributeaddrtable.Ciiredistributeaddrentry[i])] = types.YChild{"Ciiredistributeaddrentry", &ciiredistributeaddrtable.Ciiredistributeaddrentry[i]}
    }
    ciiredistributeaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiredistributeaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry
// Each entry contains one IP summary address to
// manage leaking L2 addresses into L1.
type CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    Ciiredistributeaddrtype interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    Ciiredistributeaddraddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    Ciiredistributeaddrprefixlen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    Ciiredistributeaddrexiststate interface{}
}

func (ciiredistributeaddrentry *CISCOIETFISISMIB_Ciiredistributeaddrtable_Ciiredistributeaddrentry) GetEntityData() *types.CommonEntityData {
    ciiredistributeaddrentry.EntityData.YFilter = ciiredistributeaddrentry.YFilter
    ciiredistributeaddrentry.EntityData.YangName = "ciiRedistributeAddrEntry"
    ciiredistributeaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciiredistributeaddrentry.EntityData.ParentYangName = "ciiRedistributeAddrTable"
    ciiredistributeaddrentry.EntityData.SegmentPath = "ciiRedistributeAddrEntry" + "[ciiRedistributeAddrType='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddrtype) + "']" + "[ciiRedistributeAddrAddress='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddraddress) + "']" + "[ciiRedistributeAddrPrefixLen='" + fmt.Sprintf("%v", ciiredistributeaddrentry.Ciiredistributeaddrprefixlen) + "']"
    ciiredistributeaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiredistributeaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiredistributeaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiredistributeaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciiredistributeaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiredistributeaddrentry.EntityData.Leafs["ciiRedistributeAddrType"] = types.YLeaf{"Ciiredistributeaddrtype", ciiredistributeaddrentry.Ciiredistributeaddrtype}
    ciiredistributeaddrentry.EntityData.Leafs["ciiRedistributeAddrAddress"] = types.YLeaf{"Ciiredistributeaddraddress", ciiredistributeaddrentry.Ciiredistributeaddraddress}
    ciiredistributeaddrentry.EntityData.Leafs["ciiRedistributeAddrPrefixLen"] = types.YLeaf{"Ciiredistributeaddrprefixlen", ciiredistributeaddrentry.Ciiredistributeaddrprefixlen}
    ciiredistributeaddrentry.EntityData.Leafs["ciiRedistributeAddrExistState"] = types.YLeaf{"Ciiredistributeaddrexiststate", ciiredistributeaddrentry.Ciiredistributeaddrexiststate}
    return &(ciiredistributeaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciiroutertable
// The set of hostnames and router ID.
type CISCOIETFISISMIB_Ciiroutertable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry tracks information about one peer at one level. The type is
    // slice of CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry.
    Ciirouterentry []CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry
}

func (ciiroutertable *CISCOIETFISISMIB_Ciiroutertable) GetEntityData() *types.CommonEntityData {
    ciiroutertable.EntityData.YFilter = ciiroutertable.YFilter
    ciiroutertable.EntityData.YangName = "ciiRouterTable"
    ciiroutertable.EntityData.BundleName = "cisco_ios_xe"
    ciiroutertable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiroutertable.EntityData.SegmentPath = "ciiRouterTable"
    ciiroutertable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiroutertable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiroutertable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiroutertable.EntityData.Children = make(map[string]types.YChild)
    ciiroutertable.EntityData.Children["ciiRouterEntry"] = types.YChild{"Ciirouterentry", nil}
    for i := range ciiroutertable.Ciirouterentry {
        ciiroutertable.EntityData.Children[types.GetSegmentPath(&ciiroutertable.Ciirouterentry[i])] = types.YChild{"Ciirouterentry", &ciiroutertable.Ciirouterentry[i]}
    }
    ciiroutertable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiroutertable.EntityData)
}

// CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry
// Each entry tracks information about one peer at
// one level.
type CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The System ID of the Router Peer. The type is
    // string with length: 6.
    Ciiroutersysid interface{}

    // This attribute is a key. The level of this Intermediate System. The type is
    // CiiISLevel.
    Ciirouterlevel interface{}

    // The hostname listed in LSP, or zero-length string if none. The type is
    // string.
    Ciirouterhostname interface{}

    // The Router ID of the Peer found in LSP, or zero if none. The type is
    // interface{} with range: 0..4294967295.
    Ciirouterid interface{}
}

func (ciirouterentry *CISCOIETFISISMIB_Ciiroutertable_Ciirouterentry) GetEntityData() *types.CommonEntityData {
    ciirouterentry.EntityData.YFilter = ciirouterentry.YFilter
    ciirouterentry.EntityData.YangName = "ciiRouterEntry"
    ciirouterentry.EntityData.BundleName = "cisco_ios_xe"
    ciirouterentry.EntityData.ParentYangName = "ciiRouterTable"
    ciirouterentry.EntityData.SegmentPath = "ciiRouterEntry" + "[ciiRouterSysID='" + fmt.Sprintf("%v", ciirouterentry.Ciiroutersysid) + "']" + "[ciiRouterLevel='" + fmt.Sprintf("%v", ciirouterentry.Ciirouterlevel) + "']"
    ciirouterentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciirouterentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciirouterentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciirouterentry.EntityData.Children = make(map[string]types.YChild)
    ciirouterentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciirouterentry.EntityData.Leafs["ciiRouterSysID"] = types.YLeaf{"Ciiroutersysid", ciirouterentry.Ciiroutersysid}
    ciirouterentry.EntityData.Leafs["ciiRouterLevel"] = types.YLeaf{"Ciirouterlevel", ciirouterentry.Ciirouterlevel}
    ciirouterentry.EntityData.Leafs["ciiRouterHostName"] = types.YLeaf{"Ciirouterhostname", ciirouterentry.Ciirouterhostname}
    ciirouterentry.EntityData.Leafs["ciiRouterID"] = types.YLeaf{"Ciirouterid", ciirouterentry.Ciirouterid}
    return &(ciirouterentry.EntityData)
}

// CISCOIETFISISMIB_Ciisysleveltable
// Level specific information about the System.
type CISCOIETFISISMIB_Ciisysleveltable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Describe variables defined for Area or Domain. The type is slice of
    // CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry.
    Ciisyslevelentry []CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry
}

func (ciisysleveltable *CISCOIETFISISMIB_Ciisysleveltable) GetEntityData() *types.CommonEntityData {
    ciisysleveltable.EntityData.YFilter = ciisysleveltable.YFilter
    ciisysleveltable.EntityData.YangName = "ciiSysLevelTable"
    ciisysleveltable.EntityData.BundleName = "cisco_ios_xe"
    ciisysleveltable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciisysleveltable.EntityData.SegmentPath = "ciiSysLevelTable"
    ciisysleveltable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisysleveltable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisysleveltable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisysleveltable.EntityData.Children = make(map[string]types.YChild)
    ciisysleveltable.EntityData.Children["ciiSysLevelEntry"] = types.YChild{"Ciisyslevelentry", nil}
    for i := range ciisysleveltable.Ciisyslevelentry {
        ciisysleveltable.EntityData.Children[types.GetSegmentPath(&ciisysleveltable.Ciisyslevelentry[i])] = types.YChild{"Ciisyslevelentry", &ciisysleveltable.Ciisyslevelentry[i]}
    }
    ciisysleveltable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciisysleveltable.EntityData)
}

// CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry
// Describe variables defined for Area or Domain.
type CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // Ciisyslevelindex.
    Ciisyslevelindex interface{}

    // The maximum size of LSPs and SNPs originated by this Intermediate System at
    // this level. This object follows the replaceOnlyWhileDisabled behavior. The
    // type is interface{} with range: 512..16000.
    Ciisysleveloriglspbuffsize interface{}

    // Minimum interval, in seconds, between successive generation of LSPs with
    // the same LSPID at this level by this Intermediate System.  This object
    // follows the resettingTimer behavior. The type is interface{} with range:
    // 1..65535. Units are seconds.
    Ciisyslevelminlspgenint interface{}

    // The state of the database at this level. The value 'off' indicates that
    // IS-IS is not active at this level. The value 'on' indicates that IS-IS is
    // active at this level, and not overloaded. The value 'waiting' indicates a
    // database that is low on an essential resource, such as memory. The
    // administrator may force the state to 'overloaded' by setting the object
    // ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we
    // originate LSPs with the Overload bit set. The type is CiiLevelState.
    Ciisysleveloverloadstate interface{}

    // Administratively set the overload bit for the level. The overload bit will
    // continue to be set if the implementation runs out of memory, independent of
    // this variable. The type is bool.
    Ciisyslevelsetoverload interface{}

    // If set, the overload bit should be set, and cleared after sysUpTime exceeds
    // this value. The type is interface{} with range: 0..4294967295.
    Ciisyslevelsetoverloaduntil interface{}

    // Which style of Metric do we generate in our LSPs at this level? This object
    // follows the replaceOnlyWhileDisabled behavior. The type is CiiMetricStyle.
    Ciisyslevelmetricstyle interface{}

    // Which style of Metric do we consider in our SPF computation at this level?.
    // The type is CiiMetricStyle.
    Ciisyslevelspfconsiders interface{}

    // Do we do Traffic Engineering at this level?. The type is bool.
    Ciisyslevelteenabled interface{}
}

func (ciisyslevelentry *CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry) GetEntityData() *types.CommonEntityData {
    ciisyslevelentry.EntityData.YFilter = ciisyslevelentry.YFilter
    ciisyslevelentry.EntityData.YangName = "ciiSysLevelEntry"
    ciisyslevelentry.EntityData.BundleName = "cisco_ios_xe"
    ciisyslevelentry.EntityData.ParentYangName = "ciiSysLevelTable"
    ciisyslevelentry.EntityData.SegmentPath = "ciiSysLevelEntry" + "[ciiSysLevelIndex='" + fmt.Sprintf("%v", ciisyslevelentry.Ciisyslevelindex) + "']"
    ciisyslevelentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisyslevelentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisyslevelentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisyslevelentry.EntityData.Children = make(map[string]types.YChild)
    ciisyslevelentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelIndex"] = types.YLeaf{"Ciisyslevelindex", ciisyslevelentry.Ciisyslevelindex}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelOrigLSPBuffSize"] = types.YLeaf{"Ciisysleveloriglspbuffsize", ciisyslevelentry.Ciisysleveloriglspbuffsize}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelMinLSPGenInt"] = types.YLeaf{"Ciisyslevelminlspgenint", ciisyslevelentry.Ciisyslevelminlspgenint}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelOverloadState"] = types.YLeaf{"Ciisysleveloverloadstate", ciisyslevelentry.Ciisysleveloverloadstate}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelSetOverload"] = types.YLeaf{"Ciisyslevelsetoverload", ciisyslevelentry.Ciisyslevelsetoverload}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelSetOverloadUntil"] = types.YLeaf{"Ciisyslevelsetoverloaduntil", ciisyslevelentry.Ciisyslevelsetoverloaduntil}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelMetricStyle"] = types.YLeaf{"Ciisyslevelmetricstyle", ciisyslevelentry.Ciisyslevelmetricstyle}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelSPFConsiders"] = types.YLeaf{"Ciisyslevelspfconsiders", ciisyslevelentry.Ciisyslevelspfconsiders}
    ciisyslevelentry.EntityData.Leafs["ciiSysLevelTEEnabled"] = types.YLeaf{"Ciisyslevelteenabled", ciisyslevelentry.Ciisyslevelteenabled}
    return &(ciisyslevelentry.EntityData)
}

// CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex represents The level that this entry describes.
type CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex string

const (
    CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex_level1IS CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex = "level1IS"

    CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex_level2IS CISCOIETFISISMIB_Ciisysleveltable_Ciisyslevelentry_Ciisyslevelindex = "level2IS"
)

// CISCOIETFISISMIB_Ciicirctable
// The table of circuits used by this
// Intermediate System.
type CISCOIETFISISMIB_Ciicirctable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircEntry exists for each circuit used by Integrated IS-IS on this
    // system. The type is slice of CISCOIETFISISMIB_Ciicirctable_Ciicircentry.
    Ciicircentry []CISCOIETFISISMIB_Ciicirctable_Ciicircentry
}

func (ciicirctable *CISCOIETFISISMIB_Ciicirctable) GetEntityData() *types.CommonEntityData {
    ciicirctable.EntityData.YFilter = ciicirctable.YFilter
    ciicirctable.EntityData.YangName = "ciiCircTable"
    ciicirctable.EntityData.BundleName = "cisco_ios_xe"
    ciicirctable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciicirctable.EntityData.SegmentPath = "ciiCircTable"
    ciicirctable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicirctable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicirctable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicirctable.EntityData.Children = make(map[string]types.YChild)
    ciicirctable.EntityData.Children["ciiCircEntry"] = types.YChild{"Ciicircentry", nil}
    for i := range ciicirctable.Ciicircentry {
        ciicirctable.EntityData.Children[types.GetSegmentPath(&ciicirctable.Ciicircentry[i])] = types.YChild{"Ciicircentry", &ciicirctable.Ciicircentry[i]}
    }
    ciicirctable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciicirctable.EntityData)
}

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry
// An ciiCircEntry exists for each circuit used by
// Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The identifier of this circuit, unique within the
    // Intermediate System.  This object follows the index behavior.  This is for
    // SNMP Indexing purposes only and need not have any relation to any protocol
    // value. The type is interface{} with range: 1..2147483647.
    Ciicircindex interface{}

    // The value of ifIndex for the interface to which this circuit corresponds.  
    // This object cannot be modified after creation. The type is interface{} with
    // range: 1..2147483647.
    Ciicircifindex interface{}

    // A specifier for the part of the interface ifIndex to which this circuit
    // corresponds, such as a DLCI or VPI/VCI. This object cannot be modified
    // after creation. The type is interface{} with range:
    // -2147483648..2147483647.
    Ciicircifsubindex interface{}

    // The administrative state of the circuit. This object follows the
    // CiiAdminState behavior. The type is CiiAdminState.
    Ciicircadminstate interface{}

    // The existence state of this circuit. This object follows the RowStatus
    // behavior.  Setting the state to 'notInService' halts the generation and
    // processing of IS-IS protocol PDUs on this circuit.  Setting the state to
    // 'destroy' will also erase any configuration associated with the circuit.
    // The type is RowStatus.
    Ciicircexiststate interface{}

    // The type of the circuit. This object follows the replaceOnlyWhileDisabled
    // behavior. The type specified must be compatible with the type of the
    // interface defined by the value of ciiCircIfIndex. The type is Ciicirctype.
    Ciicirctype interface{}

    // If true, suppress normal transmission of and interpretation of Intra-domain
    // IS-IS PDUs on this circuit. The type is bool.
    Ciicircextdomain interface{}

    // Indicates which type of packets will be sent and accepted on this circuit.
    // The values used will be modified by the settings of ciiSysType. This object
    // follows the replaceOnlyWhileDisabled behavior. The type is Ciicirclevel.
    Ciicirclevel interface{}

    // Should we include this interface in LSPs, even if it is not running the
    // IS-IS Protocol?. The type is bool.
    Ciicircpassivecircuit interface{}

    // Is this port a member of a mesh group, or blocked? Circuits in the same
    // mesh group act as a virtual multiaccess network.  LSPs seen on one circuit
    // in a mesh group will not be flooded to another circuit in the same mesh
    // group. The type is Ciicircmeshgroupenabled.
    Ciicircmeshgroupenabled interface{}

    // Circuits in the same mesh group act as a virtual multiaccess network.  LSPs
    // seen on one circuit in a mesh group will not be flooded to another circuit
    // in the same mesh group.  If ciiCircMeshGroupEnabled is inactive or blocked,
    // this value is ignored. The type is interface{} with range: 0..4294967295.
    Ciicircmeshgroup interface{}

    // Can we send unpadded hellos on LAN circuits?  'false' means LAN Hellos must
    // be padded. Implementations should allow the administrator to read this
    // value.  An implementation need not be able to support unpadded hellos to be
    // conformant. The type is bool.
    Ciicircsmallhellos interface{}

    // If the circuit is enabled, the value of sysUpTime when ciiCircAdminState
    // most recently entered the state 'on'.  If the circuit is not 'on', the
    // value of sysUpTime when the circuit last entered state 'on', 0 if the
    // circuit has never been 'on'. The type is interface{} with range:
    // 0..4294967295.
    Ciicirclastuptime interface{}

    // Is this circuit enabled to run 3Way handshake?. The type is bool.
    Ciicirc3Wayenabled interface{}

    // The value to be used as the extended circuit ID in 3Way handshake.  This
    // value is only used if ciiCirc3WayEnabled is true, and must be unique across
    // all circuits on this IS. The type is interface{} with range: 0..4294967295.
    Ciicircextendedcircid interface{}
}

func (ciicircentry *CISCOIETFISISMIB_Ciicirctable_Ciicircentry) GetEntityData() *types.CommonEntityData {
    ciicircentry.EntityData.YFilter = ciicircentry.YFilter
    ciicircentry.EntityData.YangName = "ciiCircEntry"
    ciicircentry.EntityData.BundleName = "cisco_ios_xe"
    ciicircentry.EntityData.ParentYangName = "ciiCircTable"
    ciicircentry.EntityData.SegmentPath = "ciiCircEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicircentry.Ciicircindex) + "']"
    ciicircentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicircentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicircentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicircentry.EntityData.Children = make(map[string]types.YChild)
    ciicircentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciicircentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciicircentry.Ciicircindex}
    ciicircentry.EntityData.Leafs["ciiCircIfIndex"] = types.YLeaf{"Ciicircifindex", ciicircentry.Ciicircifindex}
    ciicircentry.EntityData.Leafs["ciiCircIfSubIndex"] = types.YLeaf{"Ciicircifsubindex", ciicircentry.Ciicircifsubindex}
    ciicircentry.EntityData.Leafs["ciiCircAdminState"] = types.YLeaf{"Ciicircadminstate", ciicircentry.Ciicircadminstate}
    ciicircentry.EntityData.Leafs["ciiCircExistState"] = types.YLeaf{"Ciicircexiststate", ciicircentry.Ciicircexiststate}
    ciicircentry.EntityData.Leafs["ciiCircType"] = types.YLeaf{"Ciicirctype", ciicircentry.Ciicirctype}
    ciicircentry.EntityData.Leafs["ciiCircExtDomain"] = types.YLeaf{"Ciicircextdomain", ciicircentry.Ciicircextdomain}
    ciicircentry.EntityData.Leafs["ciiCircLevel"] = types.YLeaf{"Ciicirclevel", ciicircentry.Ciicirclevel}
    ciicircentry.EntityData.Leafs["ciiCircPassiveCircuit"] = types.YLeaf{"Ciicircpassivecircuit", ciicircentry.Ciicircpassivecircuit}
    ciicircentry.EntityData.Leafs["ciiCircMeshGroupEnabled"] = types.YLeaf{"Ciicircmeshgroupenabled", ciicircentry.Ciicircmeshgroupenabled}
    ciicircentry.EntityData.Leafs["ciiCircMeshGroup"] = types.YLeaf{"Ciicircmeshgroup", ciicircentry.Ciicircmeshgroup}
    ciicircentry.EntityData.Leafs["ciiCircSmallHellos"] = types.YLeaf{"Ciicircsmallhellos", ciicircentry.Ciicircsmallhellos}
    ciicircentry.EntityData.Leafs["ciiCircLastUpTime"] = types.YLeaf{"Ciicirclastuptime", ciicircentry.Ciicirclastuptime}
    ciicircentry.EntityData.Leafs["ciiCirc3WayEnabled"] = types.YLeaf{"Ciicirc3Wayenabled", ciicircentry.Ciicirc3Wayenabled}
    ciicircentry.EntityData.Leafs["ciiCircExtendedCircID"] = types.YLeaf{"Ciicircextendedcircid", ciicircentry.Ciicircextendedcircid}
    return &(ciicircentry.EntityData)
}

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel represents object follows the replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level1 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level1"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level2 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level2"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel_level1L2 CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirclevel = "level1L2"
)

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled represents in the same mesh group.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_inactive CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "inactive"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_blocked CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "blocked"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled_set CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircmeshgroupenabled = "set"
)

// CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype represents by the value of ciiCircIfIndex.
type CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype string

const (
    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_broadcast CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "broadcast"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_ptToPt CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "ptToPt"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_staticIn CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "staticIn"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_staticOut CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "staticOut"

    CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype_dA CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicirctype = "dA"
)

// CISCOIETFISISMIB_Ciicircleveltable
// Level specific information about circuits used by IS-IS
type CISCOIETFISISMIB_Ciicircleveltable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircLevelEntry exists for each level on each circuit used by
    // Integrated IS-IS on this system. The type is slice of
    // CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry.
    Ciicirclevelentry []CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry
}

func (ciicircleveltable *CISCOIETFISISMIB_Ciicircleveltable) GetEntityData() *types.CommonEntityData {
    ciicircleveltable.EntityData.YFilter = ciicircleveltable.YFilter
    ciicircleveltable.EntityData.YangName = "ciiCircLevelTable"
    ciicircleveltable.EntityData.BundleName = "cisco_ios_xe"
    ciicircleveltable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciicircleveltable.EntityData.SegmentPath = "ciiCircLevelTable"
    ciicircleveltable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicircleveltable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicircleveltable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicircleveltable.EntityData.Children = make(map[string]types.YChild)
    ciicircleveltable.EntityData.Children["ciiCircLevelEntry"] = types.YChild{"Ciicirclevelentry", nil}
    for i := range ciicircleveltable.Ciicirclevelentry {
        ciicircleveltable.EntityData.Children[types.GetSegmentPath(&ciicircleveltable.Ciicirclevelentry[i])] = types.YChild{"Ciicirclevelentry", &ciicircleveltable.Ciicirclevelentry[i]}
    }
    ciicircleveltable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciicircleveltable.EntityData)
}

// CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry
// An ciiCircLevelEntry exists for each level on
// each circuit used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The level that this entry describes. The type is
    // Ciicirclevelindex.
    Ciicirclevelindex interface{}

    // The metric value of this circuit for this level. The type is interface{}
    // with range: 0..63.
    Ciicirclevelmetric interface{}

    // The wide metric value of this circuit for this level. The type is
    // interface{} with range: 0..16777215.
    Ciicirclevelwidemetric interface{}

    // The priority for becoming LAN Designated Intermediate System at this level.
    // The type is interface{} with range: 0..127.
    Ciicirclevelispriority interface{}

    // A one byte identifier that can be used in protocol packets to identify a
    // circuit.  Values of ciiCircLevelIDOctet do not need to be unique.  They are
    // only required to differ on LANs where the Intermediate System is the
    // Designated Intermediate System. The type is interface{} with range: 0..255.
    Ciicirclevelidoctet interface{}

    // On a point to point circuit with a fully initialized adjacency to a peer
    // IS, the value of this object is the circuit ID negotiated during adjacency
    // initialization. On a point to point circuit without such an adjacency, the
    // value is the concatenation of the local system ID and the one byte
    // ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed
    // for the circuit ID.  On other circuit types, the value returned is the zero
    // length OCTET STRING. The type is string with length: 0 | 7.
    Ciicirclevelid interface{}

    // The ID of the LAN Designated Intermediate System on this circuit at this
    // level. If, for any reason, this system is not partaking in the relevant
    // Designated Intermediate System election process, then the value returned is
    // the zero length OCTET STRING. The type is string with length: 0 | 7.
    Ciicircleveldesis interface{}

    // This value is multiplied by the corresponding HelloTimer and the result in
    // seconds (rounded up) is used as the holding time in transmitted hellos, to
    // be used by receivers of hello packets from this IS. The type is interface{}
    // with range: 2..100.
    Ciicirclevelhellomultiplier interface{}

    // Maximum period, in milliseconds, between IIH PDUs on multiaccess networks
    // at this level for LANs. The value at L1 is used as the period between
    // Hellos on L1L2 point to point circuits.  Setting this value at level 2 on
    // an L1L2 point to point circuit will result in an error of
    // InconsistentValue.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 10..600000. Units are milliseconds.
    Ciicirclevelhellotimer interface{}

    // Period, in milliseconds, between Hello PDUs on multiaccess networks when
    // this IS is the Designated Intermediate System.  This object follows the
    // resettingTimer behavior. The type is interface{} with range: 10..120000.
    // Units are milliseconds.
    Ciicircleveldrhellotimer interface{}

    // Minimal interval of time, in milliseconds, between transmissions of LSPs on
    // an interface at this level. The type is interface{} with range: 1..65535.
    // Units are milliseconds.
    Ciicirclevellspthrottle interface{}

    // Minimum interval, in seconds, between re-transmission of an LSP at this
    // level. This object follows the resettingTimer behavior.  Note that
    // ciiCircLevelLSPThrottle controls how fast we send back to back LSPs.  This
    // variable controls how fast we re-send the same LSP. The type is interface{}
    // with range: 1..300. Units are seconds.
    Ciicirclevelminlspretransint interface{}

    // Interval of time, in seconds, between periodic transmission of a complete
    // set of CSNPs on multiaccess networks if this router is the designated
    // router at this level.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 1..600. Units are seconds.
    Ciicirclevelcsnpinterval interface{}

    // Minimum interval in seconds between sending Partial Sequence Number PDUs at
    // this level. This object follows the resettingTimer behavior. The type is
    // interface{} with range: 1..120. Units are seconds.
    Ciicirclevelpartsnpinterval interface{}
}

func (ciicirclevelentry *CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry) GetEntityData() *types.CommonEntityData {
    ciicirclevelentry.EntityData.YFilter = ciicirclevelentry.YFilter
    ciicirclevelentry.EntityData.YangName = "ciiCircLevelEntry"
    ciicirclevelentry.EntityData.BundleName = "cisco_ios_xe"
    ciicirclevelentry.EntityData.ParentYangName = "ciiCircLevelTable"
    ciicirclevelentry.EntityData.SegmentPath = "ciiCircLevelEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicirclevelentry.Ciicircindex) + "']" + "[ciiCircLevelIndex='" + fmt.Sprintf("%v", ciicirclevelentry.Ciicirclevelindex) + "']"
    ciicirclevelentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicirclevelentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicirclevelentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicirclevelentry.EntityData.Children = make(map[string]types.YChild)
    ciicirclevelentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciicirclevelentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciicirclevelentry.Ciicircindex}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelIndex"] = types.YLeaf{"Ciicirclevelindex", ciicirclevelentry.Ciicirclevelindex}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelMetric"] = types.YLeaf{"Ciicirclevelmetric", ciicirclevelentry.Ciicirclevelmetric}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelWideMetric"] = types.YLeaf{"Ciicirclevelwidemetric", ciicirclevelentry.Ciicirclevelwidemetric}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelISPriority"] = types.YLeaf{"Ciicirclevelispriority", ciicirclevelentry.Ciicirclevelispriority}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelIDOctet"] = types.YLeaf{"Ciicirclevelidoctet", ciicirclevelentry.Ciicirclevelidoctet}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelID"] = types.YLeaf{"Ciicirclevelid", ciicirclevelentry.Ciicirclevelid}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelDesIS"] = types.YLeaf{"Ciicircleveldesis", ciicirclevelentry.Ciicircleveldesis}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelHelloMultiplier"] = types.YLeaf{"Ciicirclevelhellomultiplier", ciicirclevelentry.Ciicirclevelhellomultiplier}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelHelloTimer"] = types.YLeaf{"Ciicirclevelhellotimer", ciicirclevelentry.Ciicirclevelhellotimer}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelDRHelloTimer"] = types.YLeaf{"Ciicircleveldrhellotimer", ciicirclevelentry.Ciicircleveldrhellotimer}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelLSPThrottle"] = types.YLeaf{"Ciicirclevellspthrottle", ciicirclevelentry.Ciicirclevellspthrottle}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelMinLSPRetransInt"] = types.YLeaf{"Ciicirclevelminlspretransint", ciicirclevelentry.Ciicirclevelminlspretransint}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelCSNPInterval"] = types.YLeaf{"Ciicirclevelcsnpinterval", ciicirclevelentry.Ciicirclevelcsnpinterval}
    ciicirclevelentry.EntityData.Leafs["ciiCircLevelPartSNPInterval"] = types.YLeaf{"Ciicirclevelpartsnpinterval", ciicirclevelentry.Ciicirclevelpartsnpinterval}
    return &(ciicirclevelentry.EntityData)
}

// CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex represents The level that this entry describes.
type CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex string

const (
    CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex_level1IS CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex = "level1IS"

    CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex_level2IS CISCOIETFISISMIB_Ciicircleveltable_Ciicirclevelentry_Ciicirclevelindex = "level2IS"
)

// CISCOIETFISISMIB_Ciisystemcountertable
// System wide counters for this Intermediate System.
type CISCOIETFISISMIB_Ciisystemcountertable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-wide IS-IS counters. The type is slice of
    // CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry.
    Ciisystemcounterentry []CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry
}

func (ciisystemcountertable *CISCOIETFISISMIB_Ciisystemcountertable) GetEntityData() *types.CommonEntityData {
    ciisystemcountertable.EntityData.YFilter = ciisystemcountertable.YFilter
    ciisystemcountertable.EntityData.YangName = "ciiSystemCounterTable"
    ciisystemcountertable.EntityData.BundleName = "cisco_ios_xe"
    ciisystemcountertable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciisystemcountertable.EntityData.SegmentPath = "ciiSystemCounterTable"
    ciisystemcountertable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisystemcountertable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisystemcountertable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisystemcountertable.EntityData.Children = make(map[string]types.YChild)
    ciisystemcountertable.EntityData.Children["ciiSystemCounterEntry"] = types.YChild{"Ciisystemcounterentry", nil}
    for i := range ciisystemcountertable.Ciisystemcounterentry {
        ciisystemcountertable.EntityData.Children[types.GetSegmentPath(&ciisystemcountertable.Ciisystemcounterentry[i])] = types.YChild{"Ciisystemcounterentry", &ciisystemcountertable.Ciisystemcounterentry[i]}
    }
    ciisystemcountertable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciisystemcountertable.EntityData)
}

// CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry
// System-wide IS-IS counters.
type CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // Ciisysstatlevel.
    Ciisysstatlevel interface{}

    // Number of corrupted in-memory LSP frames detected.  LSPs received from the
    // wire with a bad checksum are silently dropped and not counted.  LSPs
    // received from the wire with parse errors are counted by
    // ciiSysStatLSPErrors. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatcorrlsps interface{}

    // The number of frames with authentication type mismatches recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatauthtypefails interface{}

    // The number of frames with authentication failures recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    Ciisysstatauthfails interface{}

    // Number of times the LSP database has become overloaded. The type is
    // interface{} with range: 0..4294967295.
    Ciisysstatlspdbaseoloads interface{}

    // Number of times a manual address has been dropped from the area. The type
    // is interface{} with range: 0..4294967295.
    Ciisysstatmanaddrdropfromareas interface{}

    // Number of times the IS has attempted to exceed the maximum sequence number.
    // The type is interface{} with range: 0..4294967295.
    Ciisysstatattmpttoexmaxseqnums interface{}

    // Number of times a sequence number skip has occurred. The type is
    // interface{} with range: 0..4294967295.
    Ciisysstatseqnumskips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. The type is interface{} with range: 0..4294967295.
    Ciisysstatownlsppurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length to that of the receiving system. The type is interface{} with range:
    // 0..4294967295. Units are frames.
    Ciisysstatidfieldlenmismatches interface{}

    // Partition changes. The type is interface{} with range: 0..4294967295.
    Ciisysstatpartchanges interface{}

    // Number of times we ran SPF at this level. The type is interface{} with
    // range: 0..4294967295.
    Ciisysstatspfruns interface{}

    // Number of LSP frames with errors we have received. The type is interface{}
    // with range: 0..4294967295. Units are frames.
    Ciisysstatlsperrors interface{}
}

func (ciisystemcounterentry *CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry) GetEntityData() *types.CommonEntityData {
    ciisystemcounterentry.EntityData.YFilter = ciisystemcounterentry.YFilter
    ciisystemcounterentry.EntityData.YangName = "ciiSystemCounterEntry"
    ciisystemcounterentry.EntityData.BundleName = "cisco_ios_xe"
    ciisystemcounterentry.EntityData.ParentYangName = "ciiSystemCounterTable"
    ciisystemcounterentry.EntityData.SegmentPath = "ciiSystemCounterEntry" + "[ciiSysStatLevel='" + fmt.Sprintf("%v", ciisystemcounterentry.Ciisysstatlevel) + "']"
    ciisystemcounterentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciisystemcounterentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciisystemcounterentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciisystemcounterentry.EntityData.Children = make(map[string]types.YChild)
    ciisystemcounterentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatLevel"] = types.YLeaf{"Ciisysstatlevel", ciisystemcounterentry.Ciisysstatlevel}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatCorrLSPs"] = types.YLeaf{"Ciisysstatcorrlsps", ciisystemcounterentry.Ciisysstatcorrlsps}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatAuthTypeFails"] = types.YLeaf{"Ciisysstatauthtypefails", ciisystemcounterentry.Ciisysstatauthtypefails}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatAuthFails"] = types.YLeaf{"Ciisysstatauthfails", ciisystemcounterentry.Ciisysstatauthfails}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatLSPDbaseOloads"] = types.YLeaf{"Ciisysstatlspdbaseoloads", ciisystemcounterentry.Ciisysstatlspdbaseoloads}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatManAddrDropFromAreas"] = types.YLeaf{"Ciisysstatmanaddrdropfromareas", ciisystemcounterentry.Ciisysstatmanaddrdropfromareas}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatAttmptToExMaxSeqNums"] = types.YLeaf{"Ciisysstatattmpttoexmaxseqnums", ciisystemcounterentry.Ciisysstatattmpttoexmaxseqnums}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatSeqNumSkips"] = types.YLeaf{"Ciisysstatseqnumskips", ciisystemcounterentry.Ciisysstatseqnumskips}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatOwnLSPPurges"] = types.YLeaf{"Ciisysstatownlsppurges", ciisystemcounterentry.Ciisysstatownlsppurges}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatIDFieldLenMismatches"] = types.YLeaf{"Ciisysstatidfieldlenmismatches", ciisystemcounterentry.Ciisysstatidfieldlenmismatches}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatPartChanges"] = types.YLeaf{"Ciisysstatpartchanges", ciisystemcounterentry.Ciisysstatpartchanges}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatSPFRuns"] = types.YLeaf{"Ciisysstatspfruns", ciisystemcounterentry.Ciisysstatspfruns}
    ciisystemcounterentry.EntityData.Leafs["ciiSysStatLSPErrors"] = types.YLeaf{"Ciisysstatlsperrors", ciisystemcounterentry.Ciisysstatlsperrors}
    return &(ciisystemcounterentry.EntityData)
}

// CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel represents The level that this entry describes.
type CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel string

const (
    CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel_level1IS CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel = "level1IS"

    CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel_level2IS CISCOIETFISISMIB_Ciisystemcountertable_Ciisystemcounterentry_Ciisysstatlevel = "level2IS"
)

// CISCOIETFISISMIB_Ciicircuitcountertable
// Circuit specific counters for this
// Intermediate System.
type CISCOIETFISISMIB_Ciicircuitcountertable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircuitCounterEntry exists for each circuit used by Integrated IS-IS
    // on this system. The type is slice of
    // CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry.
    Ciicircuitcounterentry []CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry
}

func (ciicircuitcountertable *CISCOIETFISISMIB_Ciicircuitcountertable) GetEntityData() *types.CommonEntityData {
    ciicircuitcountertable.EntityData.YFilter = ciicircuitcountertable.YFilter
    ciicircuitcountertable.EntityData.YangName = "ciiCircuitCounterTable"
    ciicircuitcountertable.EntityData.BundleName = "cisco_ios_xe"
    ciicircuitcountertable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciicircuitcountertable.EntityData.SegmentPath = "ciiCircuitCounterTable"
    ciicircuitcountertable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicircuitcountertable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicircuitcountertable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicircuitcountertable.EntityData.Children = make(map[string]types.YChild)
    ciicircuitcountertable.EntityData.Children["ciiCircuitCounterEntry"] = types.YChild{"Ciicircuitcounterentry", nil}
    for i := range ciicircuitcountertable.Ciicircuitcounterentry {
        ciicircuitcountertable.EntityData.Children[types.GetSegmentPath(&ciicircuitcountertable.Ciicircuitcounterentry[i])] = types.YChild{"Ciicircuitcounterentry", &ciicircuitcountertable.Ciicircuitcounterentry[i]}
    }
    ciicircuitcountertable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciicircuitcountertable.EntityData)
}

// CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry
// An ciiCircuitCounterEntry exists for each circuit
// used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. What type of circuit saw these counts?  The point
    // to point Hello PDU includes both L1 and L2, and ISs form a single adjacency
    // on point to point links. Thus we combine counts on point to point links
    // into one group. The type is Ciicircuittype.
    Ciicircuittype interface{}

    // The number of times an adjacency state change has occurred on this circuit.
    // The type is interface{} with range: 0..4294967295.
    Ciicircadjchanges interface{}

    // The number of adjacencies on this circuit. The type is interface{} with
    // range: 0..4294967295.
    Ciicircnumadj interface{}

    // The number of times initialization of this circuit has failed.  This counts
    // events such as PPP NCP failures. Failures to form an adjacency are counted
    // by ciiCircRejAdjs. The type is interface{} with range: 0..4294967295.
    Ciicircinitfails interface{}

    // The number of times an adjacency has been rejected on this circuit. The
    // type is interface{} with range: 0..4294967295.
    Ciicircrejadjs interface{}

    // The number of times an IS-IS control PDU with an ID field length different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    Ciicircidfieldlenmismatches interface{}

    // The number of times an IS-IS control PDU with a max area address field
    // different to that for this system has been received. The type is
    // interface{} with range: 0..4294967295.
    Ciicircmaxareaaddrmismatches interface{}

    // The number of times an IS-IS control PDU with an auth type field different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295.
    Ciicircauthtypefails interface{}

    // The number of times an IS-IS control PDU with the correct auth type has
    // failed to pass authentication validation. The type is interface{} with
    // range: 0..4294967295.
    Ciicircauthfails interface{}

    // The number of times the Designated IS has changed on this circuit at this
    // level.  If the circuit is point to point, this count is zero. The type is
    // interface{} with range: 0..4294967295.
    Ciicirclandesischanges interface{}
}

func (ciicircuitcounterentry *CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry) GetEntityData() *types.CommonEntityData {
    ciicircuitcounterentry.EntityData.YFilter = ciicircuitcounterentry.YFilter
    ciicircuitcounterentry.EntityData.YangName = "ciiCircuitCounterEntry"
    ciicircuitcounterentry.EntityData.BundleName = "cisco_ios_xe"
    ciicircuitcounterentry.EntityData.ParentYangName = "ciiCircuitCounterTable"
    ciicircuitcounterentry.EntityData.SegmentPath = "ciiCircuitCounterEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciicircuitcounterentry.Ciicircindex) + "']" + "[ciiCircuitType='" + fmt.Sprintf("%v", ciicircuitcounterentry.Ciicircuittype) + "']"
    ciicircuitcounterentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciicircuitcounterentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciicircuitcounterentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciicircuitcounterentry.EntityData.Children = make(map[string]types.YChild)
    ciicircuitcounterentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciicircuitcounterentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciicircuitcounterentry.Ciicircindex}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircuitType"] = types.YLeaf{"Ciicircuittype", ciicircuitcounterentry.Ciicircuittype}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircAdjChanges"] = types.YLeaf{"Ciicircadjchanges", ciicircuitcounterentry.Ciicircadjchanges}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircNumAdj"] = types.YLeaf{"Ciicircnumadj", ciicircuitcounterentry.Ciicircnumadj}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircInitFails"] = types.YLeaf{"Ciicircinitfails", ciicircuitcounterentry.Ciicircinitfails}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircRejAdjs"] = types.YLeaf{"Ciicircrejadjs", ciicircuitcounterentry.Ciicircrejadjs}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircIDFieldLenMismatches"] = types.YLeaf{"Ciicircidfieldlenmismatches", ciicircuitcounterentry.Ciicircidfieldlenmismatches}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircMaxAreaAddrMismatches"] = types.YLeaf{"Ciicircmaxareaaddrmismatches", ciicircuitcounterentry.Ciicircmaxareaaddrmismatches}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircAuthTypeFails"] = types.YLeaf{"Ciicircauthtypefails", ciicircuitcounterentry.Ciicircauthtypefails}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircAuthFails"] = types.YLeaf{"Ciicircauthfails", ciicircuitcounterentry.Ciicircauthfails}
    ciicircuitcounterentry.EntityData.Leafs["ciiCircLANDesISChanges"] = types.YLeaf{"Ciicirclandesischanges", ciicircuitcounterentry.Ciicirclandesischanges}
    return &(ciicircuitcounterentry.EntityData)
}

// CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype represents point to point links into one group.
type CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype string

const (
    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_lanlevel1 CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "lanlevel1"

    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_lanlevel2 CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "lanlevel2"

    CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype_p2pcircuit CISCOIETFISISMIB_Ciicircuitcountertable_Ciicircuitcounterentry_Ciicircuittype = "p2pcircuit"
)

// CISCOIETFISISMIB_Ciipacketcountertable
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_Ciipacketcountertable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction. The type is slice of
    // CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry.
    Ciipacketcounterentry []CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry
}

func (ciipacketcountertable *CISCOIETFISISMIB_Ciipacketcountertable) GetEntityData() *types.CommonEntityData {
    ciipacketcountertable.EntityData.YFilter = ciipacketcountertable.YFilter
    ciipacketcountertable.EntityData.YangName = "ciiPacketCounterTable"
    ciipacketcountertable.EntityData.BundleName = "cisco_ios_xe"
    ciipacketcountertable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciipacketcountertable.EntityData.SegmentPath = "ciiPacketCounterTable"
    ciipacketcountertable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciipacketcountertable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciipacketcountertable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciipacketcountertable.EntityData.Children = make(map[string]types.YChild)
    ciipacketcountertable.EntityData.Children["ciiPacketCounterEntry"] = types.YChild{"Ciipacketcounterentry", nil}
    for i := range ciipacketcountertable.Ciipacketcounterentry {
        ciipacketcountertable.EntityData.Children[types.GetSegmentPath(&ciipacketcountertable.Ciipacketcounterentry[i])] = types.YChild{"Ciipacketcounterentry", &ciipacketcountertable.Ciipacketcounterentry[i]}
    }
    ciipacketcountertable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciipacketcountertable.EntityData)
}

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The level at which these PDU counts have been
    // collected. The type is Ciipacketcountlevel.
    Ciipacketcountlevel interface{}

    // This attribute is a key. Were we sending or receiving these PDUs?. The type
    // is Ciipacketcountdirection.
    Ciipacketcountdirection interface{}

    // The number of IS-IS Hello PDU frames seen in this direction at this level. 
    // Point-to-Point IIH PDUs are counted at the lowest enabled level: at L1 on
    // L1 or L1L2 circuits, and at L2 otherwise. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    Ciipacketcountiihellos interface{}

    // The number of ES-IS Hello PDU frames seen in this direction.  ISH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    Ciipacketcountishellos interface{}

    // The number of ES Hello PDU frames seen in this direction.  ESH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    Ciipacketcounteshellos interface{}

    // The number of IS-IS LSP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountlsps interface{}

    // The number of IS-IS CSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountcsnps interface{}

    // The number of IS-IS PSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountpsnps interface{}

    // The number of unknown IS-IS PDU frames seen at this level. The type is
    // interface{} with range: 0..4294967295. Units are frames.
    Ciipacketcountunknowns interface{}
}

func (ciipacketcounterentry *CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry) GetEntityData() *types.CommonEntityData {
    ciipacketcounterentry.EntityData.YFilter = ciipacketcounterentry.YFilter
    ciipacketcounterentry.EntityData.YangName = "ciiPacketCounterEntry"
    ciipacketcounterentry.EntityData.BundleName = "cisco_ios_xe"
    ciipacketcounterentry.EntityData.ParentYangName = "ciiPacketCounterTable"
    ciipacketcounterentry.EntityData.SegmentPath = "ciiPacketCounterEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciicircindex) + "']" + "[ciiPacketCountLevel='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciipacketcountlevel) + "']" + "[ciiPacketCountDirection='" + fmt.Sprintf("%v", ciipacketcounterentry.Ciipacketcountdirection) + "']"
    ciipacketcounterentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciipacketcounterentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciipacketcounterentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciipacketcounterentry.EntityData.Children = make(map[string]types.YChild)
    ciipacketcounterentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciipacketcounterentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciipacketcounterentry.Ciicircindex}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountLevel"] = types.YLeaf{"Ciipacketcountlevel", ciipacketcounterentry.Ciipacketcountlevel}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountDirection"] = types.YLeaf{"Ciipacketcountdirection", ciipacketcounterentry.Ciipacketcountdirection}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountIIHellos"] = types.YLeaf{"Ciipacketcountiihellos", ciipacketcounterentry.Ciipacketcountiihellos}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountISHellos"] = types.YLeaf{"Ciipacketcountishellos", ciipacketcounterentry.Ciipacketcountishellos}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountESHellos"] = types.YLeaf{"Ciipacketcounteshellos", ciipacketcounterentry.Ciipacketcounteshellos}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountLSPs"] = types.YLeaf{"Ciipacketcountlsps", ciipacketcounterentry.Ciipacketcountlsps}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountCSNPs"] = types.YLeaf{"Ciipacketcountcsnps", ciipacketcounterentry.Ciipacketcountcsnps}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountPSNPs"] = types.YLeaf{"Ciipacketcountpsnps", ciipacketcounterentry.Ciipacketcountpsnps}
    ciipacketcounterentry.EntityData.Leafs["ciiPacketCountUnknowns"] = types.YLeaf{"Ciipacketcountunknowns", ciipacketcounterentry.Ciipacketcountunknowns}
    return &(ciipacketcounterentry.EntityData)
}

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection represents Were we sending or receiving these PDUs?
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection string

const (
    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection_sending CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection = "sending"

    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection_receiving CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountdirection = "receiving"
)

// CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel represents The level at which these PDU counts have been collected.
type CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel string

const (
    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel_level1 CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel = "level1"

    CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel_level2 CISCOIETFISISMIB_Ciipacketcountertable_Ciipacketcounterentry_Ciipacketcountlevel = "level2"
)

// CISCOIETFISISMIB_Ciiisadjtable
// The table of adjacencies to Intermediate Systems.
type CISCOIETFISISMIB_Ciiisadjtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry corresponds to one adjacency to an Intermediate System on this
    // system. The type is slice of CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry.
    Ciiisadjentry []CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry
}

func (ciiisadjtable *CISCOIETFISISMIB_Ciiisadjtable) GetEntityData() *types.CommonEntityData {
    ciiisadjtable.EntityData.YFilter = ciiisadjtable.YFilter
    ciiisadjtable.EntityData.YangName = "ciiISAdjTable"
    ciiisadjtable.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiisadjtable.EntityData.SegmentPath = "ciiISAdjTable"
    ciiisadjtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjtable.EntityData.Children = make(map[string]types.YChild)
    ciiisadjtable.EntityData.Children["ciiISAdjEntry"] = types.YChild{"Ciiisadjentry", nil}
    for i := range ciiisadjtable.Ciiisadjentry {
        ciiisadjtable.EntityData.Children[types.GetSegmentPath(&ciiisadjtable.Ciiisadjentry[i])] = types.YChild{"Ciiisadjentry", &ciiisadjtable.Ciiisadjentry[i]}
    }
    ciiisadjtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiisadjtable.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry
// Each entry corresponds to one adjacency to an
// Intermediate System on this system.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. A unique value identifying the IS adjacency from
    // all other such adjacencies on this circuit. This value is automatically
    // assigned by the system when the adjacency is created. The type is
    // interface{} with range: 1..2000000000.
    Ciiisadjindex interface{}

    // The state of the adjacency. The type is Ciiisadjstate.
    Ciiisadjstate interface{}

    // The 3Way state of the adjacency.  These are picked to match the historical
    // on-the-wire representation of the 3Way state, and are not intended to match
    // ciiISAdjState. The type is Ciiisadj3Waystate.
    Ciiisadj3Waystate interface{}

    // The SNPA address of the neighboring system. The type is string with length:
    // 0..20.
    Ciiisadjneighsnpaaddress interface{}

    // The type of the neighboring system. The type is Ciiisadjneighsystype.
    Ciiisadjneighsystype interface{}

    // The system ID of the neighboring Intermediate System. The type is string
    // with length: 6.
    Ciiisadjneighsysid interface{}

    // The 4 byte Extended Circuit ID learned from the Neighbor during 3-way
    // handshake, or 0. The type is interface{} with range: 0..4294967295.
    Ciiisadjnbrextendedcircid interface{}

    // How is the adjacency used?  On a point-to-point link, this might be
    // level1and2, but on a LAN, the usage will be level1 on the adjacency between
    // peers at L1, and level2 for the adjacency between peers at L2. The type is
    // Ciiisadjusage.
    Ciiisadjusage interface{}

    // The holding time in seconds for this adjacency. This value is based on
    // received IIH PDUs and the elapsed time since receipt. The type is
    // interface{} with range: 1..65535. Units are seconds.
    Ciiisadjholdtimer interface{}

    // Priority of the neighboring Intermediate System for becoming the Designated
    // Intermediate System. The type is interface{} with range: 0..127.
    Ciiisadjneighpriority interface{}

    // If the ciiISAdjState is in state 'up', the value of sysUpTime when the
    // adjacency most recently entered the state 'up',  or 0 if it has never been
    // in state 'up'. The type is interface{} with range: 0..4294967295. Units are
    // hundredths of a second.
    Ciiisadjlastuptime interface{}
}

func (ciiisadjentry *CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry) GetEntityData() *types.CommonEntityData {
    ciiisadjentry.EntityData.YFilter = ciiisadjentry.YFilter
    ciiisadjentry.EntityData.YangName = "ciiISAdjEntry"
    ciiisadjentry.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjentry.EntityData.ParentYangName = "ciiISAdjTable"
    ciiisadjentry.EntityData.SegmentPath = "ciiISAdjEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjentry.Ciiisadjindex) + "']"
    ciiisadjentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjentry.EntityData.Children = make(map[string]types.YChild)
    ciiisadjentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiisadjentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciiisadjentry.Ciicircindex}
    ciiisadjentry.EntityData.Leafs["ciiISAdjIndex"] = types.YLeaf{"Ciiisadjindex", ciiisadjentry.Ciiisadjindex}
    ciiisadjentry.EntityData.Leafs["ciiISAdjState"] = types.YLeaf{"Ciiisadjstate", ciiisadjentry.Ciiisadjstate}
    ciiisadjentry.EntityData.Leafs["ciiISAdj3WayState"] = types.YLeaf{"Ciiisadj3Waystate", ciiisadjentry.Ciiisadj3Waystate}
    ciiisadjentry.EntityData.Leafs["ciiISAdjNeighSNPAAddress"] = types.YLeaf{"Ciiisadjneighsnpaaddress", ciiisadjentry.Ciiisadjneighsnpaaddress}
    ciiisadjentry.EntityData.Leafs["ciiISAdjNeighSysType"] = types.YLeaf{"Ciiisadjneighsystype", ciiisadjentry.Ciiisadjneighsystype}
    ciiisadjentry.EntityData.Leafs["ciiISAdjNeighSysID"] = types.YLeaf{"Ciiisadjneighsysid", ciiisadjentry.Ciiisadjneighsysid}
    ciiisadjentry.EntityData.Leafs["ciiISAdjNbrExtendedCircID"] = types.YLeaf{"Ciiisadjnbrextendedcircid", ciiisadjentry.Ciiisadjnbrextendedcircid}
    ciiisadjentry.EntityData.Leafs["ciiISAdjUsage"] = types.YLeaf{"Ciiisadjusage", ciiisadjentry.Ciiisadjusage}
    ciiisadjentry.EntityData.Leafs["ciiISAdjHoldTimer"] = types.YLeaf{"Ciiisadjholdtimer", ciiisadjentry.Ciiisadjholdtimer}
    ciiisadjentry.EntityData.Leafs["ciiISAdjNeighPriority"] = types.YLeaf{"Ciiisadjneighpriority", ciiisadjentry.Ciiisadjneighpriority}
    ciiisadjentry.EntityData.Leafs["ciiISAdjLastUpTime"] = types.YLeaf{"Ciiisadjlastuptime", ciiisadjentry.Ciiisadjlastuptime}
    return &(ciiisadjentry.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate represents ciiISAdjState.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_up CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "up"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_initializing CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "initializing"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_down CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "down"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate_failed CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadj3Waystate = "failed"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype represents The type of the neighboring system.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l1IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l1IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l2IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l2IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_l1L2IntermediateSystem CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "l1L2IntermediateSystem"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype_unknown CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjneighsystype = "unknown"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate represents The state of the adjacency
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_down CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "down"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_initializing CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "initializing"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_up CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "up"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate_failed CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjstate = "failed"
)

// CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage represents and level2 for the adjacency between peers at L2.
type CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage string

const (
    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level1 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level1"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level2 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level2"

    CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage_level1and2 CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjusage = "level1and2"
)

// CISCOIETFISISMIB_Ciiisadjareaaddrtable
// This table contains the set of Area Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjareaaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one Area Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry.
    Ciiisadjareaaddrentry []CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry
}

func (ciiisadjareaaddrtable *CISCOIETFISISMIB_Ciiisadjareaaddrtable) GetEntityData() *types.CommonEntityData {
    ciiisadjareaaddrtable.EntityData.YFilter = ciiisadjareaaddrtable.YFilter
    ciiisadjareaaddrtable.EntityData.YangName = "ciiISAdjAreaAddrTable"
    ciiisadjareaaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjareaaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiisadjareaaddrtable.EntityData.SegmentPath = "ciiISAdjAreaAddrTable"
    ciiisadjareaaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjareaaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjareaaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjareaaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciiisadjareaaddrtable.EntityData.Children["ciiISAdjAreaAddrEntry"] = types.YChild{"Ciiisadjareaaddrentry", nil}
    for i := range ciiisadjareaaddrtable.Ciiisadjareaaddrentry {
        ciiisadjareaaddrtable.EntityData.Children[types.GetSegmentPath(&ciiisadjareaaddrtable.Ciiisadjareaaddrentry[i])] = types.YChild{"Ciiisadjareaaddrentry", &ciiisadjareaaddrtable.Ciiisadjareaaddrentry[i]}
    }
    ciiisadjareaaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiisadjareaaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry
// Each entry contains one Area Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. An index for the areas associated with one
    // neighbor. This provides a simple way to walk the table. The type is
    // interface{} with range: 1..2000000000.
    Ciiisadjareaaddrindex interface{}

    // One Area Address as reported in IIH PDUs received from the neighbor. The
    // type is string with length: 0..20.
    Ciiisadjareaaddress interface{}
}

func (ciiisadjareaaddrentry *CISCOIETFISISMIB_Ciiisadjareaaddrtable_Ciiisadjareaaddrentry) GetEntityData() *types.CommonEntityData {
    ciiisadjareaaddrentry.EntityData.YFilter = ciiisadjareaaddrentry.YFilter
    ciiisadjareaaddrentry.EntityData.YangName = "ciiISAdjAreaAddrEntry"
    ciiisadjareaaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjareaaddrentry.EntityData.ParentYangName = "ciiISAdjAreaAddrTable"
    ciiisadjareaaddrentry.EntityData.SegmentPath = "ciiISAdjAreaAddrEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciiisadjindex) + "']" + "[ciiISAdjAreaAddrIndex='" + fmt.Sprintf("%v", ciiisadjareaaddrentry.Ciiisadjareaaddrindex) + "']"
    ciiisadjareaaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjareaaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjareaaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjareaaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciiisadjareaaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiisadjareaaddrentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciiisadjareaaddrentry.Ciicircindex}
    ciiisadjareaaddrentry.EntityData.Leafs["ciiISAdjIndex"] = types.YLeaf{"Ciiisadjindex", ciiisadjareaaddrentry.Ciiisadjindex}
    ciiisadjareaaddrentry.EntityData.Leafs["ciiISAdjAreaAddrIndex"] = types.YLeaf{"Ciiisadjareaaddrindex", ciiisadjareaaddrentry.Ciiisadjareaaddrindex}
    ciiisadjareaaddrentry.EntityData.Leafs["ciiISAdjAreaAddress"] = types.YLeaf{"Ciiisadjareaaddress", ciiisadjareaaddrentry.Ciiisadjareaaddress}
    return &(ciiisadjareaaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjipaddrtable
// This table contains the set of IP Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjipaddrtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry.
    Ciiisadjipaddrentry []CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry
}

func (ciiisadjipaddrtable *CISCOIETFISISMIB_Ciiisadjipaddrtable) GetEntityData() *types.CommonEntityData {
    ciiisadjipaddrtable.EntityData.YFilter = ciiisadjipaddrtable.YFilter
    ciiisadjipaddrtable.EntityData.YangName = "ciiISAdjIPAddrTable"
    ciiisadjipaddrtable.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjipaddrtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiisadjipaddrtable.EntityData.SegmentPath = "ciiISAdjIPAddrTable"
    ciiisadjipaddrtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjipaddrtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjipaddrtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjipaddrtable.EntityData.Children = make(map[string]types.YChild)
    ciiisadjipaddrtable.EntityData.Children["ciiISAdjIPAddrEntry"] = types.YChild{"Ciiisadjipaddrentry", nil}
    for i := range ciiisadjipaddrtable.Ciiisadjipaddrentry {
        ciiisadjipaddrtable.EntityData.Children[types.GetSegmentPath(&ciiisadjipaddrtable.Ciiisadjipaddrentry[i])] = types.YChild{"Ciiisadjipaddrentry", &ciiisadjipaddrtable.Ciiisadjipaddrentry[i]}
    }
    ciiisadjipaddrtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiisadjipaddrtable.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry
// Each entry contains one IP Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. An index to this table which identifies the IP
    // addresses to which this entry belongs. The type is interface{} with range:
    // 1..2000000000.
    Ciiisadjipaddrindex interface{}

    // The type of one IP Address as reported in IIH PDUs received from the
    // neighbor. The type is InetAddressType.
    Ciiisadjipaddrtype interface{}

    // One IP Address as reported in IIH PDUs received from the neighbor. The type
    // is string with length: 4 | 16.
    Ciiisadjipaddraddress interface{}
}

func (ciiisadjipaddrentry *CISCOIETFISISMIB_Ciiisadjipaddrtable_Ciiisadjipaddrentry) GetEntityData() *types.CommonEntityData {
    ciiisadjipaddrentry.EntityData.YFilter = ciiisadjipaddrentry.YFilter
    ciiisadjipaddrentry.EntityData.YangName = "ciiISAdjIPAddrEntry"
    ciiisadjipaddrentry.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjipaddrentry.EntityData.ParentYangName = "ciiISAdjIPAddrTable"
    ciiisadjipaddrentry.EntityData.SegmentPath = "ciiISAdjIPAddrEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciiisadjindex) + "']" + "[ciiISAdjIPAddrIndex='" + fmt.Sprintf("%v", ciiisadjipaddrentry.Ciiisadjipaddrindex) + "']"
    ciiisadjipaddrentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjipaddrentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjipaddrentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjipaddrentry.EntityData.Children = make(map[string]types.YChild)
    ciiisadjipaddrentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiisadjipaddrentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciiisadjipaddrentry.Ciicircindex}
    ciiisadjipaddrentry.EntityData.Leafs["ciiISAdjIndex"] = types.YLeaf{"Ciiisadjindex", ciiisadjipaddrentry.Ciiisadjindex}
    ciiisadjipaddrentry.EntityData.Leafs["ciiISAdjIPAddrIndex"] = types.YLeaf{"Ciiisadjipaddrindex", ciiisadjipaddrentry.Ciiisadjipaddrindex}
    ciiisadjipaddrentry.EntityData.Leafs["ciiISAdjIPAddrType"] = types.YLeaf{"Ciiisadjipaddrtype", ciiisadjipaddrentry.Ciiisadjipaddrtype}
    ciiisadjipaddrentry.EntityData.Leafs["ciiISAdjIPAddrAddress"] = types.YLeaf{"Ciiisadjipaddraddress", ciiisadjipaddrentry.Ciiisadjipaddraddress}
    return &(ciiisadjipaddrentry.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjprotsupptable
// This table contains the set of protocols supported by
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_Ciiisadjprotsupptable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by a neighboring Intermediate
    // System as reported in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry.
    Ciiisadjprotsuppentry []CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry
}

func (ciiisadjprotsupptable *CISCOIETFISISMIB_Ciiisadjprotsupptable) GetEntityData() *types.CommonEntityData {
    ciiisadjprotsupptable.EntityData.YFilter = ciiisadjprotsupptable.YFilter
    ciiisadjprotsupptable.EntityData.YangName = "ciiISAdjProtSuppTable"
    ciiisadjprotsupptable.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjprotsupptable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiisadjprotsupptable.EntityData.SegmentPath = "ciiISAdjProtSuppTable"
    ciiisadjprotsupptable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjprotsupptable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjprotsupptable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjprotsupptable.EntityData.Children = make(map[string]types.YChild)
    ciiisadjprotsupptable.EntityData.Children["ciiISAdjProtSuppEntry"] = types.YChild{"Ciiisadjprotsuppentry", nil}
    for i := range ciiisadjprotsupptable.Ciiisadjprotsuppentry {
        ciiisadjprotsupptable.EntityData.Children[types.GetSegmentPath(&ciiisadjprotsupptable.Ciiisadjprotsuppentry[i])] = types.YChild{"Ciiisadjprotsuppentry", &ciiisadjprotsupptable.Ciiisadjprotsuppentry[i]}
    }
    ciiisadjprotsupptable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiisadjprotsupptable.EntityData)
}

// CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry
// Each entry contains one protocol supported by a
// neighboring Intermediate System as reported in its IIH
// PDUs.
type CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciiisadjtable_Ciiisadjentry_Ciiisadjindex
    Ciiisadjindex interface{}

    // This attribute is a key. One supported protocol as reported in IIH PDUs
    // received from the neighbor. The type is CiiSupportedProtocol.
    Ciiisadjprotsuppprotocol interface{}
}

func (ciiisadjprotsuppentry *CISCOIETFISISMIB_Ciiisadjprotsupptable_Ciiisadjprotsuppentry) GetEntityData() *types.CommonEntityData {
    ciiisadjprotsuppentry.EntityData.YFilter = ciiisadjprotsuppentry.YFilter
    ciiisadjprotsuppentry.EntityData.YangName = "ciiISAdjProtSuppEntry"
    ciiisadjprotsuppentry.EntityData.BundleName = "cisco_ios_xe"
    ciiisadjprotsuppentry.EntityData.ParentYangName = "ciiISAdjProtSuppTable"
    ciiisadjprotsuppentry.EntityData.SegmentPath = "ciiISAdjProtSuppEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciicircindex) + "']" + "[ciiISAdjIndex='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciiisadjindex) + "']" + "[ciiISAdjProtSuppProtocol='" + fmt.Sprintf("%v", ciiisadjprotsuppentry.Ciiisadjprotsuppprotocol) + "']"
    ciiisadjprotsuppentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiisadjprotsuppentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiisadjprotsuppentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiisadjprotsuppentry.EntityData.Children = make(map[string]types.YChild)
    ciiisadjprotsuppentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiisadjprotsuppentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciiisadjprotsuppentry.Ciicircindex}
    ciiisadjprotsuppentry.EntityData.Leafs["ciiISAdjIndex"] = types.YLeaf{"Ciiisadjindex", ciiisadjprotsuppentry.Ciiisadjindex}
    ciiisadjprotsuppentry.EntityData.Leafs["ciiISAdjProtSuppProtocol"] = types.YLeaf{"Ciiisadjprotsuppprotocol", ciiisadjprotsuppentry.Ciiisadjprotsuppprotocol}
    return &(ciiisadjprotsuppentry.EntityData)
}

// CISCOIETFISISMIB_Ciiratable
// The table of Reachable Addresses to NSAPs or Address
// Prefixes.
type CISCOIETFISISMIB_Ciiratable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry defines a Reachable Address to a NSAP or Address Prefix. The
    // type is slice of CISCOIETFISISMIB_Ciiratable_Ciiraentry.
    Ciiraentry []CISCOIETFISISMIB_Ciiratable_Ciiraentry
}

func (ciiratable *CISCOIETFISISMIB_Ciiratable) GetEntityData() *types.CommonEntityData {
    ciiratable.EntityData.YFilter = ciiratable.YFilter
    ciiratable.EntityData.YangName = "ciiRATable"
    ciiratable.EntityData.BundleName = "cisco_ios_xe"
    ciiratable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiratable.EntityData.SegmentPath = "ciiRATable"
    ciiratable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiratable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiratable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiratable.EntityData.Children = make(map[string]types.YChild)
    ciiratable.EntityData.Children["ciiRAEntry"] = types.YChild{"Ciiraentry", nil}
    for i := range ciiratable.Ciiraentry {
        ciiratable.EntityData.Children[types.GetSegmentPath(&ciiratable.Ciiraentry[i])] = types.YChild{"Ciiraentry", &ciiratable.Ciiraentry[i]}
    }
    ciiratable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiratable.EntityData)
}

// CISCOIETFISISMIB_Ciiratable_Ciiraentry
// Each entry defines a Reachable Address to a NSAP or
// Address Prefix.
type CISCOIETFISISMIB_Ciiratable_Ciiraentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciicirctable_Ciicircentry_Ciicircindex
    Ciicircindex interface{}

    // This attribute is a key. The identifier for this ciiRAEntry. This value
    // must be unique amongst all Reachable Addresses on the same parent Circuit.
    // This object follows the index and ManualOrAutomatic behaviors. The type is
    // interface{} with range: 1..2000000000.
    Ciiraindex interface{}

    // The existence state of this Reachable Address. This object follows the
    // ManualOrAutomatic behaviors. The type is RowStatus.
    Ciiraexiststate interface{}

    // The administrative state of the Reachable Address. This object follows the
    // CiiAdminState and ManualOrAutomatic behaviors. The type is CiiAdminState.
    Ciiraadminstate interface{}

    // The destination of this Reachable Address. This is an Address Prefix. This
    // object follows the replaceOnlyWhileDisabled and ManualOrAutomatic
    // behaviors. The type is string with length: 0..20.
    Ciiraaddrprefix interface{}

    // The type of mapping to be employed to ascertain the SNPA Address which
    // should be used in forwarding PDUs for this Reachable Address prefix. This
    // object follows the ManualOrAutomatic behavior. The following values of
    // mapping type are defined:      none: The mapping is null because the
    // neighbor SNPA is           implicit by nature of the subnetwork (e.g. a    
    // point-to-point linkage).      explicit: The subnetwork addresses in the
    // object           ciiRASNPAAddress is to be used.      extractIDI: The SNPA
    // is embedded in the IDI of           the destination NSAP Address. The
    // mapping           algorithm extracts the SNPA to be used          
    // according to the format and encoding rules of           ISO8473/Add2. This
    // SNPA extraction algorithm can           be used in conjunction with
    // Reachable Address           prefixes from the X.121, F.69, E.163 and E.164 
    // addressing subdomains.      extractDSP: All, or a suffix, of the SNPA is
    // embedded           in the DSP of the destination address. This SNPA        
    // extraction algorithm extracts the embedded           subnetwork addressing
    // information by performing a           logical AND of the ciiRASNPAMask
    // object value           with the destination address. The part of the       
    // SNPA extracted from the destination NSAP is           appended to the
    // ciiRASNPAPrefix object value to           form the next hop subnetwork
    // addressing           information. The type is Ciiramaptype.
    Ciiramaptype interface{}

    // The metric value for reaching the specified prefix over this circuit. This
    // object follows the ManualOrAutomatic behavior. The type is interface{} with
    // range: 0..63.
    Ciirametric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    Ciirametrictype interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches the address prefix of the Reachable Address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 0..20.
    Ciirasnpaaddress interface{}

    // A bit mask with 1 bits indicating the positions in the effective
    // destination address from which embedded SNPA information is to be
    // extracted. For the extraction the first octet of the ciiRASNPAMask object
    // value is aligned with the first octet (AFI) of the NSAP Address. If the
    // ciiRASNPAMask object value and NSAP Address are of different lengths, the
    // shorter of the two is logically padded with zeros before performing the
    // extraction. This object follows the ManualOrAutomatic behavior. The type is
    // string with length: 0..20.
    Ciirasnpamask interface{}

    // A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA
    // Address to use is formed by concatenating the fixed SNPA prefix with a
    // variable SNPA part that is extracted from the effective destination
    // address. For Reachable Address prefixes in which the entire SNPA is
    // embedded in the DSP the SNPA Prefix shall be null. This object follows the
    // ManualOrAutomatic behavior. The type is string with length: 0..20.
    Ciirasnpaprefix interface{}

    // The type of Reachable address. Those of type manual are created by the
    // network manager. Those of type automatic are created through propagation of
    // routing information from another routing protocol (eg. IDRP). . The type is
    // Ciiratype.
    Ciiratype interface{}
}

func (ciiraentry *CISCOIETFISISMIB_Ciiratable_Ciiraentry) GetEntityData() *types.CommonEntityData {
    ciiraentry.EntityData.YFilter = ciiraentry.YFilter
    ciiraentry.EntityData.YangName = "ciiRAEntry"
    ciiraentry.EntityData.BundleName = "cisco_ios_xe"
    ciiraentry.EntityData.ParentYangName = "ciiRATable"
    ciiraentry.EntityData.SegmentPath = "ciiRAEntry" + "[ciiCircIndex='" + fmt.Sprintf("%v", ciiraentry.Ciicircindex) + "']" + "[ciiRAIndex='" + fmt.Sprintf("%v", ciiraentry.Ciiraindex) + "']"
    ciiraentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiraentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiraentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiraentry.EntityData.Children = make(map[string]types.YChild)
    ciiraentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiraentry.EntityData.Leafs["ciiCircIndex"] = types.YLeaf{"Ciicircindex", ciiraentry.Ciicircindex}
    ciiraentry.EntityData.Leafs["ciiRAIndex"] = types.YLeaf{"Ciiraindex", ciiraentry.Ciiraindex}
    ciiraentry.EntityData.Leafs["ciiRAExistState"] = types.YLeaf{"Ciiraexiststate", ciiraentry.Ciiraexiststate}
    ciiraentry.EntityData.Leafs["ciiRAAdminState"] = types.YLeaf{"Ciiraadminstate", ciiraentry.Ciiraadminstate}
    ciiraentry.EntityData.Leafs["ciiRAAddrPrefix"] = types.YLeaf{"Ciiraaddrprefix", ciiraentry.Ciiraaddrprefix}
    ciiraentry.EntityData.Leafs["ciiRAMapType"] = types.YLeaf{"Ciiramaptype", ciiraentry.Ciiramaptype}
    ciiraentry.EntityData.Leafs["ciiRAMetric"] = types.YLeaf{"Ciirametric", ciiraentry.Ciirametric}
    ciiraentry.EntityData.Leafs["ciiRAMetricType"] = types.YLeaf{"Ciirametrictype", ciiraentry.Ciirametrictype}
    ciiraentry.EntityData.Leafs["ciiRASNPAAddress"] = types.YLeaf{"Ciirasnpaaddress", ciiraentry.Ciirasnpaaddress}
    ciiraentry.EntityData.Leafs["ciiRASNPAMask"] = types.YLeaf{"Ciirasnpamask", ciiraentry.Ciirasnpamask}
    ciiraentry.EntityData.Leafs["ciiRASNPAPrefix"] = types.YLeaf{"Ciirasnpaprefix", ciiraentry.Ciirasnpaprefix}
    ciiraentry.EntityData.Leafs["ciiRAType"] = types.YLeaf{"Ciiratype", ciiraentry.Ciiratype}
    return &(ciiraentry.EntityData)
}

// CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype represents           information.
type CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype string

const (
    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_none CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "none"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_explicit CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "explicit"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_extractIDI CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "extractIDI"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype_extractDSP CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiramaptype = "extractDSP"
)

// CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype represents protocol (eg. IDRP). 
type CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype string

const (
    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype_manual CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype = "manual"

    CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype_automatic CISCOIETFISISMIB_Ciiratable_Ciiraentry_Ciiratype = "automatic"
)

// CISCOIETFISISMIB_Ciiipratable
// The table of IP Reachable Addresses to networks,
// subnetworks or hosts either manually configured or
// learned from another protocol.
type CISCOIETFISISMIB_Ciiipratable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry defines an IP Reachable Address to a network, subnetwork or
    // host.  Each IP Reachable Address may have multiple entries in the table,
    // one for each equal cost path to the reachable address. The type is slice of
    // CISCOIETFISISMIB_Ciiipratable_Ciiipraentry.
    Ciiipraentry []CISCOIETFISISMIB_Ciiipratable_Ciiipraentry
}

func (ciiipratable *CISCOIETFISISMIB_Ciiipratable) GetEntityData() *types.CommonEntityData {
    ciiipratable.EntityData.YFilter = ciiipratable.YFilter
    ciiipratable.EntityData.YangName = "ciiIPRATable"
    ciiipratable.EntityData.BundleName = "cisco_ios_xe"
    ciiipratable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiipratable.EntityData.SegmentPath = "ciiIPRATable"
    ciiipratable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiipratable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiipratable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiipratable.EntityData.Children = make(map[string]types.YChild)
    ciiipratable.EntityData.Children["ciiIPRAEntry"] = types.YChild{"Ciiipraentry", nil}
    for i := range ciiipratable.Ciiipraentry {
        ciiipratable.EntityData.Children[types.GetSegmentPath(&ciiipratable.Ciiipraentry[i])] = types.YChild{"Ciiipraentry", &ciiipratable.Ciiipraentry[i]}
    }
    ciiipratable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciiipratable.EntityData)
}

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry
// Each entry defines an IP Reachable Address to a network,
// subnetwork or host.
// 
// Each IP Reachable Address may have multiple entries in the
// table, one for each equal cost path to the reachable address.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of this IP Reachable Address.  This
    // object follows the ManualOrAutomatic behavior. The type is InetAddressType.
    Ciiipradesttype interface{}

    // This attribute is a key. The destination of this IP Reachable Address. This
    // is either a network address, subnetwork address or host address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 4 | 16.
    Ciiipradest interface{}

    // This attribute is a key. The length of the IP Netmask for Reachability
    // Address. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..128.
    Ciiipradestprefixlen interface{}

    // This attribute is a key. Index of next hop.  Used when there are multiple
    // Equal Cost Multipath alternatives for the same destination. The type is
    // interface{} with range: 1..65535.
    Ciiipranexthopindex interface{}

    // The type of the IP next hop address. The type is InetAddressType.
    Ciiipranexthoptype interface{}

    // The IP next hop to this destination. The type is string with length: 4 |
    // 16.
    Ciiipranexthop interface{}

    // The type of this IP Reachable Address. Those of type manual are created by
    // the network manager. Those of type automatic are created through
    // propagation of routing information from another routing protocol.  This
    // object follows the ManualOrAutomatic behavior. The type is Ciiipratype.
    Ciiipratype interface{}

    // The state of this IP Reachable Address. This object follows the
    // ExistenceState and ManualOrAutomatic behaviors. The type is RowStatus.
    Ciiipraexiststate interface{}

    // The administrative state of the IP Reachable Address. This object follows
    // the CiiAdminState and ManualOrAutomatic behaviors. The type is
    // CiiAdminState.
    Ciiipraadminstate interface{}

    // The metric value for reaching the specified destination over this circuit.
    // This object follows the ManualOrAutomatic behavior. The type is interface{}
    // with range: 0..63.
    Ciiiprametric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    Ciiiprametrictype interface{}

    // The wide metric value for reaching the specified destination over this
    // circuit. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..4294967295.
    Ciiiprafullmetric interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches this IP Reachable Address. This object follows
    // the ManualOrAutomatic behavior. The type is string with length: 0..20.
    Ciiiprasnpaaddress interface{}

    // The origin of this route. The type is Ciiiprasourcetype.
    Ciiiprasourcetype interface{}
}

func (ciiipraentry *CISCOIETFISISMIB_Ciiipratable_Ciiipraentry) GetEntityData() *types.CommonEntityData {
    ciiipraentry.EntityData.YFilter = ciiipraentry.YFilter
    ciiipraentry.EntityData.YangName = "ciiIPRAEntry"
    ciiipraentry.EntityData.BundleName = "cisco_ios_xe"
    ciiipraentry.EntityData.ParentYangName = "ciiIPRATable"
    ciiipraentry.EntityData.SegmentPath = "ciiIPRAEntry" + "[ciiIPRADestType='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradesttype) + "']" + "[ciiIPRADest='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradest) + "']" + "[ciiIPRADestPrefixLen='" + fmt.Sprintf("%v", ciiipraentry.Ciiipradestprefixlen) + "']" + "[ciiIPRANextHopIndex='" + fmt.Sprintf("%v", ciiipraentry.Ciiipranexthopindex) + "']"
    ciiipraentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiipraentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiipraentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiipraentry.EntityData.Children = make(map[string]types.YChild)
    ciiipraentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciiipraentry.EntityData.Leafs["ciiIPRADestType"] = types.YLeaf{"Ciiipradesttype", ciiipraentry.Ciiipradesttype}
    ciiipraentry.EntityData.Leafs["ciiIPRADest"] = types.YLeaf{"Ciiipradest", ciiipraentry.Ciiipradest}
    ciiipraentry.EntityData.Leafs["ciiIPRADestPrefixLen"] = types.YLeaf{"Ciiipradestprefixlen", ciiipraentry.Ciiipradestprefixlen}
    ciiipraentry.EntityData.Leafs["ciiIPRANextHopIndex"] = types.YLeaf{"Ciiipranexthopindex", ciiipraentry.Ciiipranexthopindex}
    ciiipraentry.EntityData.Leafs["ciiIPRANextHopType"] = types.YLeaf{"Ciiipranexthoptype", ciiipraentry.Ciiipranexthoptype}
    ciiipraentry.EntityData.Leafs["ciiIPRANextHop"] = types.YLeaf{"Ciiipranexthop", ciiipraentry.Ciiipranexthop}
    ciiipraentry.EntityData.Leafs["ciiIPRAType"] = types.YLeaf{"Ciiipratype", ciiipraentry.Ciiipratype}
    ciiipraentry.EntityData.Leafs["ciiIPRAExistState"] = types.YLeaf{"Ciiipraexiststate", ciiipraentry.Ciiipraexiststate}
    ciiipraentry.EntityData.Leafs["ciiIPRAAdminState"] = types.YLeaf{"Ciiipraadminstate", ciiipraentry.Ciiipraadminstate}
    ciiipraentry.EntityData.Leafs["ciiIPRAMetric"] = types.YLeaf{"Ciiiprametric", ciiipraentry.Ciiiprametric}
    ciiipraentry.EntityData.Leafs["ciiIPRAMetricType"] = types.YLeaf{"Ciiiprametrictype", ciiipraentry.Ciiiprametrictype}
    ciiipraentry.EntityData.Leafs["ciiIPRAFullMetric"] = types.YLeaf{"Ciiiprafullmetric", ciiipraentry.Ciiiprafullmetric}
    ciiipraentry.EntityData.Leafs["ciiIPRASNPAAddress"] = types.YLeaf{"Ciiiprasnpaaddress", ciiipraentry.Ciiiprasnpaaddress}
    ciiipraentry.EntityData.Leafs["ciiIPRASourceType"] = types.YLeaf{"Ciiiprasourcetype", ciiipraentry.Ciiiprasourcetype}
    return &(ciiipraentry.EntityData)
}

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype represents The origin of this route.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype string

const (
    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_static CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "static"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_direct CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "direct"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_ospfv2 CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "ospfv2"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_ospfv3 CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "ospfv3"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_isis CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "isis"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_rip CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "rip"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_igrp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "igrp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_eigrp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "eigrp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_bgp CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "bgp"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype_other CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiiprasourcetype = "other"
)

// CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype represents follows the ManualOrAutomatic behavior.
type CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype string

const (
    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype_manual CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype = "manual"

    CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype_automatic CISCOIETFISISMIB_Ciiipratable_Ciiipraentry_Ciiipratype = "automatic"
)

// CISCOIETFISISMIB_Ciilspsummarytable
// The table of LSP Headers.
type CISCOIETFISISMIB_Ciilspsummarytable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry provides a summary describing an LSP currently stored in the
    // system. The type is slice of
    // CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry.
    Ciilspsummaryentry []CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry
}

func (ciilspsummarytable *CISCOIETFISISMIB_Ciilspsummarytable) GetEntityData() *types.CommonEntityData {
    ciilspsummarytable.EntityData.YFilter = ciilspsummarytable.YFilter
    ciilspsummarytable.EntityData.YangName = "ciiLSPSummaryTable"
    ciilspsummarytable.EntityData.BundleName = "cisco_ios_xe"
    ciilspsummarytable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciilspsummarytable.EntityData.SegmentPath = "ciiLSPSummaryTable"
    ciilspsummarytable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciilspsummarytable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciilspsummarytable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciilspsummarytable.EntityData.Children = make(map[string]types.YChild)
    ciilspsummarytable.EntityData.Children["ciiLSPSummaryEntry"] = types.YChild{"Ciilspsummaryentry", nil}
    for i := range ciilspsummarytable.Ciilspsummaryentry {
        ciilspsummarytable.EntityData.Children[types.GetSegmentPath(&ciilspsummarytable.Ciilspsummaryentry[i])] = types.YChild{"Ciilspsummaryentry", &ciilspsummarytable.Ciilspsummaryentry[i]}
    }
    ciilspsummarytable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciilspsummarytable.EntityData)
}

// CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry
// Each entry provides a summary describing an
// LSP currently stored in the system.
type CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. At which level does this LSP appear?. The type is
    // CiiISLevel.
    Ciilsplevel interface{}

    // This attribute is a key. The 8 byte LSP ID, consisting of the SystemID,
    // Circuit ID, and Fragment Number. The type is string with length: 0 | 8.
    Ciilspid interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    Ciilspseq interface{}

    // Is this LSP being purged by this System?. The type is bool.
    Ciilspzerolife interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    Ciilspchecksum interface{}

    // The remaining lifetime in seconds for this LSP. The type is interface{}
    // with range: 0..65535. Units are seconds.
    Ciilsplifetimeremain interface{}

    // The length of this LSP. The type is interface{} with range: 0..65535.
    Ciilsppdulength interface{}

    // Flags carried by the LSP. The type is interface{} with range: 0..255.
    Ciilspattributes interface{}
}

func (ciilspsummaryentry *CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry) GetEntityData() *types.CommonEntityData {
    ciilspsummaryentry.EntityData.YFilter = ciilspsummaryentry.YFilter
    ciilspsummaryentry.EntityData.YangName = "ciiLSPSummaryEntry"
    ciilspsummaryentry.EntityData.BundleName = "cisco_ios_xe"
    ciilspsummaryentry.EntityData.ParentYangName = "ciiLSPSummaryTable"
    ciilspsummaryentry.EntityData.SegmentPath = "ciiLSPSummaryEntry" + "[ciiLSPLevel='" + fmt.Sprintf("%v", ciilspsummaryentry.Ciilsplevel) + "']" + "[ciiLSPID='" + fmt.Sprintf("%v", ciilspsummaryentry.Ciilspid) + "']"
    ciilspsummaryentry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciilspsummaryentry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciilspsummaryentry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciilspsummaryentry.EntityData.Children = make(map[string]types.YChild)
    ciilspsummaryentry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciilspsummaryentry.EntityData.Leafs["ciiLSPLevel"] = types.YLeaf{"Ciilsplevel", ciilspsummaryentry.Ciilsplevel}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPID"] = types.YLeaf{"Ciilspid", ciilspsummaryentry.Ciilspid}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPSeq"] = types.YLeaf{"Ciilspseq", ciilspsummaryentry.Ciilspseq}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPZeroLife"] = types.YLeaf{"Ciilspzerolife", ciilspsummaryentry.Ciilspzerolife}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPChecksum"] = types.YLeaf{"Ciilspchecksum", ciilspsummaryentry.Ciilspchecksum}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPLifetimeRemain"] = types.YLeaf{"Ciilsplifetimeremain", ciilspsummaryentry.Ciilsplifetimeremain}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPPDULength"] = types.YLeaf{"Ciilsppdulength", ciilspsummaryentry.Ciilsppdulength}
    ciilspsummaryentry.EntityData.Leafs["ciiLSPAttributes"] = types.YLeaf{"Ciilspattributes", ciilspsummaryentry.Ciilspattributes}
    return &(ciilspsummaryentry.EntityData)
}

// CISCOIETFISISMIB_Ciilsptlvtable
// The contents of each LSP.
type CISCOIETFISISMIB_Ciilsptlvtable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry describes an LSP current stored in the system. The type is slice
    // of CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry.
    Ciilsptlventry []CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry
}

func (ciilsptlvtable *CISCOIETFISISMIB_Ciilsptlvtable) GetEntityData() *types.CommonEntityData {
    ciilsptlvtable.EntityData.YFilter = ciilsptlvtable.YFilter
    ciilsptlvtable.EntityData.YangName = "ciiLSPTLVTable"
    ciilsptlvtable.EntityData.BundleName = "cisco_ios_xe"
    ciilsptlvtable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciilsptlvtable.EntityData.SegmentPath = "ciiLSPTLVTable"
    ciilsptlvtable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciilsptlvtable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciilsptlvtable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciilsptlvtable.EntityData.Children = make(map[string]types.YChild)
    ciilsptlvtable.EntityData.Children["ciiLSPTLVEntry"] = types.YChild{"Ciilsptlventry", nil}
    for i := range ciilsptlvtable.Ciilsptlventry {
        ciilsptlvtable.EntityData.Children[types.GetSegmentPath(&ciilsptlvtable.Ciilsptlventry[i])] = types.YChild{"Ciilsptlventry", &ciilsptlvtable.Ciilsptlventry[i]}
    }
    ciilsptlvtable.EntityData.Leafs = make(map[string]types.YLeaf)
    return &(ciilsptlvtable.EntityData)
}

// CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry
// Each entry describes an LSP current stored in the
// system.
type CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is CiiISLevel. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry_Ciilsplevel
    Ciilsplevel interface{}

    // This attribute is a key. The type is string with length: 0 | 8. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_Ciilspsummarytable_Ciilspsummaryentry_Ciilspid
    Ciilspid interface{}

    // This attribute is a key. The index of this TLV in the LSP.  The first TLV
    // has index 1 and the Nth TLV has an index of N. The type is interface{} with
    // range: 0..4294967295.
    Ciilsptlvindex interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    Ciilsptlvseq interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    Ciilsptlvchecksum interface{}

    // The type of this TLV. The type is interface{} with range: 0..255.
    Ciilsptlvtype interface{}

    // The length of this TLV. The type is interface{} with range: 0..255.
    Ciilsptlvlen interface{}

    // The value of this TLV. The type is string with length: 0..255.
    Ciilsptlvvalue interface{}
}

func (ciilsptlventry *CISCOIETFISISMIB_Ciilsptlvtable_Ciilsptlventry) GetEntityData() *types.CommonEntityData {
    ciilsptlventry.EntityData.YFilter = ciilsptlventry.YFilter
    ciilsptlventry.EntityData.YangName = "ciiLSPTLVEntry"
    ciilsptlventry.EntityData.BundleName = "cisco_ios_xe"
    ciilsptlventry.EntityData.ParentYangName = "ciiLSPTLVTable"
    ciilsptlventry.EntityData.SegmentPath = "ciiLSPTLVEntry" + "[ciiLSPLevel='" + fmt.Sprintf("%v", ciilsptlventry.Ciilsplevel) + "']" + "[ciiLSPID='" + fmt.Sprintf("%v", ciilsptlventry.Ciilspid) + "']" + "[ciiLSPTLVIndex='" + fmt.Sprintf("%v", ciilsptlventry.Ciilsptlvindex) + "']"
    ciilsptlventry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciilsptlventry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciilsptlventry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciilsptlventry.EntityData.Children = make(map[string]types.YChild)
    ciilsptlventry.EntityData.Leafs = make(map[string]types.YLeaf)
    ciilsptlventry.EntityData.Leafs["ciiLSPLevel"] = types.YLeaf{"Ciilsplevel", ciilsptlventry.Ciilsplevel}
    ciilsptlventry.EntityData.Leafs["ciiLSPID"] = types.YLeaf{"Ciilspid", ciilsptlventry.Ciilspid}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVIndex"] = types.YLeaf{"Ciilsptlvindex", ciilsptlventry.Ciilsptlvindex}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVSeq"] = types.YLeaf{"Ciilsptlvseq", ciilsptlventry.Ciilsptlvseq}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVChecksum"] = types.YLeaf{"Ciilsptlvchecksum", ciilsptlventry.Ciilsptlvchecksum}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVType"] = types.YLeaf{"Ciilsptlvtype", ciilsptlventry.Ciilsptlvtype}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVLen"] = types.YLeaf{"Ciilsptlvlen", ciilsptlventry.Ciilsptlvlen}
    ciilsptlventry.EntityData.Leafs["ciiLSPTLVValue"] = types.YLeaf{"Ciilsptlvvalue", ciilsptlventry.Ciilsptlvvalue}
    return &(ciilsptlventry.EntityData)
}

