// This module manages Cisco's intercept feature.
// This MIB replaces CISCO-TAP-MIB. This MIB defines
// a generic stream table that contains fields common to
// all intercept types. Specific intercept filters are
// defined in extension MIBs. They are CISCO-IP-TAP-MIB
// for IP intercepts, CISCO-802-TAP-MIB for IEEE 802
// intercepts and CISCO-USER-CONNECTION-TAP-MIB for
// RADIUS-based user connection intercepts.
package cisco_tap2_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_tap2_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-TAP2-MIB CISCO-TAP2-MIB}", reflect.TypeOf(CISCOTAP2MIB{}))
    ydk.RegisterEntity("CISCO-TAP2-MIB:CISCO-TAP2-MIB", reflect.TypeOf(CISCOTAP2MIB{}))
}

// CISCOTAP2MIB
type CISCOTAP2MIB struct {
    parent types.Entity
    YFilter yfilter.YFilter

    
    Ctap2Mediationgroup CISCOTAP2MIB_Ctap2Mediationgroup

    
    Ctap2Debuggroup CISCOTAP2MIB_Ctap2Debuggroup

    // This table lists the Mediation Devices with which the intercepting device
    // communicates. These may be on the same or different Mediation Devices.  
    // This table is written by the Mediation Device, and is always volatile. This
    // is because intercepts may disappear during a restart of the intercepting
    // equipment.  Entries are added to this table via cTap2MediationStatus in 
    // accordance with the RowStatus convention.
    Ctap2Mediationtable CISCOTAP2MIB_Ctap2Mediationtable

    // The Intercept Stream Table lists the traffic streams to be intercepted. The
    // same data stream may be required by multiple  taps, and one might assume
    // that often the intercepted stream  is a small subset of the traffic that
    // could be intercepted.   The Table consists of generic fields that are
    // independent of the type of intercept. It contains type of the specific 
    // filter which is defined in an extension MIB and counters to  account for
    // packets intercepted or dropped by the attached filter specification.  Note
    // that the Mediation Device must make sure there is  only one type of
    // specific filter created with the same  indices as that of a row in this
    // table, otherwise the  later creations will fail. For example, if there is a
    // row in this table with index 1.2, there can be a  corresponding row with
    // the same index either in  citapStreamTable, c8tapStreamTable or
    // cuctTapStreamTable, but not all.    The first index indicates which
    // Mediation Device the intercepted traffic will be diverted to. The second
    // index permits multiple classifiers to be used together.   Entries are added
    // to this table via cTap2StreamStatus in accordance with the RowStatus
    // convention.
    Ctap2Streamtable CISCOTAP2MIB_Ctap2Streamtable

    // A table that contains Lawful Intercept debug messages generated by the
    // implementing device. This table is used  by ciscoTap2MediationDebug and
    // ciscoTap2StreamDebug  notifications.  An entry in this table contains a
    // debug message which is regarding either a Mediation Device or a intercept
    // stream  created by a Mediation Device. The Mediation device is  identified
    // by cTap2DebugMediationId whose value is that of cTap2MediationContentId of
    // cTapMediationEntry. The stream is identified by cTap2DebugMediationId and
    // cTap2DebugStreamId whose values are that of  cTap2MediationContentId and
    // cTap2StreamIndex of  the corresponding cTap2StreamEntry.  Note that
    // cTap2DebugStreamId may be zero for an entry, in which case the debug
    // message is regarding a Medation Device.  Entries are added to this table
    // via cTap2DebugStatus in accordance with the RowStatus convention.
    Ctap2Debugtable CISCOTAP2MIB_Ctap2Debugtable

    // The User Table lists information of all the users configured in the system
    // who are given permission by different Mediation Devices to access Lawful
    // Intercept CLIs.  This table will have dependancy on cTap2MediationTable.
    // When entry in cTap2MediationTable is deleted or moved to 'notInService',
    // entries corresponding cTap2MediationContentId in this table will be
    // deleted.
    Ctap2Debugusertable CISCOTAP2MIB_Ctap2Debugusertable
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetFilter() yfilter.YFilter { return cISCOTAP2MIB.YFilter }

func (cISCOTAP2MIB *CISCOTAP2MIB) SetFilter(yf yfilter.YFilter) { cISCOTAP2MIB.YFilter = yf }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetGoName(yname string) string {
    if yname == "cTap2MediationGroup" { return "Ctap2Mediationgroup" }
    if yname == "cTap2DebugGroup" { return "Ctap2Debuggroup" }
    if yname == "cTap2MediationTable" { return "Ctap2Mediationtable" }
    if yname == "cTap2StreamTable" { return "Ctap2Streamtable" }
    if yname == "cTap2DebugTable" { return "Ctap2Debugtable" }
    if yname == "cTap2DebugUserTable" { return "Ctap2Debugusertable" }
    return ""
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetSegmentPath() string {
    return "CISCO-TAP2-MIB:CISCO-TAP2-MIB"
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cTap2MediationGroup" {
        return &cISCOTAP2MIB.Ctap2Mediationgroup
    }
    if childYangName == "cTap2DebugGroup" {
        return &cISCOTAP2MIB.Ctap2Debuggroup
    }
    if childYangName == "cTap2MediationTable" {
        return &cISCOTAP2MIB.Ctap2Mediationtable
    }
    if childYangName == "cTap2StreamTable" {
        return &cISCOTAP2MIB.Ctap2Streamtable
    }
    if childYangName == "cTap2DebugTable" {
        return &cISCOTAP2MIB.Ctap2Debugtable
    }
    if childYangName == "cTap2DebugUserTable" {
        return &cISCOTAP2MIB.Ctap2Debugusertable
    }
    return nil
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cTap2MediationGroup"] = &cISCOTAP2MIB.Ctap2Mediationgroup
    children["cTap2DebugGroup"] = &cISCOTAP2MIB.Ctap2Debuggroup
    children["cTap2MediationTable"] = &cISCOTAP2MIB.Ctap2Mediationtable
    children["cTap2StreamTable"] = &cISCOTAP2MIB.Ctap2Streamtable
    children["cTap2DebugTable"] = &cISCOTAP2MIB.Ctap2Debugtable
    children["cTap2DebugUserTable"] = &cISCOTAP2MIB.Ctap2Debugusertable
    return children
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (cISCOTAP2MIB *CISCOTAP2MIB) GetBundleName() string { return "cisco_ios_xe" }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetYangName() string { return "CISCO-TAP2-MIB" }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (cISCOTAP2MIB *CISCOTAP2MIB) SetParent(parent types.Entity) { cISCOTAP2MIB.parent = parent }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetParent() types.Entity { return cISCOTAP2MIB.parent }

func (cISCOTAP2MIB *CISCOTAP2MIB) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Mediationgroup
type CISCOTAP2MIB_Ctap2Mediationgroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object contains a value which may be used as an index value for a new
    // cTap2MediationEntry. Whenever read, the agent will change the value to a
    // new non-conflicting value.  This is to reduce the probability of errors
    // during creation of new cTap2MediationTable entries. The type is interface{}
    // with range: 1..2147483647.
    Ctap2Mediationnewindex interface{}

    // This object displays the device capabilities with respect to certain fields
    // in Mediation Device table. This may be dependent on hardware capabilities,
    // software capabilities. The following values may be supported:    
    // ipV4SrcInterface:  SNMP ifIndex Value may be used to select                
    // the interface (denoted by                       
    // cTap2MediationSrcInterface) on the                        intercepting
    // device from which to                        transmit intercepted data to an
    // IPv4                        address Mediation Device.      
    // ipV6SrcInterface:  SNMP ifIndex Value may be used to select                
    // the interface (denoted by                       
    // cTap2MediationSrcInterface) on the                        intercepting
    // device from which to                        transmit intercepted data to an
    // IPv6                        address Mediation Device.       udp:           
    // UDP may be used as transport protocol                        (denoted by
    // cTap2MediationTransport) in                        transferring intercepted
    // data to the                        Mediation Device.       rtcpNack:       
    // RTP with Nack resilience may be used                        as transport
    // protocol (denoted by                        cTap2MediationTransport) in
    // transferring                        intercepted data to the Mediation      
    // Device.      tcp:               TCP may be used as transport protocol      
    // (denoted by cTap2MediationTransport) in                        transferring
    // intercepted data to the                        Mediation Device.      
    // sctp:              SCTP may be used as transport protocol                  
    // (denoted by cTap2MediationTransport) in                        transferring
    // intercepted data to the                        Mediation Device.      rtp: 
    // RTP may be used as transport protocol                        (denoted by
    // cTap2MediationTransport) in                        transferring intercepted
    // data to the                        Mediation Device.       radius:         
    // Radius may be used as transport protocol                        (denoted by
    // cTap2MediationTransport) in                        transferring intercepted
    // information to                         the Mediation Device. The type is
    // map[string]bool.
    Ctap2Mediationcapabilities interface{}
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetFilter() yfilter.YFilter { return ctap2Mediationgroup.YFilter }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) SetFilter(yf yfilter.YFilter) { ctap2Mediationgroup.YFilter = yf }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetGoName(yname string) string {
    if yname == "cTap2MediationNewIndex" { return "Ctap2Mediationnewindex" }
    if yname == "cTap2MediationCapabilities" { return "Ctap2Mediationcapabilities" }
    return ""
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetSegmentPath() string {
    return "cTap2MediationGroup"
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2MediationNewIndex"] = ctap2Mediationgroup.Ctap2Mediationnewindex
    leafs["cTap2MediationCapabilities"] = ctap2Mediationgroup.Ctap2Mediationcapabilities
    return leafs
}

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetYangName() string { return "cTap2MediationGroup" }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) SetParent(parent types.Entity) { ctap2Mediationgroup.parent = parent }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetParent() types.Entity { return ctap2Mediationgroup.parent }

func (ctap2Mediationgroup *CISCOTAP2MIB_Ctap2Mediationgroup) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Debuggroup
type CISCOTAP2MIB_Ctap2Debuggroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This object contains the duration in minutes for which an entry in
    // cTap2DebugTable is maintained by the implementing device after which the
    // entry is deleted. The management station also has the option of deleting
    // the entry itself by setting cTap2DebugStatus. The type is interface{} with
    // range: 1..2147483647.
    Ctap2Debugage interface{}

    // This object contains the maximum number of debug messages maintained by the
    // implementing device at a time. If this  limit is crossed, most recent
    // message will replace the least recent message. The type is interface{} with
    // range: 1..2147483647.
    Ctap2Debugmaxentries interface{}
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetFilter() yfilter.YFilter { return ctap2Debuggroup.YFilter }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) SetFilter(yf yfilter.YFilter) { ctap2Debuggroup.YFilter = yf }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetGoName(yname string) string {
    if yname == "cTap2DebugAge" { return "Ctap2Debugage" }
    if yname == "cTap2DebugMaxEntries" { return "Ctap2Debugmaxentries" }
    return ""
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetSegmentPath() string {
    return "cTap2DebugGroup"
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2DebugAge"] = ctap2Debuggroup.Ctap2Debugage
    leafs["cTap2DebugMaxEntries"] = ctap2Debuggroup.Ctap2Debugmaxentries
    return leafs
}

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetYangName() string { return "cTap2DebugGroup" }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) SetParent(parent types.Entity) { ctap2Debuggroup.parent = parent }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetParent() types.Entity { return ctap2Debuggroup.parent }

func (ctap2Debuggroup *CISCOTAP2MIB_Ctap2Debuggroup) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Mediationtable
// This table lists the Mediation Devices with which the
// intercepting device communicates. These may be on the same or
// different Mediation Devices.
// 
// 
// This table is written by the Mediation Device, and is always
// volatile. This is because intercepts may disappear during a
// restart of the intercepting equipment.
// 
// Entries are added to this table via cTap2MediationStatus in 
// accordance with the RowStatus convention.
type CISCOTAP2MIB_Ctap2Mediationtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The entry describes a single session maintained with an application on a
    // Mediation Device. The type is slice of
    // CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry.
    Ctap2Mediationentry []CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetFilter() yfilter.YFilter { return ctap2Mediationtable.YFilter }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) SetFilter(yf yfilter.YFilter) { ctap2Mediationtable.YFilter = yf }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetGoName(yname string) string {
    if yname == "cTap2MediationEntry" { return "Ctap2Mediationentry" }
    return ""
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetSegmentPath() string {
    return "cTap2MediationTable"
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cTap2MediationEntry" {
        for _, c := range ctap2Mediationtable.Ctap2Mediationentry {
            if ctap2Mediationtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry{}
        ctap2Mediationtable.Ctap2Mediationentry = append(ctap2Mediationtable.Ctap2Mediationentry, child)
        return &ctap2Mediationtable.Ctap2Mediationentry[len(ctap2Mediationtable.Ctap2Mediationentry)-1]
    }
    return nil
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ctap2Mediationtable.Ctap2Mediationentry {
        children[ctap2Mediationtable.Ctap2Mediationentry[i].GetSegmentPath()] = &ctap2Mediationtable.Ctap2Mediationentry[i]
    }
    return children
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetYangName() string { return "cTap2MediationTable" }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) SetParent(parent types.Entity) { ctap2Mediationtable.parent = parent }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetParent() types.Entity { return ctap2Mediationtable.parent }

func (ctap2Mediationtable *CISCOTAP2MIB_Ctap2Mediationtable) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry
// The entry describes a single session maintained with an
// application on a Mediation Device.
type CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. cTap2MediationContentId is a session identifier,
    // from the intercept application's perspective, and a content identifier from
    // the Mediation Device's perspective. The Mediation Device is responsible for
    // making sure these are unique, although the SNMP RowStatus row creation
    // process will help by not allowing it to create conflicting entries. Before
    // creating a new entry, a value for this variable may be obtained by reading
    // cTap2MediationNewIndex to reduce the probability of a value collision. The
    // type is interface{} with range: 1..2147483647.
    Ctap2Mediationcontentid interface{}

    // The type of cTap2MediationDestAddress. The type is InetAddressType.
    Ctap2Mediationdestaddresstype interface{}

    // The IP Address of the Mediation Device's network interface to which to
    // direct intercepted traffic. The type is string with length: 0..255.
    Ctap2Mediationdestaddress interface{}

    // The port number on the Mediation Device's network interface to which to
    // direct intercepted traffic. The type is interface{} with range: 0..65535.
    Ctap2Mediationdestport interface{}

    // The interface on the intercepting device from which to transmit intercepted
    // data. If zero, any interface may be used according to normal IP practice.
    // The type is interface{} with range: 0..2147483647.
    Ctap2Mediationsrcinterface interface{}

    // The port number on the intercepting device to which the Mediation Devices
    // directs RTCP Receiver Reports and Nacks. This object is only relevant when
    // the value of cTap2MediationTransport is 'rtpNack'.   This port is assigned
    // by the intercepting device, rather than by the Mediation Device or manager
    // application.  The value of this MIB object has no effect before activating
    // the cTap2MediationEntry. The type is interface{} with range: 0..65535.
    Ctap2Mediationrtcpport interface{}

    // The Differentiated Services Code Point the intercepting device applies to
    // the IP packets encapsulating the intercepted traffic. The type is
    // interface{} with range: 0..63.
    Ctap2Mediationdscp interface{}

    // If RTP with Ack/Nack resilience is selected as a transport, the mediation
    // process requires an RTP payload type for data transmissions, and a second
    // RTP payload type for retransmissions.  This is the RTP payload type for
    // transmissions.   This object is only effective when the value of
    // cTap2MediationTransport is 'rtpNack'. The type is interface{} with range:
    // 0..127.
    Ctap2Mediationdatatype interface{}

    // If RTP with Ack/Nack resilience is selected as a transport, the mediation
    // process requires an RTP payload type for data transmissions, and a second
    // RTP payload type for retransmissions.  This is the RTP payload type for
    // retransmissions.   This object is only effective when the value of
    // cTap2MediationTransport is 'rtpNack'. The type is interface{} with range:
    // 0..127.
    Ctap2Mediationretransmittype interface{}

    // The time at which this row and all related Stream Table rows should be
    // automatically removed, and the intercept function cease. Since the
    // initiating network manager may be the only device able to manage a specific
    // intercept or know of its existence, this acts as a fail-safe for the
    // failure or removal of the network manager. The object is only effective
    // when the value of cTap2MediationStatus is 'active'. The type is string.
    Ctap2Mediationtimeout interface{}

    // The protocol used in transferring intercepted data to the Mediation Device.
    // The following protocols may be supported:            udp:     PacketCable
    // udp format            rtpNack: RTP with Nack resilience            tcp:    
    // TCP with head of line blocking            sctp:    SCTP with head of line
    // blocking             rtp:     Realtime Transport Protocol(RTP)             
    // packet format            radius:  Use Radius, PacketCable1.5 Event Message 
    // to transport the intercepted information. The type is
    // Ctap2Mediationtransport.
    Ctap2Mediationtransport interface{}

    // This variable controls the generation of any notifications or informs by
    // the MIB agent for this table entry. The type is bool.
    Ctap2Mediationnotificationenable interface{}

    // The status of this conceptual row. This object is used to manage creation,
    // modification and deletion of rows in this table.   cTap2MediationTimeout
    // may be modified at any time (even while the row is active). But when the
    // row is active, the other writable objects may not be modified without
    // setting its value to 'notInService'.   The entry may not be deleted or
    // deactivated by setting its value to 'destroy' or 'notInService' if there is
    // any associated entry in cTap2StreamTable. The type is RowStatus.
    Ctap2Mediationstatus interface{}

    // Radius Authentication Key is the shared secret key between  radius client
    // and server. The type is string with length: 0..64.
    Ctap2Mediationradiuskey interface{}
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetFilter() yfilter.YFilter { return ctap2Mediationentry.YFilter }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) SetFilter(yf yfilter.YFilter) { ctap2Mediationentry.YFilter = yf }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetGoName(yname string) string {
    if yname == "cTap2MediationContentId" { return "Ctap2Mediationcontentid" }
    if yname == "cTap2MediationDestAddressType" { return "Ctap2Mediationdestaddresstype" }
    if yname == "cTap2MediationDestAddress" { return "Ctap2Mediationdestaddress" }
    if yname == "cTap2MediationDestPort" { return "Ctap2Mediationdestport" }
    if yname == "cTap2MediationSrcInterface" { return "Ctap2Mediationsrcinterface" }
    if yname == "cTap2MediationRtcpPort" { return "Ctap2Mediationrtcpport" }
    if yname == "cTap2MediationDscp" { return "Ctap2Mediationdscp" }
    if yname == "cTap2MediationDataType" { return "Ctap2Mediationdatatype" }
    if yname == "cTap2MediationRetransmitType" { return "Ctap2Mediationretransmittype" }
    if yname == "cTap2MediationTimeout" { return "Ctap2Mediationtimeout" }
    if yname == "cTap2MediationTransport" { return "Ctap2Mediationtransport" }
    if yname == "cTap2MediationNotificationEnable" { return "Ctap2Mediationnotificationenable" }
    if yname == "cTap2MediationStatus" { return "Ctap2Mediationstatus" }
    if yname == "cTap2MediationRadiusKey" { return "Ctap2Mediationradiuskey" }
    return ""
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetSegmentPath() string {
    return "cTap2MediationEntry" + "[cTap2MediationContentId='" + fmt.Sprintf("%v", ctap2Mediationentry.Ctap2Mediationcontentid) + "']"
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2MediationContentId"] = ctap2Mediationentry.Ctap2Mediationcontentid
    leafs["cTap2MediationDestAddressType"] = ctap2Mediationentry.Ctap2Mediationdestaddresstype
    leafs["cTap2MediationDestAddress"] = ctap2Mediationentry.Ctap2Mediationdestaddress
    leafs["cTap2MediationDestPort"] = ctap2Mediationentry.Ctap2Mediationdestport
    leafs["cTap2MediationSrcInterface"] = ctap2Mediationentry.Ctap2Mediationsrcinterface
    leafs["cTap2MediationRtcpPort"] = ctap2Mediationentry.Ctap2Mediationrtcpport
    leafs["cTap2MediationDscp"] = ctap2Mediationentry.Ctap2Mediationdscp
    leafs["cTap2MediationDataType"] = ctap2Mediationentry.Ctap2Mediationdatatype
    leafs["cTap2MediationRetransmitType"] = ctap2Mediationentry.Ctap2Mediationretransmittype
    leafs["cTap2MediationTimeout"] = ctap2Mediationentry.Ctap2Mediationtimeout
    leafs["cTap2MediationTransport"] = ctap2Mediationentry.Ctap2Mediationtransport
    leafs["cTap2MediationNotificationEnable"] = ctap2Mediationentry.Ctap2Mediationnotificationenable
    leafs["cTap2MediationStatus"] = ctap2Mediationentry.Ctap2Mediationstatus
    leafs["cTap2MediationRadiusKey"] = ctap2Mediationentry.Ctap2Mediationradiuskey
    return leafs
}

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetYangName() string { return "cTap2MediationEntry" }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) SetParent(parent types.Entity) { ctap2Mediationentry.parent = parent }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetParent() types.Entity { return ctap2Mediationentry.parent }

func (ctap2Mediationentry *CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry) GetParentYangName() string { return "cTap2MediationTable" }

// CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport represents                     to transport the intercepted information.
type CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport string

const (
    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_udp CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "udp"

    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_rtpNack CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "rtpNack"

    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_tcp CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "tcp"

    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_sctp CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "sctp"

    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_rtp CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "rtp"

    CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport_radius CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationtransport = "radius"
)

// CISCOTAP2MIB_Ctap2Streamtable
// The Intercept Stream Table lists the traffic streams to be
// intercepted. The same data stream may be required by multiple 
// taps, and one might assume that often the intercepted stream 
// is a small subset of the traffic that could be intercepted.
// 
// 
// The Table consists of generic fields that are independent
// of the type of intercept. It contains type of the specific 
// filter which is defined in an extension MIB and counters to 
// account for packets intercepted or dropped by the attached
// filter specification.
// 
// Note that the Mediation Device must make sure there is 
// only one type of specific filter created with the same 
// indices as that of a row in this table, otherwise the 
// later creations will fail. For example, if there is a 
// row in this table with index 1.2, there can be a 
// corresponding row with the same index either in 
// citapStreamTable, c8tapStreamTable or cuctTapStreamTable,
// but not all. 
// 
// 
// The first index indicates which Mediation Device the
// intercepted traffic will be diverted to. The second index
// permits multiple classifiers to be used together. 
// 
// Entries are added to this table via cTap2StreamStatus in
// accordance with the RowStatus convention.
type CISCOTAP2MIB_Ctap2Streamtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A stream entry indicates a single data stream to be intercepted to a
    // Mediation Device. Many selected data streams may go to the same application
    // interface, and many application interfaces are supported. The type is slice
    // of CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry.
    Ctap2Streamentry []CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetFilter() yfilter.YFilter { return ctap2Streamtable.YFilter }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) SetFilter(yf yfilter.YFilter) { ctap2Streamtable.YFilter = yf }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetGoName(yname string) string {
    if yname == "cTap2StreamEntry" { return "Ctap2Streamentry" }
    return ""
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetSegmentPath() string {
    return "cTap2StreamTable"
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cTap2StreamEntry" {
        for _, c := range ctap2Streamtable.Ctap2Streamentry {
            if ctap2Streamtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry{}
        ctap2Streamtable.Ctap2Streamentry = append(ctap2Streamtable.Ctap2Streamentry, child)
        return &ctap2Streamtable.Ctap2Streamentry[len(ctap2Streamtable.Ctap2Streamentry)-1]
    }
    return nil
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ctap2Streamtable.Ctap2Streamentry {
        children[ctap2Streamtable.Ctap2Streamentry[i].GetSegmentPath()] = &ctap2Streamtable.Ctap2Streamentry[i]
    }
    return children
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetYangName() string { return "cTap2StreamTable" }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) SetParent(parent types.Entity) { ctap2Streamtable.parent = parent }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetParent() types.Entity { return ctap2Streamtable.parent }

func (ctap2Streamtable *CISCOTAP2MIB_Ctap2Streamtable) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry
// A stream entry indicates a single data stream to be
// intercepted to a Mediation Device. Many selected data
// streams may go to the same application interface, and many
// application interfaces are supported.
type CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_tap2_mib.CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationcontentid
    Ctap2Mediationcontentid interface{}

    // This attribute is a key. The index of the stream itself. The type is
    // interface{} with range: 1..2147483647.
    Ctap2Streamindex interface{}

    // Identifies the type of intercept filter associated to this generic stream.
    // The following types of streams are supported:        ip:             The
    // specific filter is an IP filter                         with same indices
    // as that of this                         table. The exact filter is a row in
    // citapStreamTable of CISCO-IP-TAP-MIB.        mac:            The specific
    // filter is a MAC filter                        with same indices as that of
    // this table.                        The exact filter is a row in            
    // c8tapStreamTable of CISCO-802-TAP-MIB.        userConnecton:  The specific
    // filter is a user connection                        filter with same indices
    // as that of                         this table. The exact filter is a row   
    // in cuctTapStreamTable of                        
    // CISCO-USER-CONNECTION-TAP-MIB.        msPdsn:         The specific filter
    // is a Mobile Sub                        connection filter with same indices
    // as                        that of this table. The exact filter             
    // is a row in ccptapStreamTable of                        
    // CISCO-CDMA-PDSN-TAP-MIB.        mobility:       The specific filter is a
    // Mobile                         Subscriber connection filter with same      
    // indices as that of this table. The exact                        filter is a
    // row in cmtapStreamTable of                         CISCO-MOBILITY-TAP-MIB. 
    // voip:           The specific filter is a VoIP                       
    // Subscriber filter with same                        indices as that of this
    // table. The exact                        filter is a row in
    // cvoiptapStreamTable of                        CISCO-VOIP-TAP-MIB. The type
    // is Ctap2Streamtype.
    Ctap2Streamtype interface{}

    // If 'true', the tap should intercept matching traffic. The value for this
    // object should be set to 'true' only after an  additional filter
    // specification has been attached to this  stream. The type is bool.
    Ctap2Streaminterceptenable interface{}

    // The number of packets matching this data stream specification that have
    // been intercepted. The type is interface{} with range: 0..4294967295.
    Ctap2Streaminterceptedpackets interface{}

    // The number of packets matching this data stream specification that, having
    // been intercepted, were dropped in the lawful intercept process. The type is
    // interface{} with range: 0..4294967295.
    Ctap2Streaminterceptdrops interface{}

    // The status of this conceptual row. This object manages creation,
    // modification, and deletion of rows in this table.
    // cTap2StreamInterceptEnable may be modified any time even the value of this
    // entry rowStatus object is 'active'.  When other rows must be changed,
    // cTap2StreamStatus must be first set to 'notInService'. The type is
    // RowStatus.
    Ctap2Streamstatus interface{}

    // The number of packets matching this data stream specification that have
    // been intercepted. This object is a 64-bit version of
    // cTap2StreamInterceptedPackets. The type is interface{} with range:
    // 0..18446744073709551615.
    Ctap2Streaminterceptedhcpackets interface{}

    // The number of packets matching this data stream specification that, having
    // been intercepted, were dropped in the lawful intercept process. This object
    // is a 64-bit version of cTap2StreamInterceptDrops. The type is interface{}
    // with range: 0..18446744073709551615.
    Ctap2Streamintercepthcdrops interface{}
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetFilter() yfilter.YFilter { return ctap2Streamentry.YFilter }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) SetFilter(yf yfilter.YFilter) { ctap2Streamentry.YFilter = yf }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetGoName(yname string) string {
    if yname == "cTap2MediationContentId" { return "Ctap2Mediationcontentid" }
    if yname == "cTap2StreamIndex" { return "Ctap2Streamindex" }
    if yname == "cTap2StreamType" { return "Ctap2Streamtype" }
    if yname == "cTap2StreamInterceptEnable" { return "Ctap2Streaminterceptenable" }
    if yname == "cTap2StreamInterceptedPackets" { return "Ctap2Streaminterceptedpackets" }
    if yname == "cTap2StreamInterceptDrops" { return "Ctap2Streaminterceptdrops" }
    if yname == "cTap2StreamStatus" { return "Ctap2Streamstatus" }
    if yname == "cTap2StreamInterceptedHCPackets" { return "Ctap2Streaminterceptedhcpackets" }
    if yname == "cTap2StreamInterceptHCDrops" { return "Ctap2Streamintercepthcdrops" }
    return ""
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetSegmentPath() string {
    return "cTap2StreamEntry" + "[cTap2MediationContentId='" + fmt.Sprintf("%v", ctap2Streamentry.Ctap2Mediationcontentid) + "']" + "[cTap2StreamIndex='" + fmt.Sprintf("%v", ctap2Streamentry.Ctap2Streamindex) + "']"
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2MediationContentId"] = ctap2Streamentry.Ctap2Mediationcontentid
    leafs["cTap2StreamIndex"] = ctap2Streamentry.Ctap2Streamindex
    leafs["cTap2StreamType"] = ctap2Streamentry.Ctap2Streamtype
    leafs["cTap2StreamInterceptEnable"] = ctap2Streamentry.Ctap2Streaminterceptenable
    leafs["cTap2StreamInterceptedPackets"] = ctap2Streamentry.Ctap2Streaminterceptedpackets
    leafs["cTap2StreamInterceptDrops"] = ctap2Streamentry.Ctap2Streaminterceptdrops
    leafs["cTap2StreamStatus"] = ctap2Streamentry.Ctap2Streamstatus
    leafs["cTap2StreamInterceptedHCPackets"] = ctap2Streamentry.Ctap2Streaminterceptedhcpackets
    leafs["cTap2StreamInterceptHCDrops"] = ctap2Streamentry.Ctap2Streamintercepthcdrops
    return leafs
}

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetYangName() string { return "cTap2StreamEntry" }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) SetParent(parent types.Entity) { ctap2Streamentry.parent = parent }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetParent() types.Entity { return ctap2Streamentry.parent }

func (ctap2Streamentry *CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry) GetParentYangName() string { return "cTap2StreamTable" }

// CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype represents                        CISCO-VOIP-TAP-MIB.
type CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype string

const (
    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_ip CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "ip"

    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_mac CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "mac"

    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_userConnection CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "userConnection"

    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_msPdsn CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "msPdsn"

    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_mobility CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "mobility"

    CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype_voip CISCOTAP2MIB_Ctap2Streamtable_Ctap2Streamentry_Ctap2Streamtype = "voip"
)

// CISCOTAP2MIB_Ctap2Debugtable
// A table that contains Lawful Intercept debug messages
// generated by the implementing device. This table is used 
// by ciscoTap2MediationDebug and ciscoTap2StreamDebug 
// notifications.
// 
// An entry in this table contains a debug message which is
// regarding either a Mediation Device or a intercept stream 
// created by a Mediation Device. The Mediation device is 
// identified by cTap2DebugMediationId whose value is
// that of cTap2MediationContentId of cTapMediationEntry.
// The stream is identified by cTap2DebugMediationId and
// cTap2DebugStreamId whose values are that of 
// cTap2MediationContentId and cTap2StreamIndex of 
// the corresponding cTap2StreamEntry.
// 
// Note that cTap2DebugStreamId may be zero for an entry,
// in which case the debug message is regarding a Medation
// Device.
// 
// Entries are added to this table via cTap2DebugStatus in
// accordance with the RowStatus convention.
type CISCOTAP2MIB_Ctap2Debugtable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A list of the debug messages. The type is slice of
    // CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry.
    Ctap2Debugentry []CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetFilter() yfilter.YFilter { return ctap2Debugtable.YFilter }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) SetFilter(yf yfilter.YFilter) { ctap2Debugtable.YFilter = yf }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetGoName(yname string) string {
    if yname == "cTap2DebugEntry" { return "Ctap2Debugentry" }
    return ""
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetSegmentPath() string {
    return "cTap2DebugTable"
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cTap2DebugEntry" {
        for _, c := range ctap2Debugtable.Ctap2Debugentry {
            if ctap2Debugtable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry{}
        ctap2Debugtable.Ctap2Debugentry = append(ctap2Debugtable.Ctap2Debugentry, child)
        return &ctap2Debugtable.Ctap2Debugentry[len(ctap2Debugtable.Ctap2Debugentry)-1]
    }
    return nil
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ctap2Debugtable.Ctap2Debugentry {
        children[ctap2Debugtable.Ctap2Debugentry[i].GetSegmentPath()] = &ctap2Debugtable.Ctap2Debugentry[i]
    }
    return children
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetYangName() string { return "cTap2DebugTable" }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) SetParent(parent types.Entity) { ctap2Debugtable.parent = parent }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetParent() types.Entity { return ctap2Debugtable.parent }

func (ctap2Debugtable *CISCOTAP2MIB_Ctap2Debugtable) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry
// A list of the debug messages.
type CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Index to the debug table. The type is interface{}
    // with range: 1..2147483647.
    Ctap2Debugindex interface{}

    // The value of this object is that of cTap2MediationContentId identifying an
    // entry in cTap2MediationTable. Note this object may contain a value for
    // which an entry in cTap2MediationTable does not exist. This happens when
    // creation of an entry in cTap2MediationTable fails and this debug message
    // conveys more detailed information regarding the failure. The type is
    // interface{} with range: 0..4294967295.
    Ctap2Debugmediationid interface{}

    // The value of this object is that of cTap2StreamIndex of an entry in
    // cTap2StreamTable. This object along with cTap2DebugMediationId identifies
    // an entry in cTap2StreamTable. The value of this object may be zero, in
    // which this debug message is regarding a Mediation Device, but not a
    // particular stream.  Note this object may contain a value for which an 
    // entry in cTap2MediationTable does not exist. This happens  when creation of
    // an entry in cTap2StreamTable fails. The type is interface{} with range:
    // 0..4294967295.
    Ctap2Debugstreamid interface{}

    // A text string contains the debug message. The type is string.
    Ctap2Debugmessage interface{}

    // The status of this conceptual row. A row in this table is created by the
    // implementing device. A management station cannot modify any of the objects
    // in this row, except deleting the row by setting this object to 'destroy'.
    // The type is RowStatus.
    Ctap2Debugstatus interface{}
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetFilter() yfilter.YFilter { return ctap2Debugentry.YFilter }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) SetFilter(yf yfilter.YFilter) { ctap2Debugentry.YFilter = yf }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetGoName(yname string) string {
    if yname == "cTap2DebugIndex" { return "Ctap2Debugindex" }
    if yname == "cTap2DebugMediationId" { return "Ctap2Debugmediationid" }
    if yname == "cTap2DebugStreamId" { return "Ctap2Debugstreamid" }
    if yname == "cTap2DebugMessage" { return "Ctap2Debugmessage" }
    if yname == "cTap2DebugStatus" { return "Ctap2Debugstatus" }
    return ""
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetSegmentPath() string {
    return "cTap2DebugEntry" + "[cTap2DebugIndex='" + fmt.Sprintf("%v", ctap2Debugentry.Ctap2Debugindex) + "']"
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2DebugIndex"] = ctap2Debugentry.Ctap2Debugindex
    leafs["cTap2DebugMediationId"] = ctap2Debugentry.Ctap2Debugmediationid
    leafs["cTap2DebugStreamId"] = ctap2Debugentry.Ctap2Debugstreamid
    leafs["cTap2DebugMessage"] = ctap2Debugentry.Ctap2Debugmessage
    leafs["cTap2DebugStatus"] = ctap2Debugentry.Ctap2Debugstatus
    return leafs
}

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetYangName() string { return "cTap2DebugEntry" }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) SetParent(parent types.Entity) { ctap2Debugentry.parent = parent }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetParent() types.Entity { return ctap2Debugentry.parent }

func (ctap2Debugentry *CISCOTAP2MIB_Ctap2Debugtable_Ctap2Debugentry) GetParentYangName() string { return "cTap2DebugTable" }

// CISCOTAP2MIB_Ctap2Debugusertable
// The User Table lists information of all the users configured
// in the system who are given permission by different Mediation
// Devices to access Lawful Intercept CLIs.
// 
// This table will have dependancy on cTap2MediationTable. When
// entry in cTap2MediationTable is deleted or moved to
// 'notInService', entries corresponding cTap2MediationContentId
// in this table will be deleted.
type CISCOTAP2MIB_Ctap2Debugusertable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A conceptual row in the cTap2DebugUserTable. Each row represents name of
    // user on the router to whom Mediation Device with CCCid represented by
    // cTap2MediationContentId has given access to Lawful Intercept commands and
    // cTap2DebugUserTimeout represents the time when the entry will expire. The
    // type is slice of CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry.
    Ctap2Debuguserentry []CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetFilter() yfilter.YFilter { return ctap2Debugusertable.YFilter }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) SetFilter(yf yfilter.YFilter) { ctap2Debugusertable.YFilter = yf }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetGoName(yname string) string {
    if yname == "cTap2DebugUserEntry" { return "Ctap2Debuguserentry" }
    return ""
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetSegmentPath() string {
    return "cTap2DebugUserTable"
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cTap2DebugUserEntry" {
        for _, c := range ctap2Debugusertable.Ctap2Debuguserentry {
            if ctap2Debugusertable.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry{}
        ctap2Debugusertable.Ctap2Debuguserentry = append(ctap2Debugusertable.Ctap2Debuguserentry, child)
        return &ctap2Debugusertable.Ctap2Debuguserentry[len(ctap2Debugusertable.Ctap2Debuguserentry)-1]
    }
    return nil
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ctap2Debugusertable.Ctap2Debuguserentry {
        children[ctap2Debugusertable.Ctap2Debuguserentry[i].GetSegmentPath()] = &ctap2Debugusertable.Ctap2Debuguserentry[i]
    }
    return children
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetYangName() string { return "cTap2DebugUserTable" }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) SetParent(parent types.Entity) { ctap2Debugusertable.parent = parent }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetParent() types.Entity { return ctap2Debugusertable.parent }

func (ctap2Debugusertable *CISCOTAP2MIB_Ctap2Debugusertable) GetParentYangName() string { return "CISCO-TAP2-MIB" }

// CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry
// A conceptual row in the cTap2DebugUserTable. Each row
// represents name of user on the router to whom Mediation Device
// with CCCid represented by cTap2MediationContentId has given
// access to Lawful Intercept commands and cTap2DebugUserTimeout
// represents the time when the entry will expire.
type CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_tap2_mib.CISCOTAP2MIB_Ctap2Mediationtable_Ctap2Mediationentry_Ctap2Mediationcontentid
    Ctap2Mediationcontentid interface{}

    // This attribute is a key. A human readable string representing the name of
    // debug user who will have access to Lawful Intercept commands. The type is
    // string with length: 1..255.
    Ctap2Debugusername interface{}

    // This object specifies the time at which the row will be removed from the
    // table by the system. The value of this object is only effective when the
    // value of corresponding instance of cTap2DebugUserStatus is 'active'. The
    // type is string.
    Ctap2Debugusertimeout interface{}

    // This object specifies the storage type of this conceptual row. If it is set
    // to 'nonVolatile', this entry can be saved into non-volatile memory. The
    // type is StorageType.
    Ctap2Debuguserstoragetype interface{}

    // The status of this conceptual row. This object manages creation,
    // modification, and deletion of rows in this table. cTap2DebugUserTimeout may
    // be modified any time even when the value of this entry rowStatus object is
    // 'active'. The type is RowStatus.
    Ctap2Debuguserstatus interface{}
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetFilter() yfilter.YFilter { return ctap2Debuguserentry.YFilter }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) SetFilter(yf yfilter.YFilter) { ctap2Debuguserentry.YFilter = yf }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetGoName(yname string) string {
    if yname == "cTap2MediationContentId" { return "Ctap2Mediationcontentid" }
    if yname == "cTap2DebugUserName" { return "Ctap2Debugusername" }
    if yname == "cTap2DebugUserTimeout" { return "Ctap2Debugusertimeout" }
    if yname == "cTap2DebugUserStorageType" { return "Ctap2Debuguserstoragetype" }
    if yname == "cTap2DebugUserStatus" { return "Ctap2Debuguserstatus" }
    return ""
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetSegmentPath() string {
    return "cTap2DebugUserEntry" + "[cTap2MediationContentId='" + fmt.Sprintf("%v", ctap2Debuguserentry.Ctap2Mediationcontentid) + "']" + "[cTap2DebugUserName='" + fmt.Sprintf("%v", ctap2Debuguserentry.Ctap2Debugusername) + "']"
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cTap2MediationContentId"] = ctap2Debuguserentry.Ctap2Mediationcontentid
    leafs["cTap2DebugUserName"] = ctap2Debuguserentry.Ctap2Debugusername
    leafs["cTap2DebugUserTimeout"] = ctap2Debuguserentry.Ctap2Debugusertimeout
    leafs["cTap2DebugUserStorageType"] = ctap2Debuguserentry.Ctap2Debuguserstoragetype
    leafs["cTap2DebugUserStatus"] = ctap2Debuguserentry.Ctap2Debuguserstatus
    return leafs
}

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetBundleName() string { return "cisco_ios_xe" }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetYangName() string { return "cTap2DebugUserEntry" }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetBundleYangModelsLocation() string { return cisco_ios_xe.GetModelsPath() }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xe.GetCapabilities() }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetNamespaceTable() map[string]string {
    return cisco_ios_xe.GetNamespaces() }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) SetParent(parent types.Entity) { ctap2Debuguserentry.parent = parent }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetParent() types.Entity { return ctap2Debuguserentry.parent }

func (ctap2Debuguserentry *CISCOTAP2MIB_Ctap2Debugusertable_Ctap2Debuguserentry) GetParentYangName() string { return "cTap2DebugUserTable" }

