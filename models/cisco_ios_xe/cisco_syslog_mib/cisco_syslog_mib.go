// The MIB module to describe and store the system
// messages generated by the IOS and any other
// OS which supports syslogs.
package cisco_syslog_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_syslog_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-SYSLOG-MIB CISCO-SYSLOG-MIB}", reflect.TypeOf(CISCOSYSLOGMIB{}))
    ydk.RegisterEntity("CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB", reflect.TypeOf(CISCOSYSLOGMIB{}))
}

// SyslogSeverity represents  'debug'        : debug-level messages.
type SyslogSeverity string

const (
    SyslogSeverity_emergency SyslogSeverity = "emergency"

    SyslogSeverity_alert SyslogSeverity = "alert"

    SyslogSeverity_critical SyslogSeverity = "critical"

    SyslogSeverity_error_ SyslogSeverity = "error"

    SyslogSeverity_warning SyslogSeverity = "warning"

    SyslogSeverity_notice SyslogSeverity = "notice"

    SyslogSeverity_info SyslogSeverity = "info"

    SyslogSeverity_debug SyslogSeverity = "debug"
)

// CISCOSYSLOGMIB
type CISCOSYSLOGMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    ClogBasic CISCOSYSLOGMIB_ClogBasic

    
    ClogHistory CISCOSYSLOGMIB_ClogHistory

    
    ClogServer CISCOSYSLOGMIB_ClogServer

    // A table of syslog messages generated by this device. All 'interesting'
    // syslog messages (i.e. severity <= clogMaxSeverity) are entered into this
    // table.
    ClogHistoryTable CISCOSYSLOGMIB_ClogHistoryTable

    // This table contains entries that allow application to configure syslog
    // servers for the system.  The maximum number of entries that can be created
    // for this table is limited by the object clogMaxServers.
    ClogServerConfigTable CISCOSYSLOGMIB_ClogServerConfigTable
}

func (cISCOSYSLOGMIB *CISCOSYSLOGMIB) GetEntityData() *types.CommonEntityData {
    cISCOSYSLOGMIB.EntityData.YFilter = cISCOSYSLOGMIB.YFilter
    cISCOSYSLOGMIB.EntityData.YangName = "CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOSYSLOGMIB.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.SegmentPath = "CISCO-SYSLOG-MIB:CISCO-SYSLOG-MIB"
    cISCOSYSLOGMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOSYSLOGMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOSYSLOGMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOSYSLOGMIB.EntityData.Children = types.NewOrderedMap()
    cISCOSYSLOGMIB.EntityData.Children.Append("clogBasic", types.YChild{"ClogBasic", &cISCOSYSLOGMIB.ClogBasic})
    cISCOSYSLOGMIB.EntityData.Children.Append("clogHistory", types.YChild{"ClogHistory", &cISCOSYSLOGMIB.ClogHistory})
    cISCOSYSLOGMIB.EntityData.Children.Append("clogServer", types.YChild{"ClogServer", &cISCOSYSLOGMIB.ClogServer})
    cISCOSYSLOGMIB.EntityData.Children.Append("clogHistoryTable", types.YChild{"ClogHistoryTable", &cISCOSYSLOGMIB.ClogHistoryTable})
    cISCOSYSLOGMIB.EntityData.Children.Append("clogServerConfigTable", types.YChild{"ClogServerConfigTable", &cISCOSYSLOGMIB.ClogServerConfigTable})
    cISCOSYSLOGMIB.EntityData.Leafs = types.NewOrderedMap()

    cISCOSYSLOGMIB.EntityData.YListKeys = []string {}

    return &(cISCOSYSLOGMIB.EntityData)
}

// CISCOSYSLOGMIB_ClogBasic
type CISCOSYSLOGMIB_ClogBasic struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The number of clogMessageGenerated notifications that have been sent. This
    // number may include notifications that were prevented from being transmitted
    // due to reasons such as resource limitations and/or non-connectivity.  If
    // one is receiving notifications, one can periodically poll this object to
    // determine if any notifications were missed.  If so, a poll of the
    // clogHistoryTable might be appropriate. The type is interface{} with range:
    // 0..4294967295. Units are notifications.
    ClogNotificationsSent interface{}

    // Indicates whether clogMessageGenerated notifications will or will not be
    // sent when a syslog message is generated by the device.  Disabling
    // notifications does not prevent syslog messages from being added to the
    // clogHistoryTable. The type is bool.
    ClogNotificationsEnabled interface{}

    // Indicates which syslog severity levels will be processed.  Any syslog
    // message with a severity value greater than this value will be ignored by
    // the agent. note: severity numeric values increase as their severity
    // decreases, e.g. 'error' is more severe than 'debug'. The type is
    // SyslogSeverity.
    ClogMaxSeverity interface{}

    // The number of syslog messages which were ignored.  A message will be
    // ignored if it has a severity value greater than clogMaxSeverity. The type
    // is interface{} with range: 0..4294967295. Units are messages.
    ClogMsgIgnores interface{}

    // The number of syslog messages which could not be processed due to lack of
    // system resources. Most likely this will occur at the same time that syslog
    // messages are generated to indicate this lack of resources.  Increases in
    // this object's value may serve as an indication that system resource levels
    // should be examined via other mib objects.  A message that is dropped will
    // not appear in the history table and no notification will be sent for this
    // message. The type is interface{} with range: 0..4294967295. Units are
    // messages.
    ClogMsgDrops interface{}

    // This object identifies the type of value that will be contained in
    // clogOriginID object.  The possible value(s) are:    'none'       : do not
    // send origin identifier in                    syslog messages.    'other'   
    // : type that is not identified by other                    values specified
    // in this object.    'hostName'   : Send hostname of the system in syslog    
    // messages.    'ipv4Address': Send IP address of the sending interface.   
    // 'contextName': Send context name of the security device.    'userDefined':
    // Send user configured string in                   syslog message.     The
    // value 'other' and 'none' can not be set but    can only be read. The type
    // is ClogOriginIDType.
    ClogOriginIDType interface{}

    // This object is used for configuring the origin identifier for the syslog
    // messages.  The origin identifier is useful for identifying  the source of
    // system logging messages in cases  syslog messages from multiple devices are
    // sent  to a single syslog host. The origin identifier is added to the
    // beginning of all system logging (syslog) messages sent to remote  hosts. 
    // The type of the identifier is specified by clogOriginIDType object.  This
    // object can be written by the SNMP manager only when clogOriginIDType is set
    // to 'userDefined'.  For following value(s) of clogOriginIDType, this object
    // can not be set; the value of this object is derived by the system in these
    // cases:    'contextName'     'ipv4Address'    'hostName'    'other'        
    // 'none'       This object contains the context name of the device, when
    // clogOriginIDType is  set to 'contextName'.  This object contains IPv4
    // address (in dotted decimal notation) of the sending  interface when
    // clogOriginIDType is set to 'ipv4Address'.  This object contains hostname of
    // the system when clogOriginIDType is set to 'hostName'.  This object will
    // contain zero length octet string when clogOriginIDType is either 'none' or
    // 'other'. The type is string.
    ClogOriginID interface{}
}

func (clogBasic *CISCOSYSLOGMIB_ClogBasic) GetEntityData() *types.CommonEntityData {
    clogBasic.EntityData.YFilter = clogBasic.YFilter
    clogBasic.EntityData.YangName = "clogBasic"
    clogBasic.EntityData.BundleName = "cisco_ios_xe"
    clogBasic.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogBasic.EntityData.SegmentPath = "clogBasic"
    clogBasic.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogBasic.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogBasic.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogBasic.EntityData.Children = types.NewOrderedMap()
    clogBasic.EntityData.Leafs = types.NewOrderedMap()
    clogBasic.EntityData.Leafs.Append("clogNotificationsSent", types.YLeaf{"ClogNotificationsSent", clogBasic.ClogNotificationsSent})
    clogBasic.EntityData.Leafs.Append("clogNotificationsEnabled", types.YLeaf{"ClogNotificationsEnabled", clogBasic.ClogNotificationsEnabled})
    clogBasic.EntityData.Leafs.Append("clogMaxSeverity", types.YLeaf{"ClogMaxSeverity", clogBasic.ClogMaxSeverity})
    clogBasic.EntityData.Leafs.Append("clogMsgIgnores", types.YLeaf{"ClogMsgIgnores", clogBasic.ClogMsgIgnores})
    clogBasic.EntityData.Leafs.Append("clogMsgDrops", types.YLeaf{"ClogMsgDrops", clogBasic.ClogMsgDrops})
    clogBasic.EntityData.Leafs.Append("clogOriginIDType", types.YLeaf{"ClogOriginIDType", clogBasic.ClogOriginIDType})
    clogBasic.EntityData.Leafs.Append("clogOriginID", types.YLeaf{"ClogOriginID", clogBasic.ClogOriginID})

    clogBasic.EntityData.YListKeys = []string {}

    return &(clogBasic.EntityData)
}

// CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType represents    can only be read.
type CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType string

const (
    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_none CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "none"

    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_other CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "other"

    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_hostName CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "hostName"

    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_ipv4Address CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "ipv4Address"

    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_contextName CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "contextName"

    CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType_userDefined CISCOSYSLOGMIB_ClogBasic_ClogOriginIDType = "userDefined"
)

// CISCOSYSLOGMIB_ClogHistory
type CISCOSYSLOGMIB_ClogHistory struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The upper limit on the number of entries that the clogHistoryTable may
    // contain.  A value of 0 will prevent any history from being retained. When
    // this table is full, the oldest entry will be deleted and a new one will be
    // created. The type is interface{} with range: 0..500. Units are entries.
    ClogHistTableMaxLength interface{}

    // The number of entries that have been removed from the clogHistoryTable in
    // order to make room for new entries. This object can be utilized to
    // determine whether your polling frequency on the history table is fast
    // enough and/or the size of your history table is large enough such that you
    // are not missing messages. The type is interface{} with range:
    // 0..4294967295. Units are messages.
    ClogHistMsgsFlushed interface{}
}

func (clogHistory *CISCOSYSLOGMIB_ClogHistory) GetEntityData() *types.CommonEntityData {
    clogHistory.EntityData.YFilter = clogHistory.YFilter
    clogHistory.EntityData.YangName = "clogHistory"
    clogHistory.EntityData.BundleName = "cisco_ios_xe"
    clogHistory.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogHistory.EntityData.SegmentPath = "clogHistory"
    clogHistory.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogHistory.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogHistory.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogHistory.EntityData.Children = types.NewOrderedMap()
    clogHistory.EntityData.Leafs = types.NewOrderedMap()
    clogHistory.EntityData.Leafs.Append("clogHistTableMaxLength", types.YLeaf{"ClogHistTableMaxLength", clogHistory.ClogHistTableMaxLength})
    clogHistory.EntityData.Leafs.Append("clogHistMsgsFlushed", types.YLeaf{"ClogHistMsgsFlushed", clogHistory.ClogHistMsgsFlushed})

    clogHistory.EntityData.YListKeys = []string {}

    return &(clogHistory.EntityData)
}

// CISCOSYSLOGMIB_ClogServer
type CISCOSYSLOGMIB_ClogServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The maximum number of syslog servers that can be configured for the system
    // in clogServerConfigTable.  A value of zero for this object indicates there
    // is no specified limit for the system and is only dictated by system
    // resources. The type is interface{} with range: 0..4294967295.
    ClogMaxServers interface{}
}

func (clogServer *CISCOSYSLOGMIB_ClogServer) GetEntityData() *types.CommonEntityData {
    clogServer.EntityData.YFilter = clogServer.YFilter
    clogServer.EntityData.YangName = "clogServer"
    clogServer.EntityData.BundleName = "cisco_ios_xe"
    clogServer.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogServer.EntityData.SegmentPath = "clogServer"
    clogServer.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogServer.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogServer.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogServer.EntityData.Children = types.NewOrderedMap()
    clogServer.EntityData.Leafs = types.NewOrderedMap()
    clogServer.EntityData.Leafs.Append("clogMaxServers", types.YLeaf{"ClogMaxServers", clogServer.ClogMaxServers})

    clogServer.EntityData.YListKeys = []string {}

    return &(clogServer.EntityData)
}

// CISCOSYSLOGMIB_ClogHistoryTable
// A table of syslog messages generated by this device.
// All 'interesting' syslog messages (i.e. severity <=
// clogMaxSeverity) are entered into this table.
type CISCOSYSLOGMIB_ClogHistoryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A syslog message that was previously generated by this device. Each entry
    // is indexed by a message index. The type is slice of
    // CISCOSYSLOGMIB_ClogHistoryTable_ClogHistoryEntry.
    ClogHistoryEntry []*CISCOSYSLOGMIB_ClogHistoryTable_ClogHistoryEntry
}

func (clogHistoryTable *CISCOSYSLOGMIB_ClogHistoryTable) GetEntityData() *types.CommonEntityData {
    clogHistoryTable.EntityData.YFilter = clogHistoryTable.YFilter
    clogHistoryTable.EntityData.YangName = "clogHistoryTable"
    clogHistoryTable.EntityData.BundleName = "cisco_ios_xe"
    clogHistoryTable.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogHistoryTable.EntityData.SegmentPath = "clogHistoryTable"
    clogHistoryTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogHistoryTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogHistoryTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogHistoryTable.EntityData.Children = types.NewOrderedMap()
    clogHistoryTable.EntityData.Children.Append("clogHistoryEntry", types.YChild{"ClogHistoryEntry", nil})
    for i := range clogHistoryTable.ClogHistoryEntry {
        clogHistoryTable.EntityData.Children.Append(types.GetSegmentPath(clogHistoryTable.ClogHistoryEntry[i]), types.YChild{"ClogHistoryEntry", clogHistoryTable.ClogHistoryEntry[i]})
    }
    clogHistoryTable.EntityData.Leafs = types.NewOrderedMap()

    clogHistoryTable.EntityData.YListKeys = []string {}

    return &(clogHistoryTable.EntityData)
}

// CISCOSYSLOGMIB_ClogHistoryTable_ClogHistoryEntry
// A syslog message that was previously generated by this
// device. Each entry is indexed by a message index.
type CISCOSYSLOGMIB_ClogHistoryTable_ClogHistoryEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A monotonically increasing integer for the sole
    // purpose of indexing messages.  When it reaches the maximum value the agent
    // flushes the table and wraps the value back to 1. The type is interface{}
    // with range: 1..2147483647.
    ClogHistIndex interface{}

    // Name of the facility that generated this message. For example: 'SYS'. The
    // type is string with length: 1..20.
    ClogHistFacility interface{}

    // The severity of the message. The type is SyslogSeverity.
    ClogHistSeverity interface{}

    // A textual identification for the message type. A facility name in
    // conjunction with a message name uniquely identifies a message type. The
    // type is string with length: 1..30.
    ClogHistMsgName interface{}

    // The text of the message.  If the text of the message exceeds 255 bytes, the
    // message will be truncated to 254 bytes and a '*' character will be appended
    // - indicating that the message has been truncated. The type is string with
    // length: 1..255.
    ClogHistMsgText interface{}

    // The value of sysUpTime when this message was generated. The type is
    // interface{} with range: 0..4294967295.
    ClogHistTimestamp interface{}
}

func (clogHistoryEntry *CISCOSYSLOGMIB_ClogHistoryTable_ClogHistoryEntry) GetEntityData() *types.CommonEntityData {
    clogHistoryEntry.EntityData.YFilter = clogHistoryEntry.YFilter
    clogHistoryEntry.EntityData.YangName = "clogHistoryEntry"
    clogHistoryEntry.EntityData.BundleName = "cisco_ios_xe"
    clogHistoryEntry.EntityData.ParentYangName = "clogHistoryTable"
    clogHistoryEntry.EntityData.SegmentPath = "clogHistoryEntry" + types.AddKeyToken(clogHistoryEntry.ClogHistIndex, "clogHistIndex")
    clogHistoryEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogHistoryEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogHistoryEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogHistoryEntry.EntityData.Children = types.NewOrderedMap()
    clogHistoryEntry.EntityData.Leafs = types.NewOrderedMap()
    clogHistoryEntry.EntityData.Leafs.Append("clogHistIndex", types.YLeaf{"ClogHistIndex", clogHistoryEntry.ClogHistIndex})
    clogHistoryEntry.EntityData.Leafs.Append("clogHistFacility", types.YLeaf{"ClogHistFacility", clogHistoryEntry.ClogHistFacility})
    clogHistoryEntry.EntityData.Leafs.Append("clogHistSeverity", types.YLeaf{"ClogHistSeverity", clogHistoryEntry.ClogHistSeverity})
    clogHistoryEntry.EntityData.Leafs.Append("clogHistMsgName", types.YLeaf{"ClogHistMsgName", clogHistoryEntry.ClogHistMsgName})
    clogHistoryEntry.EntityData.Leafs.Append("clogHistMsgText", types.YLeaf{"ClogHistMsgText", clogHistoryEntry.ClogHistMsgText})
    clogHistoryEntry.EntityData.Leafs.Append("clogHistTimestamp", types.YLeaf{"ClogHistTimestamp", clogHistoryEntry.ClogHistTimestamp})

    clogHistoryEntry.EntityData.YListKeys = []string {"ClogHistIndex"}

    return &(clogHistoryEntry.EntityData)
}

// CISCOSYSLOGMIB_ClogServerConfigTable
// This table contains entries that allow application
// to configure syslog servers for the system.
// 
// The maximum number of entries that can be created
// for this table is limited by the object
// clogMaxServers.
type CISCOSYSLOGMIB_ClogServerConfigTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An entry containing information about syslog servers configured for the
    // system. The type is slice of
    // CISCOSYSLOGMIB_ClogServerConfigTable_ClogServerConfigEntry.
    ClogServerConfigEntry []*CISCOSYSLOGMIB_ClogServerConfigTable_ClogServerConfigEntry
}

func (clogServerConfigTable *CISCOSYSLOGMIB_ClogServerConfigTable) GetEntityData() *types.CommonEntityData {
    clogServerConfigTable.EntityData.YFilter = clogServerConfigTable.YFilter
    clogServerConfigTable.EntityData.YangName = "clogServerConfigTable"
    clogServerConfigTable.EntityData.BundleName = "cisco_ios_xe"
    clogServerConfigTable.EntityData.ParentYangName = "CISCO-SYSLOG-MIB"
    clogServerConfigTable.EntityData.SegmentPath = "clogServerConfigTable"
    clogServerConfigTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogServerConfigTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogServerConfigTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogServerConfigTable.EntityData.Children = types.NewOrderedMap()
    clogServerConfigTable.EntityData.Children.Append("clogServerConfigEntry", types.YChild{"ClogServerConfigEntry", nil})
    for i := range clogServerConfigTable.ClogServerConfigEntry {
        clogServerConfigTable.EntityData.Children.Append(types.GetSegmentPath(clogServerConfigTable.ClogServerConfigEntry[i]), types.YChild{"ClogServerConfigEntry", clogServerConfigTable.ClogServerConfigEntry[i]})
    }
    clogServerConfigTable.EntityData.Leafs = types.NewOrderedMap()

    clogServerConfigTable.EntityData.YListKeys = []string {}

    return &(clogServerConfigTable.EntityData)
}

// CISCOSYSLOGMIB_ClogServerConfigTable_ClogServerConfigEntry
// An entry containing information about syslog servers
// configured for the system.
type CISCOSYSLOGMIB_ClogServerConfigTable_ClogServerConfigEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of Internet address of this syslog
    // server. The type is InetAddressType.
    ClogServerAddrType interface{}

    // This attribute is a key. The Internet address of this syslog server. The
    // type of this address is determined by the value of the clogServerAddrType
    // object. The type is string with length: 0..64.
    ClogServerAddr interface{}

    // The status object used to manage rows in this table.  A row may only be
    // created by setting this object to 'createAndGo'.  A row may only be deleted
    // by setting this object to 'destroy'. The type is RowStatus.
    ClogServerStatus interface{}
}

func (clogServerConfigEntry *CISCOSYSLOGMIB_ClogServerConfigTable_ClogServerConfigEntry) GetEntityData() *types.CommonEntityData {
    clogServerConfigEntry.EntityData.YFilter = clogServerConfigEntry.YFilter
    clogServerConfigEntry.EntityData.YangName = "clogServerConfigEntry"
    clogServerConfigEntry.EntityData.BundleName = "cisco_ios_xe"
    clogServerConfigEntry.EntityData.ParentYangName = "clogServerConfigTable"
    clogServerConfigEntry.EntityData.SegmentPath = "clogServerConfigEntry" + types.AddKeyToken(clogServerConfigEntry.ClogServerAddrType, "clogServerAddrType") + types.AddKeyToken(clogServerConfigEntry.ClogServerAddr, "clogServerAddr")
    clogServerConfigEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    clogServerConfigEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    clogServerConfigEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    clogServerConfigEntry.EntityData.Children = types.NewOrderedMap()
    clogServerConfigEntry.EntityData.Leafs = types.NewOrderedMap()
    clogServerConfigEntry.EntityData.Leafs.Append("clogServerAddrType", types.YLeaf{"ClogServerAddrType", clogServerConfigEntry.ClogServerAddrType})
    clogServerConfigEntry.EntityData.Leafs.Append("clogServerAddr", types.YLeaf{"ClogServerAddr", clogServerConfigEntry.ClogServerAddr})
    clogServerConfigEntry.EntityData.Leafs.Append("clogServerStatus", types.YLeaf{"ClogServerStatus", clogServerConfigEntry.ClogServerStatus})

    clogServerConfigEntry.EntityData.YListKeys = []string {"ClogServerAddrType", "ClogServerAddr"}

    return &(clogServerConfigEntry.EntityData)
}

