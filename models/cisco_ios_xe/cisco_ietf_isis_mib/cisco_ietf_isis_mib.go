// This document describes a management information base for
// the IS-IS Routing protocol, as described in ISO 10589,
// when it is used to construct routing tables for IP networks,
// as described in RFC 1195. This MIB is entirely based upon
// the IETF draft draft-ietf-isis-wg-mib-16.
package cisco_ietf_isis_mib

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xe"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package cisco_ietf_isis_mib"))
    ydk.RegisterEntity("{urn:ietf:params:xml:ns:yang:smiv2:CISCO-IETF-ISIS-MIB CISCO-IETF-ISIS-MIB}", reflect.TypeOf(CISCOIETFISISMIB{}))
    ydk.RegisterEntity("CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB", reflect.TypeOf(CISCOIETFISISMIB{}))
}

// CiiMetricStyle represents Do we use 1195 style Metrics or wide metrics.
type CiiMetricStyle string

const (
    CiiMetricStyle_narrow CiiMetricStyle = "narrow"

    CiiMetricStyle_wide CiiMetricStyle = "wide"

    CiiMetricStyle_both CiiMetricStyle = "both"
)

// CiiLevelState represents States of the IS-IS protocol.
type CiiLevelState string

const (
    CiiLevelState_off CiiLevelState = "off"

    CiiLevelState_on CiiLevelState = "on"

    CiiLevelState_waiting CiiLevelState = "waiting"

    CiiLevelState_overloaded CiiLevelState = "overloaded"
)

// CiiSupportedProtocol represents these protocols in ISO TR9577.
type CiiSupportedProtocol string

const (
    CiiSupportedProtocol_iso8473 CiiSupportedProtocol = "iso8473"

    CiiSupportedProtocol_ipV6 CiiSupportedProtocol = "ipV6"

    CiiSupportedProtocol_ip CiiSupportedProtocol = "ip"
)

// CiiAdminState represents Values match those in RFC 2863.
type CiiAdminState string

const (
    CiiAdminState_on CiiAdminState = "on"

    CiiAdminState_off CiiAdminState = "off"
)

// CiiMetricType represents Is this an Internal or External Metric?
type CiiMetricType string

const (
    CiiMetricType_internal CiiMetricType = "internal"

    CiiMetricType_external CiiMetricType = "external"
)

// CiiISLevel represents Identifies a level.
type CiiISLevel string

const (
    CiiISLevel_none CiiISLevel = "none"

    CiiISLevel_area CiiISLevel = "area"

    CiiISLevel_domain CiiISLevel = "domain"
)

// CISCOIETFISISMIB
type CISCOIETFISISMIB struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    
    CiiSysObject CISCOIETFISISMIB_CiiSysObject

    
    CiiCirc CISCOIETFISISMIB_CiiCirc

    // The set of manual area addresses configured on this Intermediate System.
    CiiManAreaAddrTable CISCOIETFISISMIB_CiiManAreaAddrTable

    // The union of the sets of area addresses reported in all Level 1 LSPs with
    // fragment number zero generated by this Intermediate System, or received
    // from other Intermediate Systems which are reachable via Level 1 routing.
    CiiAreaAddrTable CISCOIETFISISMIB_CiiAreaAddrTable

    // This table contains the manually configured set of protocols supported by
    // this Intermediate System.
    CiiSysProtSuppTable CISCOIETFISISMIB_CiiSysProtSuppTable

    // The set of IP summary addresses to use in forming summary TLVs originated
    // by this Intermediate System.  An administrator may use a summary address to
    // combine and modify IP Reachability announcements.  If the Intermediate
    // system can reach any subset of the summary address, the summary address
    // will be announced instead, at the configured metric.
    CiiSummAddrTable CISCOIETFISISMIB_CiiSummAddrTable

    // This table provides criteria to decide if a route should be leaked from L2
    // to L1 when Domain Wide Prefix leaking is enabled.  Addresses that match the
    // summary mask in the table will be announced at L1 by routers when
    // ciiSysL2toL1Leaking is enabled.  Routes that fall into the ranges specified
    // are announced as is, without being summarized.  Routes that do not match a
    // summary mask are not announced.
    CiiRedistributeAddrTable CISCOIETFISISMIB_CiiRedistributeAddrTable

    // The set of hostnames and router ID.
    CiiRouterTable CISCOIETFISISMIB_CiiRouterTable

    // Level specific information about the System.
    CiiSysLevelTable CISCOIETFISISMIB_CiiSysLevelTable

    // The table of circuits used by this Intermediate System.
    CiiCircTable CISCOIETFISISMIB_CiiCircTable

    // Level specific information about circuits used by IS-IS.
    CiiCircLevelTable CISCOIETFISISMIB_CiiCircLevelTable

    // System wide counters for this Intermediate System.
    CiiSystemCounterTable CISCOIETFISISMIB_CiiSystemCounterTable

    // Circuit specific counters for this Intermediate System.
    CiiCircuitCounterTable CISCOIETFISISMIB_CiiCircuitCounterTable

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction.
    CiiPacketCounterTable CISCOIETFISISMIB_CiiPacketCounterTable

    // The table of adjacencies to Intermediate Systems.
    CiiISAdjTable CISCOIETFISISMIB_CiiISAdjTable

    // This table contains the set of Area Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    CiiISAdjAreaAddrTable CISCOIETFISISMIB_CiiISAdjAreaAddrTable

    // This table contains the set of IP Addresses of neighboring Intermediate
    // Systems as reported in received IIH PDUs.
    CiiISAdjIPAddrTable CISCOIETFISISMIB_CiiISAdjIPAddrTable

    // This table contains the set of protocols supported by neighboring
    // Intermediate Systems as reported in received IIH PDUs.
    CiiISAdjProtSuppTable CISCOIETFISISMIB_CiiISAdjProtSuppTable

    // The table of Reachable Addresses to NSAPs or Address Prefixes.
    CiiRATable CISCOIETFISISMIB_CiiRATable

    // The table of IP Reachable Addresses to networks, subnetworks or hosts
    // either manually configured or learned from another protocol.
    CiiIPRATable CISCOIETFISISMIB_CiiIPRATable

    // The table of LSP Headers.
    CiiLSPSummaryTable CISCOIETFISISMIB_CiiLSPSummaryTable

    // The contents of each LSP.
    CiiLSPTLVTable CISCOIETFISISMIB_CiiLSPTLVTable
}

func (cISCOIETFISISMIB *CISCOIETFISISMIB) GetEntityData() *types.CommonEntityData {
    cISCOIETFISISMIB.EntityData.YFilter = cISCOIETFISISMIB.YFilter
    cISCOIETFISISMIB.EntityData.YangName = "CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.BundleName = "cisco_ios_xe"
    cISCOIETFISISMIB.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.SegmentPath = "CISCO-IETF-ISIS-MIB:CISCO-IETF-ISIS-MIB"
    cISCOIETFISISMIB.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    cISCOIETFISISMIB.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    cISCOIETFISISMIB.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    cISCOIETFISISMIB.EntityData.Children = types.NewOrderedMap()
    cISCOIETFISISMIB.EntityData.Children.Append("ciiSysObject", types.YChild{"CiiSysObject", &cISCOIETFISISMIB.CiiSysObject})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiCirc", types.YChild{"CiiCirc", &cISCOIETFISISMIB.CiiCirc})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiManAreaAddrTable", types.YChild{"CiiManAreaAddrTable", &cISCOIETFISISMIB.CiiManAreaAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiAreaAddrTable", types.YChild{"CiiAreaAddrTable", &cISCOIETFISISMIB.CiiAreaAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiSysProtSuppTable", types.YChild{"CiiSysProtSuppTable", &cISCOIETFISISMIB.CiiSysProtSuppTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiSummAddrTable", types.YChild{"CiiSummAddrTable", &cISCOIETFISISMIB.CiiSummAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiRedistributeAddrTable", types.YChild{"CiiRedistributeAddrTable", &cISCOIETFISISMIB.CiiRedistributeAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiRouterTable", types.YChild{"CiiRouterTable", &cISCOIETFISISMIB.CiiRouterTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiSysLevelTable", types.YChild{"CiiSysLevelTable", &cISCOIETFISISMIB.CiiSysLevelTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiCircTable", types.YChild{"CiiCircTable", &cISCOIETFISISMIB.CiiCircTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiCircLevelTable", types.YChild{"CiiCircLevelTable", &cISCOIETFISISMIB.CiiCircLevelTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiSystemCounterTable", types.YChild{"CiiSystemCounterTable", &cISCOIETFISISMIB.CiiSystemCounterTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiCircuitCounterTable", types.YChild{"CiiCircuitCounterTable", &cISCOIETFISISMIB.CiiCircuitCounterTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiPacketCounterTable", types.YChild{"CiiPacketCounterTable", &cISCOIETFISISMIB.CiiPacketCounterTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiISAdjTable", types.YChild{"CiiISAdjTable", &cISCOIETFISISMIB.CiiISAdjTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiISAdjAreaAddrTable", types.YChild{"CiiISAdjAreaAddrTable", &cISCOIETFISISMIB.CiiISAdjAreaAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiISAdjIPAddrTable", types.YChild{"CiiISAdjIPAddrTable", &cISCOIETFISISMIB.CiiISAdjIPAddrTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiISAdjProtSuppTable", types.YChild{"CiiISAdjProtSuppTable", &cISCOIETFISISMIB.CiiISAdjProtSuppTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiRATable", types.YChild{"CiiRATable", &cISCOIETFISISMIB.CiiRATable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiIPRATable", types.YChild{"CiiIPRATable", &cISCOIETFISISMIB.CiiIPRATable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiLSPSummaryTable", types.YChild{"CiiLSPSummaryTable", &cISCOIETFISISMIB.CiiLSPSummaryTable})
    cISCOIETFISISMIB.EntityData.Children.Append("ciiLSPTLVTable", types.YChild{"CiiLSPTLVTable", &cISCOIETFISISMIB.CiiLSPTLVTable})
    cISCOIETFISISMIB.EntityData.Leafs = types.NewOrderedMap()

    cISCOIETFISISMIB.EntityData.YListKeys = []string {}

    return &(cISCOIETFISISMIB.EntityData)
}

// CISCOIETFISISMIB_CiiSysObject
type CISCOIETFISISMIB_CiiSysObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The version number of the IS-IS protocol that is implemented. The type is
    // CiiSysVersion.
    CiiSysVersion interface{}

    // At which levels is the Intermediate System running? This object follows the
    // replaceOnlyWhileDisabled behavior. The type is CiiSysType.
    CiiSysType interface{}

    // The ID for this Intermediate System. This value is appended to each of the
    // area addresses to form the Network Entity Titles. The derivation of a value
    // for this object is implementation-specific.  Some implementations may
    // automatically assign values and not permit an SNMP write, while others may
    // require the value to be set manually. The type is string with length: 6.
    CiiSysID interface{}

    // Maximum number of paths with equal routing metric value which it is
    // permitted to split between. This object follows the
    // replaceOnlyWhileDisabled behavior. The type is interface{} with range:
    // 1..32.
    CiiSysMaxPathSplits interface{}

    // Maximum interval, in seconds, between generated LSPs by this Intermediate
    // System. This object follows the resettingTimer behavior.  The value must be
    // greater than any value configured for ciiSysLevelMinLSPGenInt, and should
    // be at least 300 seconds less than ciiSysMaxAge. The type is interface{}
    // with range: 1..65235. Units are seconds.
    CiiSysMaxLSPGenInt interface{}

    // The value, in seconds, to be used for the suggested ES configuration timer
    // in ISH PDUs when soliciting the ES configuration. The type is interface{}
    // with range: 0..65535. Units are seconds.
    CiiSysPollESHelloRate interface{}

    // Number of seconds to delay in 'waiting' state before entering 'on' state.
    // This object follows the resettingTimer behavior. The type is interface{}
    // with range: 1..65535. Units are seconds.
    CiiSysWaitTime interface{}

    // The administrative state of this Intermediate System.  Setting this object
    // to the value 'on' when its current value is 'off' enables the Intermediate
    // System. The type is CiiAdminState.
    CiiSysAdminState interface{}

    // If true, allow the router to leak L2 routes into L1. The type is bool.
    CiiSysL2toL1Leaking interface{}

    // Value to place in RemainingLifeTime field of the LSPs we generate. This
    // should be at least 300 seconds greater than ciiSysMaxLSPGenInt. The type is
    // interface{} with range: 350..65535. Units are seconds.
    CiiSysMaxAge interface{}

    // Size of the largest Buffer we are designed or configured to store.  This
    // should be at least as big as the maximum ciiSysLevelOrigLSPBuffSize
    // supported by the system.  If resources allow, we will store and flood LSPs
    // larger than ciiSysReceiveLSPBufferSize, as this can help avoid problems in
    // networks with different values for ciiSysLevelOrigLSPBuffSize. The type is
    // interface{} with range: 1492..16000. Units are bytes.
    CiiSysReceiveLSPBufferSize interface{}
}

func (ciiSysObject *CISCOIETFISISMIB_CiiSysObject) GetEntityData() *types.CommonEntityData {
    ciiSysObject.EntityData.YFilter = ciiSysObject.YFilter
    ciiSysObject.EntityData.YangName = "ciiSysObject"
    ciiSysObject.EntityData.BundleName = "cisco_ios_xe"
    ciiSysObject.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiSysObject.EntityData.SegmentPath = "ciiSysObject"
    ciiSysObject.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSysObject.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSysObject.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSysObject.EntityData.Children = types.NewOrderedMap()
    ciiSysObject.EntityData.Leafs = types.NewOrderedMap()
    ciiSysObject.EntityData.Leafs.Append("ciiSysVersion", types.YLeaf{"CiiSysVersion", ciiSysObject.CiiSysVersion})
    ciiSysObject.EntityData.Leafs.Append("ciiSysType", types.YLeaf{"CiiSysType", ciiSysObject.CiiSysType})
    ciiSysObject.EntityData.Leafs.Append("ciiSysID", types.YLeaf{"CiiSysID", ciiSysObject.CiiSysID})
    ciiSysObject.EntityData.Leafs.Append("ciiSysMaxPathSplits", types.YLeaf{"CiiSysMaxPathSplits", ciiSysObject.CiiSysMaxPathSplits})
    ciiSysObject.EntityData.Leafs.Append("ciiSysMaxLSPGenInt", types.YLeaf{"CiiSysMaxLSPGenInt", ciiSysObject.CiiSysMaxLSPGenInt})
    ciiSysObject.EntityData.Leafs.Append("ciiSysPollESHelloRate", types.YLeaf{"CiiSysPollESHelloRate", ciiSysObject.CiiSysPollESHelloRate})
    ciiSysObject.EntityData.Leafs.Append("ciiSysWaitTime", types.YLeaf{"CiiSysWaitTime", ciiSysObject.CiiSysWaitTime})
    ciiSysObject.EntityData.Leafs.Append("ciiSysAdminState", types.YLeaf{"CiiSysAdminState", ciiSysObject.CiiSysAdminState})
    ciiSysObject.EntityData.Leafs.Append("ciiSysL2toL1Leaking", types.YLeaf{"CiiSysL2toL1Leaking", ciiSysObject.CiiSysL2toL1Leaking})
    ciiSysObject.EntityData.Leafs.Append("ciiSysMaxAge", types.YLeaf{"CiiSysMaxAge", ciiSysObject.CiiSysMaxAge})
    ciiSysObject.EntityData.Leafs.Append("ciiSysReceiveLSPBufferSize", types.YLeaf{"CiiSysReceiveLSPBufferSize", ciiSysObject.CiiSysReceiveLSPBufferSize})

    ciiSysObject.EntityData.YListKeys = []string {}

    return &(ciiSysObject.EntityData)
}

// CISCOIETFISISMIB_CiiSysObject_CiiSysType represents replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_CiiSysObject_CiiSysType string

const (
    CISCOIETFISISMIB_CiiSysObject_CiiSysType_level1IS CISCOIETFISISMIB_CiiSysObject_CiiSysType = "level1IS"

    CISCOIETFISISMIB_CiiSysObject_CiiSysType_level2IS CISCOIETFISISMIB_CiiSysObject_CiiSysType = "level2IS"

    CISCOIETFISISMIB_CiiSysObject_CiiSysType_level1L2IS CISCOIETFISISMIB_CiiSysObject_CiiSysType = "level1L2IS"
)

// CISCOIETFISISMIB_CiiSysObject_CiiSysVersion represents is implemented.
type CISCOIETFISISMIB_CiiSysObject_CiiSysVersion string

const (
    CISCOIETFISISMIB_CiiSysObject_CiiSysVersion_unknown CISCOIETFISISMIB_CiiSysObject_CiiSysVersion = "unknown"

    CISCOIETFISISMIB_CiiSysObject_CiiSysVersion_one CISCOIETFISISMIB_CiiSysObject_CiiSysVersion = "one"
)

// CISCOIETFISISMIB_CiiCirc
type CISCOIETFISISMIB_CiiCirc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This object is used to assign values to ciiCircIndex as described in
    // 'Textual Conventions for SNMPv2'.  The network manager reads this object,
    // and then writes the value back as the ciiCircIndex in a SET that creates a
    // new instance of ciiCircEntry.  If the SET fails with the code
    // 'inconsistentValue', then the process must be repeated; If the SET
    // succeeds, then the object is incremented, and the new ciiCircEntry is
    // created according to the manager's directions. The type is interface{} with
    // range: 0..4294967295.
    CiiNextCircIndex interface{}
}

func (ciiCirc *CISCOIETFISISMIB_CiiCirc) GetEntityData() *types.CommonEntityData {
    ciiCirc.EntityData.YFilter = ciiCirc.YFilter
    ciiCirc.EntityData.YangName = "ciiCirc"
    ciiCirc.EntityData.BundleName = "cisco_ios_xe"
    ciiCirc.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiCirc.EntityData.SegmentPath = "ciiCirc"
    ciiCirc.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCirc.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCirc.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCirc.EntityData.Children = types.NewOrderedMap()
    ciiCirc.EntityData.Leafs = types.NewOrderedMap()
    ciiCirc.EntityData.Leafs.Append("ciiNextCircIndex", types.YLeaf{"CiiNextCircIndex", ciiCirc.CiiNextCircIndex})

    ciiCirc.EntityData.YListKeys = []string {}

    return &(ciiCirc.EntityData)
}

// CISCOIETFISISMIB_CiiManAreaAddrTable
// The set of manual area addresses configured on this
// Intermediate System.
type CISCOIETFISISMIB_CiiManAreaAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one area address manually configured on this system.
    // The type is slice of
    // CISCOIETFISISMIB_CiiManAreaAddrTable_CiiManAreaAddrEntry.
    CiiManAreaAddrEntry []*CISCOIETFISISMIB_CiiManAreaAddrTable_CiiManAreaAddrEntry
}

func (ciiManAreaAddrTable *CISCOIETFISISMIB_CiiManAreaAddrTable) GetEntityData() *types.CommonEntityData {
    ciiManAreaAddrTable.EntityData.YFilter = ciiManAreaAddrTable.YFilter
    ciiManAreaAddrTable.EntityData.YangName = "ciiManAreaAddrTable"
    ciiManAreaAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiManAreaAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiManAreaAddrTable.EntityData.SegmentPath = "ciiManAreaAddrTable"
    ciiManAreaAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiManAreaAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiManAreaAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiManAreaAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiManAreaAddrTable.EntityData.Children.Append("ciiManAreaAddrEntry", types.YChild{"CiiManAreaAddrEntry", nil})
    for i := range ciiManAreaAddrTable.CiiManAreaAddrEntry {
        ciiManAreaAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiManAreaAddrTable.CiiManAreaAddrEntry[i]), types.YChild{"CiiManAreaAddrEntry", ciiManAreaAddrTable.CiiManAreaAddrEntry[i]})
    }
    ciiManAreaAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiManAreaAddrTable.EntityData.YListKeys = []string {}

    return &(ciiManAreaAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiManAreaAddrTable_CiiManAreaAddrEntry
// Each entry contains one area address manually configured
// on this system
type CISCOIETFISISMIB_CiiManAreaAddrTable_CiiManAreaAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. A manually configured area address for this
    // system. This object follows the index behavior.  Note: an index for the
    // entry {1, {49.0001} active} in this table would be the ordered pair (1,
    // (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the
    // OID. The type is string with length: 0..20.
    CiiManAreaAddr interface{}

    // The state of the ciiManAreaAddrEntry. This object follows the Row Status
    // behavior. If the ciiSysAdminState for this Intermediate System is 'on', and
    // an attempt is made to set this object to the value 'destroy' or
    // 'notInService' when this is the only ciiManAreaAddrEntry in state 'active'
    // for this Intermediate System should return inconsistentValue. The type is
    // RowStatus.
    CiiManAreaAddrExistState interface{}
}

func (ciiManAreaAddrEntry *CISCOIETFISISMIB_CiiManAreaAddrTable_CiiManAreaAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiManAreaAddrEntry.EntityData.YFilter = ciiManAreaAddrEntry.YFilter
    ciiManAreaAddrEntry.EntityData.YangName = "ciiManAreaAddrEntry"
    ciiManAreaAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiManAreaAddrEntry.EntityData.ParentYangName = "ciiManAreaAddrTable"
    ciiManAreaAddrEntry.EntityData.SegmentPath = "ciiManAreaAddrEntry" + types.AddKeyToken(ciiManAreaAddrEntry.CiiManAreaAddr, "ciiManAreaAddr")
    ciiManAreaAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiManAreaAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiManAreaAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiManAreaAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiManAreaAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiManAreaAddrEntry.EntityData.Leafs.Append("ciiManAreaAddr", types.YLeaf{"CiiManAreaAddr", ciiManAreaAddrEntry.CiiManAreaAddr})
    ciiManAreaAddrEntry.EntityData.Leafs.Append("ciiManAreaAddrExistState", types.YLeaf{"CiiManAreaAddrExistState", ciiManAreaAddrEntry.CiiManAreaAddrExistState})

    ciiManAreaAddrEntry.EntityData.YListKeys = []string {"CiiManAreaAddr"}

    return &(ciiManAreaAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiAreaAddrTable
// The union of the sets of area addresses reported in all
// Level 1 LSPs with fragment number zero generated by this
// Intermediate System, or received from other Intermediate
// Systems which are reachable via Level 1 routing.
type CISCOIETFISISMIB_CiiAreaAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one area address reported in a Level 1 LSP generated or
    // received by this Intermediate System. The type is slice of
    // CISCOIETFISISMIB_CiiAreaAddrTable_CiiAreaAddrEntry.
    CiiAreaAddrEntry []*CISCOIETFISISMIB_CiiAreaAddrTable_CiiAreaAddrEntry
}

func (ciiAreaAddrTable *CISCOIETFISISMIB_CiiAreaAddrTable) GetEntityData() *types.CommonEntityData {
    ciiAreaAddrTable.EntityData.YFilter = ciiAreaAddrTable.YFilter
    ciiAreaAddrTable.EntityData.YangName = "ciiAreaAddrTable"
    ciiAreaAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiAreaAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiAreaAddrTable.EntityData.SegmentPath = "ciiAreaAddrTable"
    ciiAreaAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiAreaAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiAreaAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiAreaAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiAreaAddrTable.EntityData.Children.Append("ciiAreaAddrEntry", types.YChild{"CiiAreaAddrEntry", nil})
    for i := range ciiAreaAddrTable.CiiAreaAddrEntry {
        ciiAreaAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiAreaAddrTable.CiiAreaAddrEntry[i]), types.YChild{"CiiAreaAddrEntry", ciiAreaAddrTable.CiiAreaAddrEntry[i]})
    }
    ciiAreaAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiAreaAddrTable.EntityData.YListKeys = []string {}

    return &(ciiAreaAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiAreaAddrTable_CiiAreaAddrEntry
// Each entry contains one area address reported in a
// Level 1 LSP generated or received by this Intermediate
// System.
type CISCOIETFISISMIB_CiiAreaAddrTable_CiiAreaAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. An area address reported in a Level 1 LSP. The
    // type is string with length: 0..20.
    CiiAreaAddr interface{}
}

func (ciiAreaAddrEntry *CISCOIETFISISMIB_CiiAreaAddrTable_CiiAreaAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiAreaAddrEntry.EntityData.YFilter = ciiAreaAddrEntry.YFilter
    ciiAreaAddrEntry.EntityData.YangName = "ciiAreaAddrEntry"
    ciiAreaAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiAreaAddrEntry.EntityData.ParentYangName = "ciiAreaAddrTable"
    ciiAreaAddrEntry.EntityData.SegmentPath = "ciiAreaAddrEntry" + types.AddKeyToken(ciiAreaAddrEntry.CiiAreaAddr, "ciiAreaAddr")
    ciiAreaAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiAreaAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiAreaAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiAreaAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiAreaAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiAreaAddrEntry.EntityData.Leafs.Append("ciiAreaAddr", types.YLeaf{"CiiAreaAddr", ciiAreaAddrEntry.CiiAreaAddr})

    ciiAreaAddrEntry.EntityData.YListKeys = []string {"CiiAreaAddr"}

    return &(ciiAreaAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiSysProtSuppTable
// This table contains the manually configured set of
// protocols supported by this Intermediate System.
type CISCOIETFISISMIB_CiiSysProtSuppTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by this Intermediate System. The
    // type is slice of CISCOIETFISISMIB_CiiSysProtSuppTable_CiiSysProtSuppEntry.
    CiiSysProtSuppEntry []*CISCOIETFISISMIB_CiiSysProtSuppTable_CiiSysProtSuppEntry
}

func (ciiSysProtSuppTable *CISCOIETFISISMIB_CiiSysProtSuppTable) GetEntityData() *types.CommonEntityData {
    ciiSysProtSuppTable.EntityData.YFilter = ciiSysProtSuppTable.YFilter
    ciiSysProtSuppTable.EntityData.YangName = "ciiSysProtSuppTable"
    ciiSysProtSuppTable.EntityData.BundleName = "cisco_ios_xe"
    ciiSysProtSuppTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiSysProtSuppTable.EntityData.SegmentPath = "ciiSysProtSuppTable"
    ciiSysProtSuppTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSysProtSuppTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSysProtSuppTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSysProtSuppTable.EntityData.Children = types.NewOrderedMap()
    ciiSysProtSuppTable.EntityData.Children.Append("ciiSysProtSuppEntry", types.YChild{"CiiSysProtSuppEntry", nil})
    for i := range ciiSysProtSuppTable.CiiSysProtSuppEntry {
        ciiSysProtSuppTable.EntityData.Children.Append(types.GetSegmentPath(ciiSysProtSuppTable.CiiSysProtSuppEntry[i]), types.YChild{"CiiSysProtSuppEntry", ciiSysProtSuppTable.CiiSysProtSuppEntry[i]})
    }
    ciiSysProtSuppTable.EntityData.Leafs = types.NewOrderedMap()

    ciiSysProtSuppTable.EntityData.YListKeys = []string {}

    return &(ciiSysProtSuppTable.EntityData)
}

// CISCOIETFISISMIB_CiiSysProtSuppTable_CiiSysProtSuppEntry
// Each entry contains one protocol supported by
// this Intermediate System.
type CISCOIETFISISMIB_CiiSysProtSuppTable_CiiSysProtSuppEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. One supported protocol. This object follows the
    // index behavior. The type is CiiSupportedProtocol.
    CiiSysProtSuppProtocol interface{}

    // The state of the ciiSysProtSuppEntry. This object follows the RowStatus
    // behavior. The type is RowStatus.
    CiiSysProtSuppExistState interface{}
}

func (ciiSysProtSuppEntry *CISCOIETFISISMIB_CiiSysProtSuppTable_CiiSysProtSuppEntry) GetEntityData() *types.CommonEntityData {
    ciiSysProtSuppEntry.EntityData.YFilter = ciiSysProtSuppEntry.YFilter
    ciiSysProtSuppEntry.EntityData.YangName = "ciiSysProtSuppEntry"
    ciiSysProtSuppEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiSysProtSuppEntry.EntityData.ParentYangName = "ciiSysProtSuppTable"
    ciiSysProtSuppEntry.EntityData.SegmentPath = "ciiSysProtSuppEntry" + types.AddKeyToken(ciiSysProtSuppEntry.CiiSysProtSuppProtocol, "ciiSysProtSuppProtocol")
    ciiSysProtSuppEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSysProtSuppEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSysProtSuppEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSysProtSuppEntry.EntityData.Children = types.NewOrderedMap()
    ciiSysProtSuppEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiSysProtSuppEntry.EntityData.Leafs.Append("ciiSysProtSuppProtocol", types.YLeaf{"CiiSysProtSuppProtocol", ciiSysProtSuppEntry.CiiSysProtSuppProtocol})
    ciiSysProtSuppEntry.EntityData.Leafs.Append("ciiSysProtSuppExistState", types.YLeaf{"CiiSysProtSuppExistState", ciiSysProtSuppEntry.CiiSysProtSuppExistState})

    ciiSysProtSuppEntry.EntityData.YListKeys = []string {"CiiSysProtSuppProtocol"}

    return &(ciiSysProtSuppEntry.EntityData)
}

// CISCOIETFISISMIB_CiiSummAddrTable
// The set of IP summary addresses to use in forming
// summary TLVs originated by this Intermediate System.
// 
// An administrator may use a summary address to combine
// and modify IP Reachability announcements.  If the
// Intermediate system can reach any subset of the summary
// address, the summary address will be announced instead,
// at the configured metric.
type CISCOIETFISISMIB_CiiSummAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address. The type is slice of
    // CISCOIETFISISMIB_CiiSummAddrTable_CiiSummAddrEntry.
    CiiSummAddrEntry []*CISCOIETFISISMIB_CiiSummAddrTable_CiiSummAddrEntry
}

func (ciiSummAddrTable *CISCOIETFISISMIB_CiiSummAddrTable) GetEntityData() *types.CommonEntityData {
    ciiSummAddrTable.EntityData.YFilter = ciiSummAddrTable.YFilter
    ciiSummAddrTable.EntityData.YangName = "ciiSummAddrTable"
    ciiSummAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiSummAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiSummAddrTable.EntityData.SegmentPath = "ciiSummAddrTable"
    ciiSummAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSummAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSummAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSummAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiSummAddrTable.EntityData.Children.Append("ciiSummAddrEntry", types.YChild{"CiiSummAddrEntry", nil})
    for i := range ciiSummAddrTable.CiiSummAddrEntry {
        ciiSummAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiSummAddrTable.CiiSummAddrEntry[i]), types.YChild{"CiiSummAddrEntry", ciiSummAddrTable.CiiSummAddrEntry[i]})
    }
    ciiSummAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiSummAddrTable.EntityData.YListKeys = []string {}

    return &(ciiSummAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiSummAddrTable_CiiSummAddrEntry
// Each entry contains one IP summary address.
type CISCOIETFISISMIB_CiiSummAddrTable_CiiSummAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    CiiSummAddressType interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    CiiSummAddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    CiiSummAddrPrefixLen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    CiiSummAddrExistState interface{}

    // The metric value to announce this summary address with in LSPs generated by
    // this system. The type is interface{} with range: 0..63.
    CiiSummAddrMetric interface{}

    // The wide metric value to announce this summary address with in LSPs
    // generated by this system. The type is interface{} with range:
    // 0..4294967295.
    CiiSummAddrFullMetric interface{}
}

func (ciiSummAddrEntry *CISCOIETFISISMIB_CiiSummAddrTable_CiiSummAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiSummAddrEntry.EntityData.YFilter = ciiSummAddrEntry.YFilter
    ciiSummAddrEntry.EntityData.YangName = "ciiSummAddrEntry"
    ciiSummAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiSummAddrEntry.EntityData.ParentYangName = "ciiSummAddrTable"
    ciiSummAddrEntry.EntityData.SegmentPath = "ciiSummAddrEntry" + types.AddKeyToken(ciiSummAddrEntry.CiiSummAddressType, "ciiSummAddressType") + types.AddKeyToken(ciiSummAddrEntry.CiiSummAddress, "ciiSummAddress") + types.AddKeyToken(ciiSummAddrEntry.CiiSummAddrPrefixLen, "ciiSummAddrPrefixLen")
    ciiSummAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSummAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSummAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSummAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiSummAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddressType", types.YLeaf{"CiiSummAddressType", ciiSummAddrEntry.CiiSummAddressType})
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddress", types.YLeaf{"CiiSummAddress", ciiSummAddrEntry.CiiSummAddress})
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddrPrefixLen", types.YLeaf{"CiiSummAddrPrefixLen", ciiSummAddrEntry.CiiSummAddrPrefixLen})
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddrExistState", types.YLeaf{"CiiSummAddrExistState", ciiSummAddrEntry.CiiSummAddrExistState})
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddrMetric", types.YLeaf{"CiiSummAddrMetric", ciiSummAddrEntry.CiiSummAddrMetric})
    ciiSummAddrEntry.EntityData.Leafs.Append("ciiSummAddrFullMetric", types.YLeaf{"CiiSummAddrFullMetric", ciiSummAddrEntry.CiiSummAddrFullMetric})

    ciiSummAddrEntry.EntityData.YListKeys = []string {"CiiSummAddressType", "CiiSummAddress", "CiiSummAddrPrefixLen"}

    return &(ciiSummAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiRedistributeAddrTable
// This table provides criteria to decide if a route should
// be leaked from L2 to L1 when Domain Wide Prefix leaking is
// enabled.
// 
// Addresses that match the summary mask in the table will
// be announced at L1 by routers when ciiSysL2toL1Leaking
// is enabled.  Routes that fall into the ranges specified
// are announced as is, without being summarized.  Routes
// that do not match a summary mask are not announced.
type CISCOIETFISISMIB_CiiRedistributeAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP summary address to manage leaking L2 addresses
    // into L1. The type is slice of
    // CISCOIETFISISMIB_CiiRedistributeAddrTable_CiiRedistributeAddrEntry.
    CiiRedistributeAddrEntry []*CISCOIETFISISMIB_CiiRedistributeAddrTable_CiiRedistributeAddrEntry
}

func (ciiRedistributeAddrTable *CISCOIETFISISMIB_CiiRedistributeAddrTable) GetEntityData() *types.CommonEntityData {
    ciiRedistributeAddrTable.EntityData.YFilter = ciiRedistributeAddrTable.YFilter
    ciiRedistributeAddrTable.EntityData.YangName = "ciiRedistributeAddrTable"
    ciiRedistributeAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiRedistributeAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiRedistributeAddrTable.EntityData.SegmentPath = "ciiRedistributeAddrTable"
    ciiRedistributeAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRedistributeAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRedistributeAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRedistributeAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiRedistributeAddrTable.EntityData.Children.Append("ciiRedistributeAddrEntry", types.YChild{"CiiRedistributeAddrEntry", nil})
    for i := range ciiRedistributeAddrTable.CiiRedistributeAddrEntry {
        ciiRedistributeAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiRedistributeAddrTable.CiiRedistributeAddrEntry[i]), types.YChild{"CiiRedistributeAddrEntry", ciiRedistributeAddrTable.CiiRedistributeAddrEntry[i]})
    }
    ciiRedistributeAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiRedistributeAddrTable.EntityData.YListKeys = []string {}

    return &(ciiRedistributeAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiRedistributeAddrTable_CiiRedistributeAddrEntry
// Each entry contains one IP summary address to
// manage leaking L2 addresses into L1.
type CISCOIETFISISMIB_CiiRedistributeAddrTable_CiiRedistributeAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The Type of IP address for this summary address.
    // This object follows the index behavior. The type is InetAddressType.
    CiiRedistributeAddrType interface{}

    // This attribute is a key. The IP Address value for this summary address.
    // This object follows the index behavior. The type is string with length: 4 |
    // 16.
    CiiRedistributeAddrAddress interface{}

    // This attribute is a key. The Length of the IP NetMask for this summary
    // address. The type is interface{} with range: 0..128.
    CiiRedistributeAddrPrefixLen interface{}

    // The existence state of this summary address. This object follows the row
    // status behavior. The type is RowStatus.
    CiiRedistributeAddrExistState interface{}
}

func (ciiRedistributeAddrEntry *CISCOIETFISISMIB_CiiRedistributeAddrTable_CiiRedistributeAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiRedistributeAddrEntry.EntityData.YFilter = ciiRedistributeAddrEntry.YFilter
    ciiRedistributeAddrEntry.EntityData.YangName = "ciiRedistributeAddrEntry"
    ciiRedistributeAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiRedistributeAddrEntry.EntityData.ParentYangName = "ciiRedistributeAddrTable"
    ciiRedistributeAddrEntry.EntityData.SegmentPath = "ciiRedistributeAddrEntry" + types.AddKeyToken(ciiRedistributeAddrEntry.CiiRedistributeAddrType, "ciiRedistributeAddrType") + types.AddKeyToken(ciiRedistributeAddrEntry.CiiRedistributeAddrAddress, "ciiRedistributeAddrAddress") + types.AddKeyToken(ciiRedistributeAddrEntry.CiiRedistributeAddrPrefixLen, "ciiRedistributeAddrPrefixLen")
    ciiRedistributeAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRedistributeAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRedistributeAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRedistributeAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiRedistributeAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiRedistributeAddrEntry.EntityData.Leafs.Append("ciiRedistributeAddrType", types.YLeaf{"CiiRedistributeAddrType", ciiRedistributeAddrEntry.CiiRedistributeAddrType})
    ciiRedistributeAddrEntry.EntityData.Leafs.Append("ciiRedistributeAddrAddress", types.YLeaf{"CiiRedistributeAddrAddress", ciiRedistributeAddrEntry.CiiRedistributeAddrAddress})
    ciiRedistributeAddrEntry.EntityData.Leafs.Append("ciiRedistributeAddrPrefixLen", types.YLeaf{"CiiRedistributeAddrPrefixLen", ciiRedistributeAddrEntry.CiiRedistributeAddrPrefixLen})
    ciiRedistributeAddrEntry.EntityData.Leafs.Append("ciiRedistributeAddrExistState", types.YLeaf{"CiiRedistributeAddrExistState", ciiRedistributeAddrEntry.CiiRedistributeAddrExistState})

    ciiRedistributeAddrEntry.EntityData.YListKeys = []string {"CiiRedistributeAddrType", "CiiRedistributeAddrAddress", "CiiRedistributeAddrPrefixLen"}

    return &(ciiRedistributeAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiRouterTable
// The set of hostnames and router ID.
type CISCOIETFISISMIB_CiiRouterTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry tracks information about one peer at one level. The type is
    // slice of CISCOIETFISISMIB_CiiRouterTable_CiiRouterEntry.
    CiiRouterEntry []*CISCOIETFISISMIB_CiiRouterTable_CiiRouterEntry
}

func (ciiRouterTable *CISCOIETFISISMIB_CiiRouterTable) GetEntityData() *types.CommonEntityData {
    ciiRouterTable.EntityData.YFilter = ciiRouterTable.YFilter
    ciiRouterTable.EntityData.YangName = "ciiRouterTable"
    ciiRouterTable.EntityData.BundleName = "cisco_ios_xe"
    ciiRouterTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiRouterTable.EntityData.SegmentPath = "ciiRouterTable"
    ciiRouterTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRouterTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRouterTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRouterTable.EntityData.Children = types.NewOrderedMap()
    ciiRouterTable.EntityData.Children.Append("ciiRouterEntry", types.YChild{"CiiRouterEntry", nil})
    for i := range ciiRouterTable.CiiRouterEntry {
        ciiRouterTable.EntityData.Children.Append(types.GetSegmentPath(ciiRouterTable.CiiRouterEntry[i]), types.YChild{"CiiRouterEntry", ciiRouterTable.CiiRouterEntry[i]})
    }
    ciiRouterTable.EntityData.Leafs = types.NewOrderedMap()

    ciiRouterTable.EntityData.YListKeys = []string {}

    return &(ciiRouterTable.EntityData)
}

// CISCOIETFISISMIB_CiiRouterTable_CiiRouterEntry
// Each entry tracks information about one peer at
// one level.
type CISCOIETFISISMIB_CiiRouterTable_CiiRouterEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The System ID of the Router Peer. The type is
    // string with length: 6.
    CiiRouterSysID interface{}

    // This attribute is a key. The level of this Intermediate System. The type is
    // CiiISLevel.
    CiiRouterLevel interface{}

    // The hostname listed in LSP, or zero-length string if none. The type is
    // string.
    CiiRouterHostName interface{}

    // The Router ID of the Peer found in LSP, or zero if none. The type is
    // interface{} with range: 0..4294967295.
    CiiRouterID interface{}
}

func (ciiRouterEntry *CISCOIETFISISMIB_CiiRouterTable_CiiRouterEntry) GetEntityData() *types.CommonEntityData {
    ciiRouterEntry.EntityData.YFilter = ciiRouterEntry.YFilter
    ciiRouterEntry.EntityData.YangName = "ciiRouterEntry"
    ciiRouterEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiRouterEntry.EntityData.ParentYangName = "ciiRouterTable"
    ciiRouterEntry.EntityData.SegmentPath = "ciiRouterEntry" + types.AddKeyToken(ciiRouterEntry.CiiRouterSysID, "ciiRouterSysID") + types.AddKeyToken(ciiRouterEntry.CiiRouterLevel, "ciiRouterLevel")
    ciiRouterEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRouterEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRouterEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRouterEntry.EntityData.Children = types.NewOrderedMap()
    ciiRouterEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiRouterEntry.EntityData.Leafs.Append("ciiRouterSysID", types.YLeaf{"CiiRouterSysID", ciiRouterEntry.CiiRouterSysID})
    ciiRouterEntry.EntityData.Leafs.Append("ciiRouterLevel", types.YLeaf{"CiiRouterLevel", ciiRouterEntry.CiiRouterLevel})
    ciiRouterEntry.EntityData.Leafs.Append("ciiRouterHostName", types.YLeaf{"CiiRouterHostName", ciiRouterEntry.CiiRouterHostName})
    ciiRouterEntry.EntityData.Leafs.Append("ciiRouterID", types.YLeaf{"CiiRouterID", ciiRouterEntry.CiiRouterID})

    ciiRouterEntry.EntityData.YListKeys = []string {"CiiRouterSysID", "CiiRouterLevel"}

    return &(ciiRouterEntry.EntityData)
}

// CISCOIETFISISMIB_CiiSysLevelTable
// Level specific information about the System.
type CISCOIETFISISMIB_CiiSysLevelTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Describe variables defined for Area or Domain. The type is slice of
    // CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry.
    CiiSysLevelEntry []*CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry
}

func (ciiSysLevelTable *CISCOIETFISISMIB_CiiSysLevelTable) GetEntityData() *types.CommonEntityData {
    ciiSysLevelTable.EntityData.YFilter = ciiSysLevelTable.YFilter
    ciiSysLevelTable.EntityData.YangName = "ciiSysLevelTable"
    ciiSysLevelTable.EntityData.BundleName = "cisco_ios_xe"
    ciiSysLevelTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiSysLevelTable.EntityData.SegmentPath = "ciiSysLevelTable"
    ciiSysLevelTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSysLevelTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSysLevelTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSysLevelTable.EntityData.Children = types.NewOrderedMap()
    ciiSysLevelTable.EntityData.Children.Append("ciiSysLevelEntry", types.YChild{"CiiSysLevelEntry", nil})
    for i := range ciiSysLevelTable.CiiSysLevelEntry {
        ciiSysLevelTable.EntityData.Children.Append(types.GetSegmentPath(ciiSysLevelTable.CiiSysLevelEntry[i]), types.YChild{"CiiSysLevelEntry", ciiSysLevelTable.CiiSysLevelEntry[i]})
    }
    ciiSysLevelTable.EntityData.Leafs = types.NewOrderedMap()

    ciiSysLevelTable.EntityData.YListKeys = []string {}

    return &(ciiSysLevelTable.EntityData)
}

// CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry
// Describe variables defined for Area or Domain.
type CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // CiiSysLevelIndex.
    CiiSysLevelIndex interface{}

    // The maximum size of LSPs and SNPs originated by this Intermediate System at
    // this level. This object follows the replaceOnlyWhileDisabled behavior. The
    // type is interface{} with range: 512..16000.
    CiiSysLevelOrigLSPBuffSize interface{}

    // Minimum interval, in seconds, between successive generation of LSPs with
    // the same LSPID at this level by this Intermediate System.  This object
    // follows the resettingTimer behavior. The type is interface{} with range:
    // 1..65535. Units are seconds.
    CiiSysLevelMinLSPGenInt interface{}

    // The state of the database at this level. The value 'off' indicates that
    // IS-IS is not active at this level. The value 'on' indicates that IS-IS is
    // active at this level, and not overloaded. The value 'waiting' indicates a
    // database that is low on an essential resource, such as memory. The
    // administrator may force the state to 'overloaded' by setting the object
    // ciiSysLevelSetOverload. If the state is 'waiting' or 'overloaded', we
    // originate LSPs with the Overload bit set. The type is CiiLevelState.
    CiiSysLevelOverloadState interface{}

    // Administratively set the overload bit for the level. The overload bit will
    // continue to be set if the implementation runs out of memory, independent of
    // this variable. The type is bool.
    CiiSysLevelSetOverload interface{}

    // If set, the overload bit should be set, and cleared after sysUpTime exceeds
    // this value. The type is interface{} with range: 0..4294967295.
    CiiSysLevelSetOverloadUntil interface{}

    // Which style of Metric do we generate in our LSPs at this level? This object
    // follows the replaceOnlyWhileDisabled behavior. The type is CiiMetricStyle.
    CiiSysLevelMetricStyle interface{}

    // Which style of Metric do we consider in our SPF computation at this level?.
    // The type is CiiMetricStyle.
    CiiSysLevelSPFConsiders interface{}

    // Do we do Traffic Engineering at this level?. The type is bool.
    CiiSysLevelTEEnabled interface{}
}

func (ciiSysLevelEntry *CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry) GetEntityData() *types.CommonEntityData {
    ciiSysLevelEntry.EntityData.YFilter = ciiSysLevelEntry.YFilter
    ciiSysLevelEntry.EntityData.YangName = "ciiSysLevelEntry"
    ciiSysLevelEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiSysLevelEntry.EntityData.ParentYangName = "ciiSysLevelTable"
    ciiSysLevelEntry.EntityData.SegmentPath = "ciiSysLevelEntry" + types.AddKeyToken(ciiSysLevelEntry.CiiSysLevelIndex, "ciiSysLevelIndex")
    ciiSysLevelEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSysLevelEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSysLevelEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSysLevelEntry.EntityData.Children = types.NewOrderedMap()
    ciiSysLevelEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelIndex", types.YLeaf{"CiiSysLevelIndex", ciiSysLevelEntry.CiiSysLevelIndex})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelOrigLSPBuffSize", types.YLeaf{"CiiSysLevelOrigLSPBuffSize", ciiSysLevelEntry.CiiSysLevelOrigLSPBuffSize})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelMinLSPGenInt", types.YLeaf{"CiiSysLevelMinLSPGenInt", ciiSysLevelEntry.CiiSysLevelMinLSPGenInt})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelOverloadState", types.YLeaf{"CiiSysLevelOverloadState", ciiSysLevelEntry.CiiSysLevelOverloadState})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelSetOverload", types.YLeaf{"CiiSysLevelSetOverload", ciiSysLevelEntry.CiiSysLevelSetOverload})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelSetOverloadUntil", types.YLeaf{"CiiSysLevelSetOverloadUntil", ciiSysLevelEntry.CiiSysLevelSetOverloadUntil})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelMetricStyle", types.YLeaf{"CiiSysLevelMetricStyle", ciiSysLevelEntry.CiiSysLevelMetricStyle})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelSPFConsiders", types.YLeaf{"CiiSysLevelSPFConsiders", ciiSysLevelEntry.CiiSysLevelSPFConsiders})
    ciiSysLevelEntry.EntityData.Leafs.Append("ciiSysLevelTEEnabled", types.YLeaf{"CiiSysLevelTEEnabled", ciiSysLevelEntry.CiiSysLevelTEEnabled})

    ciiSysLevelEntry.EntityData.YListKeys = []string {"CiiSysLevelIndex"}

    return &(ciiSysLevelEntry.EntityData)
}

// CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex represents The level that this entry describes.
type CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex string

const (
    CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex_level1IS CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex = "level1IS"

    CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex_level2IS CISCOIETFISISMIB_CiiSysLevelTable_CiiSysLevelEntry_CiiSysLevelIndex = "level2IS"
)

// CISCOIETFISISMIB_CiiCircTable
// The table of circuits used by this
// Intermediate System.
type CISCOIETFISISMIB_CiiCircTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircEntry exists for each circuit used by Integrated IS-IS on this
    // system. The type is slice of CISCOIETFISISMIB_CiiCircTable_CiiCircEntry.
    CiiCircEntry []*CISCOIETFISISMIB_CiiCircTable_CiiCircEntry
}

func (ciiCircTable *CISCOIETFISISMIB_CiiCircTable) GetEntityData() *types.CommonEntityData {
    ciiCircTable.EntityData.YFilter = ciiCircTable.YFilter
    ciiCircTable.EntityData.YangName = "ciiCircTable"
    ciiCircTable.EntityData.BundleName = "cisco_ios_xe"
    ciiCircTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiCircTable.EntityData.SegmentPath = "ciiCircTable"
    ciiCircTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircTable.EntityData.Children = types.NewOrderedMap()
    ciiCircTable.EntityData.Children.Append("ciiCircEntry", types.YChild{"CiiCircEntry", nil})
    for i := range ciiCircTable.CiiCircEntry {
        ciiCircTable.EntityData.Children.Append(types.GetSegmentPath(ciiCircTable.CiiCircEntry[i]), types.YChild{"CiiCircEntry", ciiCircTable.CiiCircEntry[i]})
    }
    ciiCircTable.EntityData.Leafs = types.NewOrderedMap()

    ciiCircTable.EntityData.YListKeys = []string {}

    return &(ciiCircTable.EntityData)
}

// CISCOIETFISISMIB_CiiCircTable_CiiCircEntry
// An ciiCircEntry exists for each circuit used by
// Integrated IS-IS on this system.
type CISCOIETFISISMIB_CiiCircTable_CiiCircEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The identifier of this circuit, unique within the
    // Intermediate System.  This object follows the index behavior.  This is for
    // SNMP Indexing purposes only and need not have any relation to any protocol
    // value. The type is interface{} with range: 1..2147483647.
    CiiCircIndex interface{}

    // The value of ifIndex for the interface to which this circuit corresponds.  
    // This object cannot be modified after creation. The type is interface{} with
    // range: 1..2147483647.
    CiiCircIfIndex interface{}

    // A specifier for the part of the interface ifIndex to which this circuit
    // corresponds, such as a DLCI or VPI/VCI. This object cannot be modified
    // after creation. The type is interface{} with range:
    // -2147483648..2147483647.
    CiiCircIfSubIndex interface{}

    // The administrative state of the circuit. This object follows the
    // CiiAdminState behavior. The type is CiiAdminState.
    CiiCircAdminState interface{}

    // The existence state of this circuit. This object follows the RowStatus
    // behavior.  Setting the state to 'notInService' halts the generation and
    // processing of IS-IS protocol PDUs on this circuit.  Setting the state to
    // 'destroy' will also erase any configuration associated with the circuit.
    // The type is RowStatus.
    CiiCircExistState interface{}

    // The type of the circuit. This object follows the replaceOnlyWhileDisabled
    // behavior. The type specified must be compatible with the type of the
    // interface defined by the value of ciiCircIfIndex. The type is CiiCircType.
    CiiCircType interface{}

    // If true, suppress normal transmission of and interpretation of Intra-domain
    // IS-IS PDUs on this circuit. The type is bool.
    CiiCircExtDomain interface{}

    // Indicates which type of packets will be sent and accepted on this circuit.
    // The values used will be modified by the settings of ciiSysType. This object
    // follows the replaceOnlyWhileDisabled behavior. The type is CiiCircLevel.
    CiiCircLevel interface{}

    // Should we include this interface in LSPs, even if it is not running the
    // IS-IS Protocol?. The type is bool.
    CiiCircPassiveCircuit interface{}

    // Is this port a member of a mesh group, or blocked? Circuits in the same
    // mesh group act as a virtual multiaccess network.  LSPs seen on one circuit
    // in a mesh group will not be flooded to another circuit in the same mesh
    // group. The type is CiiCircMeshGroupEnabled.
    CiiCircMeshGroupEnabled interface{}

    // Circuits in the same mesh group act as a virtual multiaccess network.  LSPs
    // seen on one circuit in a mesh group will not be flooded to another circuit
    // in the same mesh group.  If ciiCircMeshGroupEnabled is inactive or blocked,
    // this value is ignored. The type is interface{} with range: 0..4294967295.
    CiiCircMeshGroup interface{}

    // Can we send unpadded hellos on LAN circuits?  'false' means LAN Hellos must
    // be padded. Implementations should allow the administrator to read this
    // value.  An implementation need not be able to support unpadded hellos to be
    // conformant. The type is bool.
    CiiCircSmallHellos interface{}

    // If the circuit is enabled, the value of sysUpTime when ciiCircAdminState
    // most recently entered the state 'on'.  If the circuit is not 'on', the
    // value of sysUpTime when the circuit last entered state 'on', 0 if the
    // circuit has never been 'on'. The type is interface{} with range:
    // 0..4294967295.
    CiiCircLastUpTime interface{}

    // Is this circuit enabled to run 3Way handshake?. The type is bool.
    CiiCirc3WayEnabled interface{}

    // The value to be used as the extended circuit ID in 3Way handshake.  This
    // value is only used if ciiCirc3WayEnabled is true, and must be unique across
    // all circuits on this IS. The type is interface{} with range: 0..4294967295.
    CiiCircExtendedCircID interface{}
}

func (ciiCircEntry *CISCOIETFISISMIB_CiiCircTable_CiiCircEntry) GetEntityData() *types.CommonEntityData {
    ciiCircEntry.EntityData.YFilter = ciiCircEntry.YFilter
    ciiCircEntry.EntityData.YangName = "ciiCircEntry"
    ciiCircEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiCircEntry.EntityData.ParentYangName = "ciiCircTable"
    ciiCircEntry.EntityData.SegmentPath = "ciiCircEntry" + types.AddKeyToken(ciiCircEntry.CiiCircIndex, "ciiCircIndex")
    ciiCircEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircEntry.EntityData.Children = types.NewOrderedMap()
    ciiCircEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiCircEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiCircEntry.CiiCircIndex})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircIfIndex", types.YLeaf{"CiiCircIfIndex", ciiCircEntry.CiiCircIfIndex})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircIfSubIndex", types.YLeaf{"CiiCircIfSubIndex", ciiCircEntry.CiiCircIfSubIndex})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircAdminState", types.YLeaf{"CiiCircAdminState", ciiCircEntry.CiiCircAdminState})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircExistState", types.YLeaf{"CiiCircExistState", ciiCircEntry.CiiCircExistState})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircType", types.YLeaf{"CiiCircType", ciiCircEntry.CiiCircType})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircExtDomain", types.YLeaf{"CiiCircExtDomain", ciiCircEntry.CiiCircExtDomain})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircLevel", types.YLeaf{"CiiCircLevel", ciiCircEntry.CiiCircLevel})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircPassiveCircuit", types.YLeaf{"CiiCircPassiveCircuit", ciiCircEntry.CiiCircPassiveCircuit})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircMeshGroupEnabled", types.YLeaf{"CiiCircMeshGroupEnabled", ciiCircEntry.CiiCircMeshGroupEnabled})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircMeshGroup", types.YLeaf{"CiiCircMeshGroup", ciiCircEntry.CiiCircMeshGroup})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircSmallHellos", types.YLeaf{"CiiCircSmallHellos", ciiCircEntry.CiiCircSmallHellos})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircLastUpTime", types.YLeaf{"CiiCircLastUpTime", ciiCircEntry.CiiCircLastUpTime})
    ciiCircEntry.EntityData.Leafs.Append("ciiCirc3WayEnabled", types.YLeaf{"CiiCirc3WayEnabled", ciiCircEntry.CiiCirc3WayEnabled})
    ciiCircEntry.EntityData.Leafs.Append("ciiCircExtendedCircID", types.YLeaf{"CiiCircExtendedCircID", ciiCircEntry.CiiCircExtendedCircID})

    ciiCircEntry.EntityData.YListKeys = []string {"CiiCircIndex"}

    return &(ciiCircEntry.EntityData)
}

// CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel represents object follows the replaceOnlyWhileDisabled behavior.
type CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel string

const (
    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel_level1 CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel = "level1"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel_level2 CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel = "level2"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel_level1L2 CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircLevel = "level1L2"
)

// CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled represents in the same mesh group.
type CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled string

const (
    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled_inactive CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled = "inactive"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled_blocked CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled = "blocked"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled_set CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircMeshGroupEnabled = "set"
)

// CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType represents by the value of ciiCircIfIndex.
type CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType string

const (
    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType_broadcast CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType = "broadcast"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType_ptToPt CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType = "ptToPt"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType_staticIn CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType = "staticIn"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType_staticOut CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType = "staticOut"

    CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType_dA CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircType = "dA"
)

// CISCOIETFISISMIB_CiiCircLevelTable
// Level specific information about circuits used by IS-IS
type CISCOIETFISISMIB_CiiCircLevelTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircLevelEntry exists for each level on each circuit used by
    // Integrated IS-IS on this system. The type is slice of
    // CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry.
    CiiCircLevelEntry []*CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry
}

func (ciiCircLevelTable *CISCOIETFISISMIB_CiiCircLevelTable) GetEntityData() *types.CommonEntityData {
    ciiCircLevelTable.EntityData.YFilter = ciiCircLevelTable.YFilter
    ciiCircLevelTable.EntityData.YangName = "ciiCircLevelTable"
    ciiCircLevelTable.EntityData.BundleName = "cisco_ios_xe"
    ciiCircLevelTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiCircLevelTable.EntityData.SegmentPath = "ciiCircLevelTable"
    ciiCircLevelTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircLevelTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircLevelTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircLevelTable.EntityData.Children = types.NewOrderedMap()
    ciiCircLevelTable.EntityData.Children.Append("ciiCircLevelEntry", types.YChild{"CiiCircLevelEntry", nil})
    for i := range ciiCircLevelTable.CiiCircLevelEntry {
        ciiCircLevelTable.EntityData.Children.Append(types.GetSegmentPath(ciiCircLevelTable.CiiCircLevelEntry[i]), types.YChild{"CiiCircLevelEntry", ciiCircLevelTable.CiiCircLevelEntry[i]})
    }
    ciiCircLevelTable.EntityData.Leafs = types.NewOrderedMap()

    ciiCircLevelTable.EntityData.YListKeys = []string {}

    return &(ciiCircLevelTable.EntityData)
}

// CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry
// An ciiCircLevelEntry exists for each level on
// each circuit used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The level that this entry describes. The type is
    // CiiCircLevelIndex.
    CiiCircLevelIndex interface{}

    // The metric value of this circuit for this level. The type is interface{}
    // with range: 0..63.
    CiiCircLevelMetric interface{}

    // The wide metric value of this circuit for this level. The type is
    // interface{} with range: 0..16777215.
    CiiCircLevelWideMetric interface{}

    // The priority for becoming LAN Designated Intermediate System at this level.
    // The type is interface{} with range: 0..127.
    CiiCircLevelISPriority interface{}

    // A one byte identifier that can be used in protocol packets to identify a
    // circuit.  Values of ciiCircLevelIDOctet do not need to be unique.  They are
    // only required to differ on LANs where the Intermediate System is the
    // Designated Intermediate System. The type is interface{} with range: 0..255.
    CiiCircLevelIDOctet interface{}

    // On a point to point circuit with a fully initialized adjacency to a peer
    // IS, the value of this object is the circuit ID negotiated during adjacency
    // initialization. On a point to point circuit without such an adjacency, the
    // value is the concatenation of the local system ID and the one byte
    // ciiCircLevelIDOctet for this circuit i.e. the value that would be proposed
    // for the circuit ID.  On other circuit types, the value returned is the zero
    // length OCTET STRING. The type is string with length: 0 | 7.
    CiiCircLevelID interface{}

    // The ID of the LAN Designated Intermediate System on this circuit at this
    // level. If, for any reason, this system is not partaking in the relevant
    // Designated Intermediate System election process, then the value returned is
    // the zero length OCTET STRING. The type is string with length: 0 | 7.
    CiiCircLevelDesIS interface{}

    // This value is multiplied by the corresponding HelloTimer and the result in
    // seconds (rounded up) is used as the holding time in transmitted hellos, to
    // be used by receivers of hello packets from this IS. The type is interface{}
    // with range: 2..100.
    CiiCircLevelHelloMultiplier interface{}

    // Maximum period, in milliseconds, between IIH PDUs on multiaccess networks
    // at this level for LANs. The value at L1 is used as the period between
    // Hellos on L1L2 point to point circuits.  Setting this value at level 2 on
    // an L1L2 point to point circuit will result in an error of
    // InconsistentValue.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 10..600000. Units are milliseconds.
    CiiCircLevelHelloTimer interface{}

    // Period, in milliseconds, between Hello PDUs on multiaccess networks when
    // this IS is the Designated Intermediate System.  This object follows the
    // resettingTimer behavior. The type is interface{} with range: 10..120000.
    // Units are milliseconds.
    CiiCircLevelDRHelloTimer interface{}

    // Minimal interval of time, in milliseconds, between transmissions of LSPs on
    // an interface at this level. The type is interface{} with range: 1..65535.
    // Units are milliseconds.
    CiiCircLevelLSPThrottle interface{}

    // Minimum interval, in seconds, between re-transmission of an LSP at this
    // level. This object follows the resettingTimer behavior.  Note that
    // ciiCircLevelLSPThrottle controls how fast we send back to back LSPs.  This
    // variable controls how fast we re-send the same LSP. The type is interface{}
    // with range: 1..300. Units are seconds.
    CiiCircLevelMinLSPRetransInt interface{}

    // Interval of time, in seconds, between periodic transmission of a complete
    // set of CSNPs on multiaccess networks if this router is the designated
    // router at this level.  This object follows the resettingTimer behavior. The
    // type is interface{} with range: 1..600. Units are seconds.
    CiiCircLevelCSNPInterval interface{}

    // Minimum interval in seconds between sending Partial Sequence Number PDUs at
    // this level. This object follows the resettingTimer behavior. The type is
    // interface{} with range: 1..120. Units are seconds.
    CiiCircLevelPartSNPInterval interface{}
}

func (ciiCircLevelEntry *CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry) GetEntityData() *types.CommonEntityData {
    ciiCircLevelEntry.EntityData.YFilter = ciiCircLevelEntry.YFilter
    ciiCircLevelEntry.EntityData.YangName = "ciiCircLevelEntry"
    ciiCircLevelEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiCircLevelEntry.EntityData.ParentYangName = "ciiCircLevelTable"
    ciiCircLevelEntry.EntityData.SegmentPath = "ciiCircLevelEntry" + types.AddKeyToken(ciiCircLevelEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiCircLevelEntry.CiiCircLevelIndex, "ciiCircLevelIndex")
    ciiCircLevelEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircLevelEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircLevelEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircLevelEntry.EntityData.Children = types.NewOrderedMap()
    ciiCircLevelEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiCircLevelEntry.CiiCircIndex})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelIndex", types.YLeaf{"CiiCircLevelIndex", ciiCircLevelEntry.CiiCircLevelIndex})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelMetric", types.YLeaf{"CiiCircLevelMetric", ciiCircLevelEntry.CiiCircLevelMetric})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelWideMetric", types.YLeaf{"CiiCircLevelWideMetric", ciiCircLevelEntry.CiiCircLevelWideMetric})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelISPriority", types.YLeaf{"CiiCircLevelISPriority", ciiCircLevelEntry.CiiCircLevelISPriority})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelIDOctet", types.YLeaf{"CiiCircLevelIDOctet", ciiCircLevelEntry.CiiCircLevelIDOctet})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelID", types.YLeaf{"CiiCircLevelID", ciiCircLevelEntry.CiiCircLevelID})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelDesIS", types.YLeaf{"CiiCircLevelDesIS", ciiCircLevelEntry.CiiCircLevelDesIS})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelHelloMultiplier", types.YLeaf{"CiiCircLevelHelloMultiplier", ciiCircLevelEntry.CiiCircLevelHelloMultiplier})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelHelloTimer", types.YLeaf{"CiiCircLevelHelloTimer", ciiCircLevelEntry.CiiCircLevelHelloTimer})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelDRHelloTimer", types.YLeaf{"CiiCircLevelDRHelloTimer", ciiCircLevelEntry.CiiCircLevelDRHelloTimer})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelLSPThrottle", types.YLeaf{"CiiCircLevelLSPThrottle", ciiCircLevelEntry.CiiCircLevelLSPThrottle})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelMinLSPRetransInt", types.YLeaf{"CiiCircLevelMinLSPRetransInt", ciiCircLevelEntry.CiiCircLevelMinLSPRetransInt})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelCSNPInterval", types.YLeaf{"CiiCircLevelCSNPInterval", ciiCircLevelEntry.CiiCircLevelCSNPInterval})
    ciiCircLevelEntry.EntityData.Leafs.Append("ciiCircLevelPartSNPInterval", types.YLeaf{"CiiCircLevelPartSNPInterval", ciiCircLevelEntry.CiiCircLevelPartSNPInterval})

    ciiCircLevelEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiCircLevelIndex"}

    return &(ciiCircLevelEntry.EntityData)
}

// CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex represents The level that this entry describes.
type CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex string

const (
    CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex_level1IS CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex = "level1IS"

    CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex_level2IS CISCOIETFISISMIB_CiiCircLevelTable_CiiCircLevelEntry_CiiCircLevelIndex = "level2IS"
)

// CISCOIETFISISMIB_CiiSystemCounterTable
// System wide counters for this Intermediate System.
type CISCOIETFISISMIB_CiiSystemCounterTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // System-wide IS-IS counters. The type is slice of
    // CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry.
    CiiSystemCounterEntry []*CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry
}

func (ciiSystemCounterTable *CISCOIETFISISMIB_CiiSystemCounterTable) GetEntityData() *types.CommonEntityData {
    ciiSystemCounterTable.EntityData.YFilter = ciiSystemCounterTable.YFilter
    ciiSystemCounterTable.EntityData.YangName = "ciiSystemCounterTable"
    ciiSystemCounterTable.EntityData.BundleName = "cisco_ios_xe"
    ciiSystemCounterTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiSystemCounterTable.EntityData.SegmentPath = "ciiSystemCounterTable"
    ciiSystemCounterTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSystemCounterTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSystemCounterTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSystemCounterTable.EntityData.Children = types.NewOrderedMap()
    ciiSystemCounterTable.EntityData.Children.Append("ciiSystemCounterEntry", types.YChild{"CiiSystemCounterEntry", nil})
    for i := range ciiSystemCounterTable.CiiSystemCounterEntry {
        ciiSystemCounterTable.EntityData.Children.Append(types.GetSegmentPath(ciiSystemCounterTable.CiiSystemCounterEntry[i]), types.YChild{"CiiSystemCounterEntry", ciiSystemCounterTable.CiiSystemCounterEntry[i]})
    }
    ciiSystemCounterTable.EntityData.Leafs = types.NewOrderedMap()

    ciiSystemCounterTable.EntityData.YListKeys = []string {}

    return &(ciiSystemCounterTable.EntityData)
}

// CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry
// System-wide IS-IS counters.
type CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The level that this entry describes. The type is
    // CiiSysStatLevel.
    CiiSysStatLevel interface{}

    // Number of corrupted in-memory LSP frames detected.  LSPs received from the
    // wire with a bad checksum are silently dropped and not counted.  LSPs
    // received from the wire with parse errors are counted by
    // ciiSysStatLSPErrors. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    CiiSysStatCorrLSPs interface{}

    // The number of frames with authentication type mismatches recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    CiiSysStatAuthTypeFails interface{}

    // The number of frames with authentication failures recognized by this
    // Intermediate System. The type is interface{} with range: 0..4294967295.
    // Units are frames.
    CiiSysStatAuthFails interface{}

    // Number of times the LSP database has become overloaded. The type is
    // interface{} with range: 0..4294967295.
    CiiSysStatLSPDbaseOloads interface{}

    // Number of times a manual address has been dropped from the area. The type
    // is interface{} with range: 0..4294967295.
    CiiSysStatManAddrDropFromAreas interface{}

    // Number of times the IS has attempted to exceed the maximum sequence number.
    // The type is interface{} with range: 0..4294967295.
    CiiSysStatAttmptToExMaxSeqNums interface{}

    // Number of times a sequence number skip has occurred. The type is
    // interface{} with range: 0..4294967295.
    CiiSysStatSeqNumSkips interface{}

    // Number of times a zero-aged copy of the system's own LSP is received from
    // some other node. The type is interface{} with range: 0..4294967295.
    CiiSysStatOwnLSPPurges interface{}

    // Number of times a PDU is received with a different value for ID field
    // length to that of the receiving system. The type is interface{} with range:
    // 0..4294967295. Units are frames.
    CiiSysStatIDFieldLenMismatches interface{}

    // Partition changes. The type is interface{} with range: 0..4294967295.
    CiiSysStatPartChanges interface{}

    // Number of times we ran SPF at this level. The type is interface{} with
    // range: 0..4294967295.
    CiiSysStatSPFRuns interface{}

    // Number of LSP frames with errors we have received. The type is interface{}
    // with range: 0..4294967295. Units are frames.
    CiiSysStatLSPErrors interface{}
}

func (ciiSystemCounterEntry *CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry) GetEntityData() *types.CommonEntityData {
    ciiSystemCounterEntry.EntityData.YFilter = ciiSystemCounterEntry.YFilter
    ciiSystemCounterEntry.EntityData.YangName = "ciiSystemCounterEntry"
    ciiSystemCounterEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiSystemCounterEntry.EntityData.ParentYangName = "ciiSystemCounterTable"
    ciiSystemCounterEntry.EntityData.SegmentPath = "ciiSystemCounterEntry" + types.AddKeyToken(ciiSystemCounterEntry.CiiSysStatLevel, "ciiSysStatLevel")
    ciiSystemCounterEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiSystemCounterEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiSystemCounterEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiSystemCounterEntry.EntityData.Children = types.NewOrderedMap()
    ciiSystemCounterEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatLevel", types.YLeaf{"CiiSysStatLevel", ciiSystemCounterEntry.CiiSysStatLevel})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatCorrLSPs", types.YLeaf{"CiiSysStatCorrLSPs", ciiSystemCounterEntry.CiiSysStatCorrLSPs})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatAuthTypeFails", types.YLeaf{"CiiSysStatAuthTypeFails", ciiSystemCounterEntry.CiiSysStatAuthTypeFails})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatAuthFails", types.YLeaf{"CiiSysStatAuthFails", ciiSystemCounterEntry.CiiSysStatAuthFails})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatLSPDbaseOloads", types.YLeaf{"CiiSysStatLSPDbaseOloads", ciiSystemCounterEntry.CiiSysStatLSPDbaseOloads})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatManAddrDropFromAreas", types.YLeaf{"CiiSysStatManAddrDropFromAreas", ciiSystemCounterEntry.CiiSysStatManAddrDropFromAreas})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatAttmptToExMaxSeqNums", types.YLeaf{"CiiSysStatAttmptToExMaxSeqNums", ciiSystemCounterEntry.CiiSysStatAttmptToExMaxSeqNums})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatSeqNumSkips", types.YLeaf{"CiiSysStatSeqNumSkips", ciiSystemCounterEntry.CiiSysStatSeqNumSkips})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatOwnLSPPurges", types.YLeaf{"CiiSysStatOwnLSPPurges", ciiSystemCounterEntry.CiiSysStatOwnLSPPurges})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatIDFieldLenMismatches", types.YLeaf{"CiiSysStatIDFieldLenMismatches", ciiSystemCounterEntry.CiiSysStatIDFieldLenMismatches})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatPartChanges", types.YLeaf{"CiiSysStatPartChanges", ciiSystemCounterEntry.CiiSysStatPartChanges})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatSPFRuns", types.YLeaf{"CiiSysStatSPFRuns", ciiSystemCounterEntry.CiiSysStatSPFRuns})
    ciiSystemCounterEntry.EntityData.Leafs.Append("ciiSysStatLSPErrors", types.YLeaf{"CiiSysStatLSPErrors", ciiSystemCounterEntry.CiiSysStatLSPErrors})

    ciiSystemCounterEntry.EntityData.YListKeys = []string {"CiiSysStatLevel"}

    return &(ciiSystemCounterEntry.EntityData)
}

// CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel represents The level that this entry describes.
type CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel string

const (
    CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel_level1IS CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel = "level1IS"

    CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel_level2IS CISCOIETFISISMIB_CiiSystemCounterTable_CiiSystemCounterEntry_CiiSysStatLevel = "level2IS"
)

// CISCOIETFISISMIB_CiiCircuitCounterTable
// Circuit specific counters for this
// Intermediate System.
type CISCOIETFISISMIB_CiiCircuitCounterTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // An ciiCircuitCounterEntry exists for each circuit used by Integrated IS-IS
    // on this system. The type is slice of
    // CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry.
    CiiCircuitCounterEntry []*CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry
}

func (ciiCircuitCounterTable *CISCOIETFISISMIB_CiiCircuitCounterTable) GetEntityData() *types.CommonEntityData {
    ciiCircuitCounterTable.EntityData.YFilter = ciiCircuitCounterTable.YFilter
    ciiCircuitCounterTable.EntityData.YangName = "ciiCircuitCounterTable"
    ciiCircuitCounterTable.EntityData.BundleName = "cisco_ios_xe"
    ciiCircuitCounterTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiCircuitCounterTable.EntityData.SegmentPath = "ciiCircuitCounterTable"
    ciiCircuitCounterTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircuitCounterTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircuitCounterTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircuitCounterTable.EntityData.Children = types.NewOrderedMap()
    ciiCircuitCounterTable.EntityData.Children.Append("ciiCircuitCounterEntry", types.YChild{"CiiCircuitCounterEntry", nil})
    for i := range ciiCircuitCounterTable.CiiCircuitCounterEntry {
        ciiCircuitCounterTable.EntityData.Children.Append(types.GetSegmentPath(ciiCircuitCounterTable.CiiCircuitCounterEntry[i]), types.YChild{"CiiCircuitCounterEntry", ciiCircuitCounterTable.CiiCircuitCounterEntry[i]})
    }
    ciiCircuitCounterTable.EntityData.Leafs = types.NewOrderedMap()

    ciiCircuitCounterTable.EntityData.YListKeys = []string {}

    return &(ciiCircuitCounterTable.EntityData)
}

// CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry
// An ciiCircuitCounterEntry exists for each circuit
// used by Integrated IS-IS on this system.
type CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. What type of circuit saw these counts?  The point
    // to point Hello PDU includes both L1 and L2, and ISs form a single adjacency
    // on point to point links. Thus we combine counts on point to point links
    // into one group. The type is CiiCircuitType.
    CiiCircuitType interface{}

    // The number of times an adjacency state change has occurred on this circuit.
    // The type is interface{} with range: 0..4294967295.
    CiiCircAdjChanges interface{}

    // The number of adjacencies on this circuit. The type is interface{} with
    // range: 0..4294967295.
    CiiCircNumAdj interface{}

    // The number of times initialization of this circuit has failed.  This counts
    // events such as PPP NCP failures. Failures to form an adjacency are counted
    // by ciiCircRejAdjs. The type is interface{} with range: 0..4294967295.
    CiiCircInitFails interface{}

    // The number of times an adjacency has been rejected on this circuit. The
    // type is interface{} with range: 0..4294967295.
    CiiCircRejAdjs interface{}

    // The number of times an IS-IS control PDU with an ID field length different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    CiiCircIDFieldLenMismatches interface{}

    // The number of times an IS-IS control PDU with a max area address field
    // different to that for this system has been received. The type is
    // interface{} with range: 0..4294967295.
    CiiCircMaxAreaAddrMismatches interface{}

    // The number of times an IS-IS control PDU with an auth type field different
    // to that for this system has been received. The type is interface{} with
    // range: 0..4294967295.
    CiiCircAuthTypeFails interface{}

    // The number of times an IS-IS control PDU with the correct auth type has
    // failed to pass authentication validation. The type is interface{} with
    // range: 0..4294967295.
    CiiCircAuthFails interface{}

    // The number of times the Designated IS has changed on this circuit at this
    // level.  If the circuit is point to point, this count is zero. The type is
    // interface{} with range: 0..4294967295.
    CiiCircLANDesISChanges interface{}
}

func (ciiCircuitCounterEntry *CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry) GetEntityData() *types.CommonEntityData {
    ciiCircuitCounterEntry.EntityData.YFilter = ciiCircuitCounterEntry.YFilter
    ciiCircuitCounterEntry.EntityData.YangName = "ciiCircuitCounterEntry"
    ciiCircuitCounterEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiCircuitCounterEntry.EntityData.ParentYangName = "ciiCircuitCounterTable"
    ciiCircuitCounterEntry.EntityData.SegmentPath = "ciiCircuitCounterEntry" + types.AddKeyToken(ciiCircuitCounterEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiCircuitCounterEntry.CiiCircuitType, "ciiCircuitType")
    ciiCircuitCounterEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiCircuitCounterEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiCircuitCounterEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiCircuitCounterEntry.EntityData.Children = types.NewOrderedMap()
    ciiCircuitCounterEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiCircuitCounterEntry.CiiCircIndex})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircuitType", types.YLeaf{"CiiCircuitType", ciiCircuitCounterEntry.CiiCircuitType})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircAdjChanges", types.YLeaf{"CiiCircAdjChanges", ciiCircuitCounterEntry.CiiCircAdjChanges})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircNumAdj", types.YLeaf{"CiiCircNumAdj", ciiCircuitCounterEntry.CiiCircNumAdj})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircInitFails", types.YLeaf{"CiiCircInitFails", ciiCircuitCounterEntry.CiiCircInitFails})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircRejAdjs", types.YLeaf{"CiiCircRejAdjs", ciiCircuitCounterEntry.CiiCircRejAdjs})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircIDFieldLenMismatches", types.YLeaf{"CiiCircIDFieldLenMismatches", ciiCircuitCounterEntry.CiiCircIDFieldLenMismatches})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircMaxAreaAddrMismatches", types.YLeaf{"CiiCircMaxAreaAddrMismatches", ciiCircuitCounterEntry.CiiCircMaxAreaAddrMismatches})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircAuthTypeFails", types.YLeaf{"CiiCircAuthTypeFails", ciiCircuitCounterEntry.CiiCircAuthTypeFails})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircAuthFails", types.YLeaf{"CiiCircAuthFails", ciiCircuitCounterEntry.CiiCircAuthFails})
    ciiCircuitCounterEntry.EntityData.Leafs.Append("ciiCircLANDesISChanges", types.YLeaf{"CiiCircLANDesISChanges", ciiCircuitCounterEntry.CiiCircLANDesISChanges})

    ciiCircuitCounterEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiCircuitType"}

    return &(ciiCircuitCounterEntry.EntityData)
}

// CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType represents point to point links into one group.
type CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType string

const (
    CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType_lanlevel1 CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType = "lanlevel1"

    CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType_lanlevel2 CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType = "lanlevel2"

    CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType_p2pcircuit CISCOIETFISISMIB_CiiCircuitCounterTable_CiiCircuitCounterEntry_CiiCircuitType = "p2pcircuit"
)

// CISCOIETFISISMIB_CiiPacketCounterTable
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_CiiPacketCounterTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Information about IS-IS protocol traffic at one level on one circuit in one
    // direction. The type is slice of
    // CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry.
    CiiPacketCounterEntry []*CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry
}

func (ciiPacketCounterTable *CISCOIETFISISMIB_CiiPacketCounterTable) GetEntityData() *types.CommonEntityData {
    ciiPacketCounterTable.EntityData.YFilter = ciiPacketCounterTable.YFilter
    ciiPacketCounterTable.EntityData.YangName = "ciiPacketCounterTable"
    ciiPacketCounterTable.EntityData.BundleName = "cisco_ios_xe"
    ciiPacketCounterTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiPacketCounterTable.EntityData.SegmentPath = "ciiPacketCounterTable"
    ciiPacketCounterTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiPacketCounterTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiPacketCounterTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiPacketCounterTable.EntityData.Children = types.NewOrderedMap()
    ciiPacketCounterTable.EntityData.Children.Append("ciiPacketCounterEntry", types.YChild{"CiiPacketCounterEntry", nil})
    for i := range ciiPacketCounterTable.CiiPacketCounterEntry {
        ciiPacketCounterTable.EntityData.Children.Append(types.GetSegmentPath(ciiPacketCounterTable.CiiPacketCounterEntry[i]), types.YChild{"CiiPacketCounterEntry", ciiPacketCounterTable.CiiPacketCounterEntry[i]})
    }
    ciiPacketCounterTable.EntityData.Leafs = types.NewOrderedMap()

    ciiPacketCounterTable.EntityData.YListKeys = []string {}

    return &(ciiPacketCounterTable.EntityData)
}

// CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry
// Information about IS-IS protocol traffic at one level
// on one circuit in one direction
type CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The level at which these PDU counts have been
    // collected. The type is CiiPacketCountLevel.
    CiiPacketCountLevel interface{}

    // This attribute is a key. Were we sending or receiving these PDUs?. The type
    // is CiiPacketCountDirection.
    CiiPacketCountDirection interface{}

    // The number of IS-IS Hello PDU frames seen in this direction at this level. 
    // Point-to-Point IIH PDUs are counted at the lowest enabled level: at L1 on
    // L1 or L1L2 circuits, and at L2 otherwise. The type is interface{} with
    // range: 0..4294967295. Units are frames.
    CiiPacketCountIIHellos interface{}

    // The number of ES-IS Hello PDU frames seen in this direction.  ISH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    CiiPacketCountISHellos interface{}

    // The number of ES Hello PDU frames seen in this direction.  ESH PDUs are
    // counted at the lowest enabled level: at L1 on L1 or L1L2 circuits, and at
    // L2 otherwise. The type is interface{} with range: 0..4294967295. Units are
    // frames.
    CiiPacketCountESHellos interface{}

    // The number of IS-IS LSP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    CiiPacketCountLSPs interface{}

    // The number of IS-IS CSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    CiiPacketCountCSNPs interface{}

    // The number of IS-IS PSNP frames seen in this direction at this level. The
    // type is interface{} with range: 0..4294967295. Units are frames.
    CiiPacketCountPSNPs interface{}

    // The number of unknown IS-IS PDU frames seen at this level. The type is
    // interface{} with range: 0..4294967295. Units are frames.
    CiiPacketCountUnknowns interface{}
}

func (ciiPacketCounterEntry *CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry) GetEntityData() *types.CommonEntityData {
    ciiPacketCounterEntry.EntityData.YFilter = ciiPacketCounterEntry.YFilter
    ciiPacketCounterEntry.EntityData.YangName = "ciiPacketCounterEntry"
    ciiPacketCounterEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiPacketCounterEntry.EntityData.ParentYangName = "ciiPacketCounterTable"
    ciiPacketCounterEntry.EntityData.SegmentPath = "ciiPacketCounterEntry" + types.AddKeyToken(ciiPacketCounterEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiPacketCounterEntry.CiiPacketCountLevel, "ciiPacketCountLevel") + types.AddKeyToken(ciiPacketCounterEntry.CiiPacketCountDirection, "ciiPacketCountDirection")
    ciiPacketCounterEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiPacketCounterEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiPacketCounterEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiPacketCounterEntry.EntityData.Children = types.NewOrderedMap()
    ciiPacketCounterEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiPacketCounterEntry.CiiCircIndex})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountLevel", types.YLeaf{"CiiPacketCountLevel", ciiPacketCounterEntry.CiiPacketCountLevel})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountDirection", types.YLeaf{"CiiPacketCountDirection", ciiPacketCounterEntry.CiiPacketCountDirection})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountIIHellos", types.YLeaf{"CiiPacketCountIIHellos", ciiPacketCounterEntry.CiiPacketCountIIHellos})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountISHellos", types.YLeaf{"CiiPacketCountISHellos", ciiPacketCounterEntry.CiiPacketCountISHellos})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountESHellos", types.YLeaf{"CiiPacketCountESHellos", ciiPacketCounterEntry.CiiPacketCountESHellos})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountLSPs", types.YLeaf{"CiiPacketCountLSPs", ciiPacketCounterEntry.CiiPacketCountLSPs})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountCSNPs", types.YLeaf{"CiiPacketCountCSNPs", ciiPacketCounterEntry.CiiPacketCountCSNPs})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountPSNPs", types.YLeaf{"CiiPacketCountPSNPs", ciiPacketCounterEntry.CiiPacketCountPSNPs})
    ciiPacketCounterEntry.EntityData.Leafs.Append("ciiPacketCountUnknowns", types.YLeaf{"CiiPacketCountUnknowns", ciiPacketCounterEntry.CiiPacketCountUnknowns})

    ciiPacketCounterEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiPacketCountLevel", "CiiPacketCountDirection"}

    return &(ciiPacketCounterEntry.EntityData)
}

// CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection represents Were we sending or receiving these PDUs?
type CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection string

const (
    CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection_sending CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection = "sending"

    CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection_receiving CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountDirection = "receiving"
)

// CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel represents The level at which these PDU counts have been collected.
type CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel string

const (
    CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel_level1 CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel = "level1"

    CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel_level2 CISCOIETFISISMIB_CiiPacketCounterTable_CiiPacketCounterEntry_CiiPacketCountLevel = "level2"
)

// CISCOIETFISISMIB_CiiISAdjTable
// The table of adjacencies to Intermediate Systems.
type CISCOIETFISISMIB_CiiISAdjTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry corresponds to one adjacency to an Intermediate System on this
    // system. The type is slice of CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry.
    CiiISAdjEntry []*CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry
}

func (ciiISAdjTable *CISCOIETFISISMIB_CiiISAdjTable) GetEntityData() *types.CommonEntityData {
    ciiISAdjTable.EntityData.YFilter = ciiISAdjTable.YFilter
    ciiISAdjTable.EntityData.YangName = "ciiISAdjTable"
    ciiISAdjTable.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiISAdjTable.EntityData.SegmentPath = "ciiISAdjTable"
    ciiISAdjTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjTable.EntityData.Children = types.NewOrderedMap()
    ciiISAdjTable.EntityData.Children.Append("ciiISAdjEntry", types.YChild{"CiiISAdjEntry", nil})
    for i := range ciiISAdjTable.CiiISAdjEntry {
        ciiISAdjTable.EntityData.Children.Append(types.GetSegmentPath(ciiISAdjTable.CiiISAdjEntry[i]), types.YChild{"CiiISAdjEntry", ciiISAdjTable.CiiISAdjEntry[i]})
    }
    ciiISAdjTable.EntityData.Leafs = types.NewOrderedMap()

    ciiISAdjTable.EntityData.YListKeys = []string {}

    return &(ciiISAdjTable.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry
// Each entry corresponds to one adjacency to an
// Intermediate System on this system.
type CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. A unique value identifying the IS adjacency from
    // all other such adjacencies on this circuit. This value is automatically
    // assigned by the system when the adjacency is created. The type is
    // interface{} with range: 1..2000000000.
    CiiISAdjIndex interface{}

    // The state of the adjacency. The type is CiiISAdjState.
    CiiISAdjState interface{}

    // The 3Way state of the adjacency.  These are picked to match the historical
    // on-the-wire representation of the 3Way state, and are not intended to match
    // ciiISAdjState. The type is CiiISAdj3WayState.
    CiiISAdj3WayState interface{}

    // The SNPA address of the neighboring system. The type is string with length:
    // 0..20.
    CiiISAdjNeighSNPAAddress interface{}

    // The type of the neighboring system. The type is CiiISAdjNeighSysType.
    CiiISAdjNeighSysType interface{}

    // The system ID of the neighboring Intermediate System. The type is string
    // with length: 6.
    CiiISAdjNeighSysID interface{}

    // The 4 byte Extended Circuit ID learned from the Neighbor during 3-way
    // handshake, or 0. The type is interface{} with range: 0..4294967295.
    CiiISAdjNbrExtendedCircID interface{}

    // How is the adjacency used?  On a point-to-point link, this might be
    // level1and2, but on a LAN, the usage will be level1 on the adjacency between
    // peers at L1, and level2 for the adjacency between peers at L2. The type is
    // CiiISAdjUsage.
    CiiISAdjUsage interface{}

    // The holding time in seconds for this adjacency. This value is based on
    // received IIH PDUs and the elapsed time since receipt. The type is
    // interface{} with range: 1..65535. Units are seconds.
    CiiISAdjHoldTimer interface{}

    // Priority of the neighboring Intermediate System for becoming the Designated
    // Intermediate System. The type is interface{} with range: 0..127.
    CiiISAdjNeighPriority interface{}

    // If the ciiISAdjState is in state 'up', the value of sysUpTime when the
    // adjacency most recently entered the state 'up',  or 0 if it has never been
    // in state 'up'. The type is interface{} with range: 0..4294967295. Units are
    // hundredths of a second.
    CiiISAdjLastUpTime interface{}
}

func (ciiISAdjEntry *CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry) GetEntityData() *types.CommonEntityData {
    ciiISAdjEntry.EntityData.YFilter = ciiISAdjEntry.YFilter
    ciiISAdjEntry.EntityData.YangName = "ciiISAdjEntry"
    ciiISAdjEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjEntry.EntityData.ParentYangName = "ciiISAdjTable"
    ciiISAdjEntry.EntityData.SegmentPath = "ciiISAdjEntry" + types.AddKeyToken(ciiISAdjEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiISAdjEntry.CiiISAdjIndex, "ciiISAdjIndex")
    ciiISAdjEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjEntry.EntityData.Children = types.NewOrderedMap()
    ciiISAdjEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiISAdjEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiISAdjEntry.CiiCircIndex})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjIndex", types.YLeaf{"CiiISAdjIndex", ciiISAdjEntry.CiiISAdjIndex})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjState", types.YLeaf{"CiiISAdjState", ciiISAdjEntry.CiiISAdjState})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdj3WayState", types.YLeaf{"CiiISAdj3WayState", ciiISAdjEntry.CiiISAdj3WayState})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjNeighSNPAAddress", types.YLeaf{"CiiISAdjNeighSNPAAddress", ciiISAdjEntry.CiiISAdjNeighSNPAAddress})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjNeighSysType", types.YLeaf{"CiiISAdjNeighSysType", ciiISAdjEntry.CiiISAdjNeighSysType})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjNeighSysID", types.YLeaf{"CiiISAdjNeighSysID", ciiISAdjEntry.CiiISAdjNeighSysID})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjNbrExtendedCircID", types.YLeaf{"CiiISAdjNbrExtendedCircID", ciiISAdjEntry.CiiISAdjNbrExtendedCircID})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjUsage", types.YLeaf{"CiiISAdjUsage", ciiISAdjEntry.CiiISAdjUsage})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjHoldTimer", types.YLeaf{"CiiISAdjHoldTimer", ciiISAdjEntry.CiiISAdjHoldTimer})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjNeighPriority", types.YLeaf{"CiiISAdjNeighPriority", ciiISAdjEntry.CiiISAdjNeighPriority})
    ciiISAdjEntry.EntityData.Leafs.Append("ciiISAdjLastUpTime", types.YLeaf{"CiiISAdjLastUpTime", ciiISAdjEntry.CiiISAdjLastUpTime})

    ciiISAdjEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiISAdjIndex"}

    return &(ciiISAdjEntry.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState represents ciiISAdjState.
type CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState string

const (
    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState_up CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState = "up"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState_initializing CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState = "initializing"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState_down CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState = "down"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState_failed CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdj3WayState = "failed"
)

// CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType represents The type of the neighboring system.
type CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType string

const (
    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType_l1IntermediateSystem CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType = "l1IntermediateSystem"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType_l2IntermediateSystem CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType = "l2IntermediateSystem"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType_l1L2IntermediateSystem CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType = "l1L2IntermediateSystem"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType_unknown CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjNeighSysType = "unknown"
)

// CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState represents The state of the adjacency
type CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState string

const (
    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState_down CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState = "down"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState_initializing CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState = "initializing"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState_up CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState = "up"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState_failed CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjState = "failed"
)

// CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage represents and level2 for the adjacency between peers at L2.
type CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage string

const (
    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage_level1 CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage = "level1"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage_level2 CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage = "level2"

    CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage_level1and2 CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjUsage = "level1and2"
)

// CISCOIETFISISMIB_CiiISAdjAreaAddrTable
// This table contains the set of Area Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_CiiISAdjAreaAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one Area Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_CiiISAdjAreaAddrTable_CiiISAdjAreaAddrEntry.
    CiiISAdjAreaAddrEntry []*CISCOIETFISISMIB_CiiISAdjAreaAddrTable_CiiISAdjAreaAddrEntry
}

func (ciiISAdjAreaAddrTable *CISCOIETFISISMIB_CiiISAdjAreaAddrTable) GetEntityData() *types.CommonEntityData {
    ciiISAdjAreaAddrTable.EntityData.YFilter = ciiISAdjAreaAddrTable.YFilter
    ciiISAdjAreaAddrTable.EntityData.YangName = "ciiISAdjAreaAddrTable"
    ciiISAdjAreaAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjAreaAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiISAdjAreaAddrTable.EntityData.SegmentPath = "ciiISAdjAreaAddrTable"
    ciiISAdjAreaAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjAreaAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjAreaAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjAreaAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiISAdjAreaAddrTable.EntityData.Children.Append("ciiISAdjAreaAddrEntry", types.YChild{"CiiISAdjAreaAddrEntry", nil})
    for i := range ciiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry {
        ciiISAdjAreaAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry[i]), types.YChild{"CiiISAdjAreaAddrEntry", ciiISAdjAreaAddrTable.CiiISAdjAreaAddrEntry[i]})
    }
    ciiISAdjAreaAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiISAdjAreaAddrTable.EntityData.YListKeys = []string {}

    return &(ciiISAdjAreaAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjAreaAddrTable_CiiISAdjAreaAddrEntry
// Each entry contains one Area Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_CiiISAdjAreaAddrTable_CiiISAdjAreaAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjIndex
    CiiISAdjIndex interface{}

    // This attribute is a key. An index for the areas associated with one
    // neighbor. This provides a simple way to walk the table. The type is
    // interface{} with range: 1..2000000000.
    CiiISAdjAreaAddrIndex interface{}

    // One Area Address as reported in IIH PDUs received from the neighbor. The
    // type is string with length: 0..20.
    CiiISAdjAreaAddress interface{}
}

func (ciiISAdjAreaAddrEntry *CISCOIETFISISMIB_CiiISAdjAreaAddrTable_CiiISAdjAreaAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiISAdjAreaAddrEntry.EntityData.YFilter = ciiISAdjAreaAddrEntry.YFilter
    ciiISAdjAreaAddrEntry.EntityData.YangName = "ciiISAdjAreaAddrEntry"
    ciiISAdjAreaAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjAreaAddrEntry.EntityData.ParentYangName = "ciiISAdjAreaAddrTable"
    ciiISAdjAreaAddrEntry.EntityData.SegmentPath = "ciiISAdjAreaAddrEntry" + types.AddKeyToken(ciiISAdjAreaAddrEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiISAdjAreaAddrEntry.CiiISAdjIndex, "ciiISAdjIndex") + types.AddKeyToken(ciiISAdjAreaAddrEntry.CiiISAdjAreaAddrIndex, "ciiISAdjAreaAddrIndex")
    ciiISAdjAreaAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjAreaAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjAreaAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjAreaAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiISAdjAreaAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiISAdjAreaAddrEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiISAdjAreaAddrEntry.CiiCircIndex})
    ciiISAdjAreaAddrEntry.EntityData.Leafs.Append("ciiISAdjIndex", types.YLeaf{"CiiISAdjIndex", ciiISAdjAreaAddrEntry.CiiISAdjIndex})
    ciiISAdjAreaAddrEntry.EntityData.Leafs.Append("ciiISAdjAreaAddrIndex", types.YLeaf{"CiiISAdjAreaAddrIndex", ciiISAdjAreaAddrEntry.CiiISAdjAreaAddrIndex})
    ciiISAdjAreaAddrEntry.EntityData.Leafs.Append("ciiISAdjAreaAddress", types.YLeaf{"CiiISAdjAreaAddress", ciiISAdjAreaAddrEntry.CiiISAdjAreaAddress})

    ciiISAdjAreaAddrEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiISAdjIndex", "CiiISAdjAreaAddrIndex"}

    return &(ciiISAdjAreaAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjIPAddrTable
// This table contains the set of IP Addresses of
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_CiiISAdjIPAddrTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one IP Address reported by a neighboring Intermediate
    // System in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_CiiISAdjIPAddrTable_CiiISAdjIPAddrEntry.
    CiiISAdjIPAddrEntry []*CISCOIETFISISMIB_CiiISAdjIPAddrTable_CiiISAdjIPAddrEntry
}

func (ciiISAdjIPAddrTable *CISCOIETFISISMIB_CiiISAdjIPAddrTable) GetEntityData() *types.CommonEntityData {
    ciiISAdjIPAddrTable.EntityData.YFilter = ciiISAdjIPAddrTable.YFilter
    ciiISAdjIPAddrTable.EntityData.YangName = "ciiISAdjIPAddrTable"
    ciiISAdjIPAddrTable.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjIPAddrTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiISAdjIPAddrTable.EntityData.SegmentPath = "ciiISAdjIPAddrTable"
    ciiISAdjIPAddrTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjIPAddrTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjIPAddrTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjIPAddrTable.EntityData.Children = types.NewOrderedMap()
    ciiISAdjIPAddrTable.EntityData.Children.Append("ciiISAdjIPAddrEntry", types.YChild{"CiiISAdjIPAddrEntry", nil})
    for i := range ciiISAdjIPAddrTable.CiiISAdjIPAddrEntry {
        ciiISAdjIPAddrTable.EntityData.Children.Append(types.GetSegmentPath(ciiISAdjIPAddrTable.CiiISAdjIPAddrEntry[i]), types.YChild{"CiiISAdjIPAddrEntry", ciiISAdjIPAddrTable.CiiISAdjIPAddrEntry[i]})
    }
    ciiISAdjIPAddrTable.EntityData.Leafs = types.NewOrderedMap()

    ciiISAdjIPAddrTable.EntityData.YListKeys = []string {}

    return &(ciiISAdjIPAddrTable.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjIPAddrTable_CiiISAdjIPAddrEntry
// Each entry contains one IP Address reported by a
// neighboring Intermediate System in its IIH PDUs.
type CISCOIETFISISMIB_CiiISAdjIPAddrTable_CiiISAdjIPAddrEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjIndex
    CiiISAdjIndex interface{}

    // This attribute is a key. An index to this table which identifies the IP
    // addresses to which this entry belongs. The type is interface{} with range:
    // 1..2000000000.
    CiiISAdjIPAddrIndex interface{}

    // The type of one IP Address as reported in IIH PDUs received from the
    // neighbor. The type is InetAddressType.
    CiiISAdjIPAddrType interface{}

    // One IP Address as reported in IIH PDUs received from the neighbor. The type
    // is string with length: 4 | 16.
    CiiISAdjIPAddrAddress interface{}
}

func (ciiISAdjIPAddrEntry *CISCOIETFISISMIB_CiiISAdjIPAddrTable_CiiISAdjIPAddrEntry) GetEntityData() *types.CommonEntityData {
    ciiISAdjIPAddrEntry.EntityData.YFilter = ciiISAdjIPAddrEntry.YFilter
    ciiISAdjIPAddrEntry.EntityData.YangName = "ciiISAdjIPAddrEntry"
    ciiISAdjIPAddrEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjIPAddrEntry.EntityData.ParentYangName = "ciiISAdjIPAddrTable"
    ciiISAdjIPAddrEntry.EntityData.SegmentPath = "ciiISAdjIPAddrEntry" + types.AddKeyToken(ciiISAdjIPAddrEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiISAdjIPAddrEntry.CiiISAdjIndex, "ciiISAdjIndex") + types.AddKeyToken(ciiISAdjIPAddrEntry.CiiISAdjIPAddrIndex, "ciiISAdjIPAddrIndex")
    ciiISAdjIPAddrEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjIPAddrEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjIPAddrEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjIPAddrEntry.EntityData.Children = types.NewOrderedMap()
    ciiISAdjIPAddrEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiISAdjIPAddrEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiISAdjIPAddrEntry.CiiCircIndex})
    ciiISAdjIPAddrEntry.EntityData.Leafs.Append("ciiISAdjIndex", types.YLeaf{"CiiISAdjIndex", ciiISAdjIPAddrEntry.CiiISAdjIndex})
    ciiISAdjIPAddrEntry.EntityData.Leafs.Append("ciiISAdjIPAddrIndex", types.YLeaf{"CiiISAdjIPAddrIndex", ciiISAdjIPAddrEntry.CiiISAdjIPAddrIndex})
    ciiISAdjIPAddrEntry.EntityData.Leafs.Append("ciiISAdjIPAddrType", types.YLeaf{"CiiISAdjIPAddrType", ciiISAdjIPAddrEntry.CiiISAdjIPAddrType})
    ciiISAdjIPAddrEntry.EntityData.Leafs.Append("ciiISAdjIPAddrAddress", types.YLeaf{"CiiISAdjIPAddrAddress", ciiISAdjIPAddrEntry.CiiISAdjIPAddrAddress})

    ciiISAdjIPAddrEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiISAdjIndex", "CiiISAdjIPAddrIndex"}

    return &(ciiISAdjIPAddrEntry.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjProtSuppTable
// This table contains the set of protocols supported by
// neighboring Intermediate Systems as reported in received
// IIH PDUs.
type CISCOIETFISISMIB_CiiISAdjProtSuppTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry contains one protocol supported by a neighboring Intermediate
    // System as reported in its IIH PDUs. The type is slice of
    // CISCOIETFISISMIB_CiiISAdjProtSuppTable_CiiISAdjProtSuppEntry.
    CiiISAdjProtSuppEntry []*CISCOIETFISISMIB_CiiISAdjProtSuppTable_CiiISAdjProtSuppEntry
}

func (ciiISAdjProtSuppTable *CISCOIETFISISMIB_CiiISAdjProtSuppTable) GetEntityData() *types.CommonEntityData {
    ciiISAdjProtSuppTable.EntityData.YFilter = ciiISAdjProtSuppTable.YFilter
    ciiISAdjProtSuppTable.EntityData.YangName = "ciiISAdjProtSuppTable"
    ciiISAdjProtSuppTable.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjProtSuppTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiISAdjProtSuppTable.EntityData.SegmentPath = "ciiISAdjProtSuppTable"
    ciiISAdjProtSuppTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjProtSuppTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjProtSuppTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjProtSuppTable.EntityData.Children = types.NewOrderedMap()
    ciiISAdjProtSuppTable.EntityData.Children.Append("ciiISAdjProtSuppEntry", types.YChild{"CiiISAdjProtSuppEntry", nil})
    for i := range ciiISAdjProtSuppTable.CiiISAdjProtSuppEntry {
        ciiISAdjProtSuppTable.EntityData.Children.Append(types.GetSegmentPath(ciiISAdjProtSuppTable.CiiISAdjProtSuppEntry[i]), types.YChild{"CiiISAdjProtSuppEntry", ciiISAdjProtSuppTable.CiiISAdjProtSuppEntry[i]})
    }
    ciiISAdjProtSuppTable.EntityData.Leafs = types.NewOrderedMap()

    ciiISAdjProtSuppTable.EntityData.YListKeys = []string {}

    return &(ciiISAdjProtSuppTable.EntityData)
}

// CISCOIETFISISMIB_CiiISAdjProtSuppTable_CiiISAdjProtSuppEntry
// Each entry contains one protocol supported by a
// neighboring Intermediate System as reported in its IIH
// PDUs.
type CISCOIETFISISMIB_CiiISAdjProtSuppTable_CiiISAdjProtSuppEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The type is string with range: 1..2000000000.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiISAdjTable_CiiISAdjEntry_CiiISAdjIndex
    CiiISAdjIndex interface{}

    // This attribute is a key. One supported protocol as reported in IIH PDUs
    // received from the neighbor. The type is CiiSupportedProtocol.
    CiiISAdjProtSuppProtocol interface{}
}

func (ciiISAdjProtSuppEntry *CISCOIETFISISMIB_CiiISAdjProtSuppTable_CiiISAdjProtSuppEntry) GetEntityData() *types.CommonEntityData {
    ciiISAdjProtSuppEntry.EntityData.YFilter = ciiISAdjProtSuppEntry.YFilter
    ciiISAdjProtSuppEntry.EntityData.YangName = "ciiISAdjProtSuppEntry"
    ciiISAdjProtSuppEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiISAdjProtSuppEntry.EntityData.ParentYangName = "ciiISAdjProtSuppTable"
    ciiISAdjProtSuppEntry.EntityData.SegmentPath = "ciiISAdjProtSuppEntry" + types.AddKeyToken(ciiISAdjProtSuppEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiISAdjProtSuppEntry.CiiISAdjIndex, "ciiISAdjIndex") + types.AddKeyToken(ciiISAdjProtSuppEntry.CiiISAdjProtSuppProtocol, "ciiISAdjProtSuppProtocol")
    ciiISAdjProtSuppEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiISAdjProtSuppEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiISAdjProtSuppEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiISAdjProtSuppEntry.EntityData.Children = types.NewOrderedMap()
    ciiISAdjProtSuppEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiISAdjProtSuppEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiISAdjProtSuppEntry.CiiCircIndex})
    ciiISAdjProtSuppEntry.EntityData.Leafs.Append("ciiISAdjIndex", types.YLeaf{"CiiISAdjIndex", ciiISAdjProtSuppEntry.CiiISAdjIndex})
    ciiISAdjProtSuppEntry.EntityData.Leafs.Append("ciiISAdjProtSuppProtocol", types.YLeaf{"CiiISAdjProtSuppProtocol", ciiISAdjProtSuppEntry.CiiISAdjProtSuppProtocol})

    ciiISAdjProtSuppEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiISAdjIndex", "CiiISAdjProtSuppProtocol"}

    return &(ciiISAdjProtSuppEntry.EntityData)
}

// CISCOIETFISISMIB_CiiRATable
// The table of Reachable Addresses to NSAPs or Address
// Prefixes.
type CISCOIETFISISMIB_CiiRATable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry defines a Reachable Address to a NSAP or Address Prefix. The
    // type is slice of CISCOIETFISISMIB_CiiRATable_CiiRAEntry.
    CiiRAEntry []*CISCOIETFISISMIB_CiiRATable_CiiRAEntry
}

func (ciiRATable *CISCOIETFISISMIB_CiiRATable) GetEntityData() *types.CommonEntityData {
    ciiRATable.EntityData.YFilter = ciiRATable.YFilter
    ciiRATable.EntityData.YangName = "ciiRATable"
    ciiRATable.EntityData.BundleName = "cisco_ios_xe"
    ciiRATable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiRATable.EntityData.SegmentPath = "ciiRATable"
    ciiRATable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRATable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRATable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRATable.EntityData.Children = types.NewOrderedMap()
    ciiRATable.EntityData.Children.Append("ciiRAEntry", types.YChild{"CiiRAEntry", nil})
    for i := range ciiRATable.CiiRAEntry {
        ciiRATable.EntityData.Children.Append(types.GetSegmentPath(ciiRATable.CiiRAEntry[i]), types.YChild{"CiiRAEntry", ciiRATable.CiiRAEntry[i]})
    }
    ciiRATable.EntityData.Leafs = types.NewOrderedMap()

    ciiRATable.EntityData.YListKeys = []string {}

    return &(ciiRATable.EntityData)
}

// CISCOIETFISISMIB_CiiRATable_CiiRAEntry
// Each entry defines a Reachable Address to a NSAP or
// Address Prefix.
type CISCOIETFISISMIB_CiiRATable_CiiRAEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is string with range: 1..2147483647.
    // Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiCircTable_CiiCircEntry_CiiCircIndex
    CiiCircIndex interface{}

    // This attribute is a key. The identifier for this ciiRAEntry. This value
    // must be unique amongst all Reachable Addresses on the same parent Circuit.
    // This object follows the index and ManualOrAutomatic behaviors. The type is
    // interface{} with range: 1..2000000000.
    CiiRAIndex interface{}

    // The existence state of this Reachable Address. This object follows the
    // ManualOrAutomatic behaviors. The type is RowStatus.
    CiiRAExistState interface{}

    // The administrative state of the Reachable Address. This object follows the
    // CiiAdminState and ManualOrAutomatic behaviors. The type is CiiAdminState.
    CiiRAAdminState interface{}

    // The destination of this Reachable Address. This is an Address Prefix. This
    // object follows the replaceOnlyWhileDisabled and ManualOrAutomatic
    // behaviors. The type is string with length: 0..20.
    CiiRAAddrPrefix interface{}

    // The type of mapping to be employed to ascertain the SNPA Address which
    // should be used in forwarding PDUs for this Reachable Address prefix. This
    // object follows the ManualOrAutomatic behavior. The following values of
    // mapping type are defined:      none: The mapping is null because the
    // neighbor SNPA is           implicit by nature of the subnetwork (e.g. a    
    // point-to-point linkage).      explicit: The subnetwork addresses in the
    // object           ciiRASNPAAddress is to be used.      extractIDI: The SNPA
    // is embedded in the IDI of           the destination NSAP Address. The
    // mapping           algorithm extracts the SNPA to be used          
    // according to the format and encoding rules of           ISO8473/Add2. This
    // SNPA extraction algorithm can           be used in conjunction with
    // Reachable Address           prefixes from the X.121, F.69, E.163 and E.164 
    // addressing subdomains.      extractDSP: All, or a suffix, of the SNPA is
    // embedded           in the DSP of the destination address. This SNPA        
    // extraction algorithm extracts the embedded           subnetwork addressing
    // information by performing a           logical AND of the ciiRASNPAMask
    // object value           with the destination address. The part of the       
    // SNPA extracted from the destination NSAP is           appended to the
    // ciiRASNPAPrefix object value to           form the next hop subnetwork
    // addressing           information. The type is CiiRAMapType.
    CiiRAMapType interface{}

    // The metric value for reaching the specified prefix over this circuit. This
    // object follows the ManualOrAutomatic behavior. The type is interface{} with
    // range: 0..63.
    CiiRAMetric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    CiiRAMetricType interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches the address prefix of the Reachable Address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 0..20.
    CiiRASNPAAddress interface{}

    // A bit mask with 1 bits indicating the positions in the effective
    // destination address from which embedded SNPA information is to be
    // extracted. For the extraction the first octet of the ciiRASNPAMask object
    // value is aligned with the first octet (AFI) of the NSAP Address. If the
    // ciiRASNPAMask object value and NSAP Address are of different lengths, the
    // shorter of the two is logically padded with zeros before performing the
    // extraction. This object follows the ManualOrAutomatic behavior. The type is
    // string with length: 0..20.
    CiiRASNPAMask interface{}

    // A fixed SNPA prefix for use when the ciiRAMapType is extractDSP. The SNPA
    // Address to use is formed by concatenating the fixed SNPA prefix with a
    // variable SNPA part that is extracted from the effective destination
    // address. For Reachable Address prefixes in which the entire SNPA is
    // embedded in the DSP the SNPA Prefix shall be null. This object follows the
    // ManualOrAutomatic behavior. The type is string with length: 0..20.
    CiiRASNPAPrefix interface{}

    // The type of Reachable address. Those of type manual are created by the
    // network manager. Those of type automatic are created through propagation of
    // routing information from another routing protocol (eg. IDRP). . The type is
    // CiiRAType.
    CiiRAType interface{}
}

func (ciiRAEntry *CISCOIETFISISMIB_CiiRATable_CiiRAEntry) GetEntityData() *types.CommonEntityData {
    ciiRAEntry.EntityData.YFilter = ciiRAEntry.YFilter
    ciiRAEntry.EntityData.YangName = "ciiRAEntry"
    ciiRAEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiRAEntry.EntityData.ParentYangName = "ciiRATable"
    ciiRAEntry.EntityData.SegmentPath = "ciiRAEntry" + types.AddKeyToken(ciiRAEntry.CiiCircIndex, "ciiCircIndex") + types.AddKeyToken(ciiRAEntry.CiiRAIndex, "ciiRAIndex")
    ciiRAEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiRAEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiRAEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiRAEntry.EntityData.Children = types.NewOrderedMap()
    ciiRAEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiRAEntry.EntityData.Leafs.Append("ciiCircIndex", types.YLeaf{"CiiCircIndex", ciiRAEntry.CiiCircIndex})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAIndex", types.YLeaf{"CiiRAIndex", ciiRAEntry.CiiRAIndex})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAExistState", types.YLeaf{"CiiRAExistState", ciiRAEntry.CiiRAExistState})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAAdminState", types.YLeaf{"CiiRAAdminState", ciiRAEntry.CiiRAAdminState})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAAddrPrefix", types.YLeaf{"CiiRAAddrPrefix", ciiRAEntry.CiiRAAddrPrefix})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAMapType", types.YLeaf{"CiiRAMapType", ciiRAEntry.CiiRAMapType})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAMetric", types.YLeaf{"CiiRAMetric", ciiRAEntry.CiiRAMetric})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAMetricType", types.YLeaf{"CiiRAMetricType", ciiRAEntry.CiiRAMetricType})
    ciiRAEntry.EntityData.Leafs.Append("ciiRASNPAAddress", types.YLeaf{"CiiRASNPAAddress", ciiRAEntry.CiiRASNPAAddress})
    ciiRAEntry.EntityData.Leafs.Append("ciiRASNPAMask", types.YLeaf{"CiiRASNPAMask", ciiRAEntry.CiiRASNPAMask})
    ciiRAEntry.EntityData.Leafs.Append("ciiRASNPAPrefix", types.YLeaf{"CiiRASNPAPrefix", ciiRAEntry.CiiRASNPAPrefix})
    ciiRAEntry.EntityData.Leafs.Append("ciiRAType", types.YLeaf{"CiiRAType", ciiRAEntry.CiiRAType})

    ciiRAEntry.EntityData.YListKeys = []string {"CiiCircIndex", "CiiRAIndex"}

    return &(ciiRAEntry.EntityData)
}

// CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType represents           information.
type CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType string

const (
    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType_none CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType = "none"

    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType_explicit CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType = "explicit"

    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType_extractIDI CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType = "extractIDI"

    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType_extractDSP CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAMapType = "extractDSP"
)

// CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType represents protocol (eg. IDRP). 
type CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType string

const (
    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType_manual CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType = "manual"

    CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType_automatic CISCOIETFISISMIB_CiiRATable_CiiRAEntry_CiiRAType = "automatic"
)

// CISCOIETFISISMIB_CiiIPRATable
// The table of IP Reachable Addresses to networks,
// subnetworks or hosts either manually configured or
// learned from another protocol.
type CISCOIETFISISMIB_CiiIPRATable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry defines an IP Reachable Address to a network, subnetwork or
    // host.  Each IP Reachable Address may have multiple entries in the table,
    // one for each equal cost path to the reachable address. The type is slice of
    // CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry.
    CiiIPRAEntry []*CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry
}

func (ciiIPRATable *CISCOIETFISISMIB_CiiIPRATable) GetEntityData() *types.CommonEntityData {
    ciiIPRATable.EntityData.YFilter = ciiIPRATable.YFilter
    ciiIPRATable.EntityData.YangName = "ciiIPRATable"
    ciiIPRATable.EntityData.BundleName = "cisco_ios_xe"
    ciiIPRATable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiIPRATable.EntityData.SegmentPath = "ciiIPRATable"
    ciiIPRATable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiIPRATable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiIPRATable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiIPRATable.EntityData.Children = types.NewOrderedMap()
    ciiIPRATable.EntityData.Children.Append("ciiIPRAEntry", types.YChild{"CiiIPRAEntry", nil})
    for i := range ciiIPRATable.CiiIPRAEntry {
        ciiIPRATable.EntityData.Children.Append(types.GetSegmentPath(ciiIPRATable.CiiIPRAEntry[i]), types.YChild{"CiiIPRAEntry", ciiIPRATable.CiiIPRAEntry[i]})
    }
    ciiIPRATable.EntityData.Leafs = types.NewOrderedMap()

    ciiIPRATable.EntityData.YListKeys = []string {}

    return &(ciiIPRATable.EntityData)
}

// CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry
// Each entry defines an IP Reachable Address to a network,
// subnetwork or host.
// 
// Each IP Reachable Address may have multiple entries in the
// table, one for each equal cost path to the reachable address.
type CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type of this IP Reachable Address.  This
    // object follows the ManualOrAutomatic behavior. The type is InetAddressType.
    CiiIPRADestType interface{}

    // This attribute is a key. The destination of this IP Reachable Address. This
    // is either a network address, subnetwork address or host address. This
    // object follows the ManualOrAutomatic behavior. The type is string with
    // length: 4 | 16.
    CiiIPRADest interface{}

    // This attribute is a key. The length of the IP Netmask for Reachability
    // Address. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..128.
    CiiIPRADestPrefixLen interface{}

    // This attribute is a key. Index of next hop.  Used when there are multiple
    // Equal Cost Multipath alternatives for the same destination. The type is
    // interface{} with range: 1..65535.
    CiiIPRANextHopIndex interface{}

    // The type of the IP next hop address. The type is InetAddressType.
    CiiIPRANextHopType interface{}

    // The IP next hop to this destination. The type is string with length: 4 |
    // 16.
    CiiIPRANextHop interface{}

    // The type of this IP Reachable Address. Those of type manual are created by
    // the network manager. Those of type automatic are created through
    // propagation of routing information from another routing protocol.  This
    // object follows the ManualOrAutomatic behavior. The type is CiiIPRAType.
    CiiIPRAType interface{}

    // The state of this IP Reachable Address. This object follows the
    // ExistenceState and ManualOrAutomatic behaviors. The type is RowStatus.
    CiiIPRAExistState interface{}

    // The administrative state of the IP Reachable Address. This object follows
    // the CiiAdminState and ManualOrAutomatic behaviors. The type is
    // CiiAdminState.
    CiiIPRAAdminState interface{}

    // The metric value for reaching the specified destination over this circuit.
    // This object follows the ManualOrAutomatic behavior. The type is interface{}
    // with range: 0..63.
    CiiIPRAMetric interface{}

    // Indicates whether the metric is internal or external. This object follows
    // the ManualOrAutomatic behavior. The type is CiiMetricType.
    CiiIPRAMetricType interface{}

    // The wide metric value for reaching the specified destination over this
    // circuit. This object follows the ManualOrAutomatic behavior. The type is
    // interface{} with range: 0..4294967295.
    CiiIPRAFullMetric interface{}

    // The SNPA Address to which a PDU may be forwarded in order to reach a
    // destination which matches this IP Reachable Address. This object follows
    // the ManualOrAutomatic behavior. The type is string with length: 0..20.
    CiiIPRASNPAAddress interface{}

    // The origin of this route. The type is CiiIPRASourceType.
    CiiIPRASourceType interface{}
}

func (ciiIPRAEntry *CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry) GetEntityData() *types.CommonEntityData {
    ciiIPRAEntry.EntityData.YFilter = ciiIPRAEntry.YFilter
    ciiIPRAEntry.EntityData.YangName = "ciiIPRAEntry"
    ciiIPRAEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiIPRAEntry.EntityData.ParentYangName = "ciiIPRATable"
    ciiIPRAEntry.EntityData.SegmentPath = "ciiIPRAEntry" + types.AddKeyToken(ciiIPRAEntry.CiiIPRADestType, "ciiIPRADestType") + types.AddKeyToken(ciiIPRAEntry.CiiIPRADest, "ciiIPRADest") + types.AddKeyToken(ciiIPRAEntry.CiiIPRADestPrefixLen, "ciiIPRADestPrefixLen") + types.AddKeyToken(ciiIPRAEntry.CiiIPRANextHopIndex, "ciiIPRANextHopIndex")
    ciiIPRAEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiIPRAEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiIPRAEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiIPRAEntry.EntityData.Children = types.NewOrderedMap()
    ciiIPRAEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRADestType", types.YLeaf{"CiiIPRADestType", ciiIPRAEntry.CiiIPRADestType})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRADest", types.YLeaf{"CiiIPRADest", ciiIPRAEntry.CiiIPRADest})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRADestPrefixLen", types.YLeaf{"CiiIPRADestPrefixLen", ciiIPRAEntry.CiiIPRADestPrefixLen})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRANextHopIndex", types.YLeaf{"CiiIPRANextHopIndex", ciiIPRAEntry.CiiIPRANextHopIndex})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRANextHopType", types.YLeaf{"CiiIPRANextHopType", ciiIPRAEntry.CiiIPRANextHopType})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRANextHop", types.YLeaf{"CiiIPRANextHop", ciiIPRAEntry.CiiIPRANextHop})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAType", types.YLeaf{"CiiIPRAType", ciiIPRAEntry.CiiIPRAType})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAExistState", types.YLeaf{"CiiIPRAExistState", ciiIPRAEntry.CiiIPRAExistState})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAAdminState", types.YLeaf{"CiiIPRAAdminState", ciiIPRAEntry.CiiIPRAAdminState})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAMetric", types.YLeaf{"CiiIPRAMetric", ciiIPRAEntry.CiiIPRAMetric})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAMetricType", types.YLeaf{"CiiIPRAMetricType", ciiIPRAEntry.CiiIPRAMetricType})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRAFullMetric", types.YLeaf{"CiiIPRAFullMetric", ciiIPRAEntry.CiiIPRAFullMetric})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRASNPAAddress", types.YLeaf{"CiiIPRASNPAAddress", ciiIPRAEntry.CiiIPRASNPAAddress})
    ciiIPRAEntry.EntityData.Leafs.Append("ciiIPRASourceType", types.YLeaf{"CiiIPRASourceType", ciiIPRAEntry.CiiIPRASourceType})

    ciiIPRAEntry.EntityData.YListKeys = []string {"CiiIPRADestType", "CiiIPRADest", "CiiIPRADestPrefixLen", "CiiIPRANextHopIndex"}

    return &(ciiIPRAEntry.EntityData)
}

// CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType represents The origin of this route.
type CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType string

const (
    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_static CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "static"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_direct CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "direct"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_ospfv2 CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "ospfv2"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_ospfv3 CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "ospfv3"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_isis CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "isis"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_rip CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "rip"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_igrp CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "igrp"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_eigrp CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "eigrp"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_bgp CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "bgp"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType_other CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRASourceType = "other"
)

// CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType represents follows the ManualOrAutomatic behavior.
type CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType string

const (
    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType_manual CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType = "manual"

    CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType_automatic CISCOIETFISISMIB_CiiIPRATable_CiiIPRAEntry_CiiIPRAType = "automatic"
)

// CISCOIETFISISMIB_CiiLSPSummaryTable
// The table of LSP Headers.
type CISCOIETFISISMIB_CiiLSPSummaryTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry provides a summary describing an LSP currently stored in the
    // system. The type is slice of
    // CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry.
    CiiLSPSummaryEntry []*CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry
}

func (ciiLSPSummaryTable *CISCOIETFISISMIB_CiiLSPSummaryTable) GetEntityData() *types.CommonEntityData {
    ciiLSPSummaryTable.EntityData.YFilter = ciiLSPSummaryTable.YFilter
    ciiLSPSummaryTable.EntityData.YangName = "ciiLSPSummaryTable"
    ciiLSPSummaryTable.EntityData.BundleName = "cisco_ios_xe"
    ciiLSPSummaryTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiLSPSummaryTable.EntityData.SegmentPath = "ciiLSPSummaryTable"
    ciiLSPSummaryTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiLSPSummaryTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiLSPSummaryTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiLSPSummaryTable.EntityData.Children = types.NewOrderedMap()
    ciiLSPSummaryTable.EntityData.Children.Append("ciiLSPSummaryEntry", types.YChild{"CiiLSPSummaryEntry", nil})
    for i := range ciiLSPSummaryTable.CiiLSPSummaryEntry {
        ciiLSPSummaryTable.EntityData.Children.Append(types.GetSegmentPath(ciiLSPSummaryTable.CiiLSPSummaryEntry[i]), types.YChild{"CiiLSPSummaryEntry", ciiLSPSummaryTable.CiiLSPSummaryEntry[i]})
    }
    ciiLSPSummaryTable.EntityData.Leafs = types.NewOrderedMap()

    ciiLSPSummaryTable.EntityData.YListKeys = []string {}

    return &(ciiLSPSummaryTable.EntityData)
}

// CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry
// Each entry provides a summary describing an
// LSP currently stored in the system.
type CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. At which level does this LSP appear?. The type is
    // CiiISLevel.
    CiiLSPLevel interface{}

    // This attribute is a key. The 8 byte LSP ID, consisting of the SystemID,
    // Circuit ID, and Fragment Number. The type is string with length: 0 | 8.
    CiiLSPID interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    CiiLSPSeq interface{}

    // Is this LSP being purged by this System?. The type is bool.
    CiiLSPZeroLife interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    CiiLSPChecksum interface{}

    // The remaining lifetime in seconds for this LSP. The type is interface{}
    // with range: 0..65535. Units are seconds.
    CiiLSPLifetimeRemain interface{}

    // The length of this LSP. The type is interface{} with range: 0..65535.
    CiiLSPPDULength interface{}

    // Flags carried by the LSP. The type is interface{} with range: 0..255.
    CiiLSPAttributes interface{}
}

func (ciiLSPSummaryEntry *CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry) GetEntityData() *types.CommonEntityData {
    ciiLSPSummaryEntry.EntityData.YFilter = ciiLSPSummaryEntry.YFilter
    ciiLSPSummaryEntry.EntityData.YangName = "ciiLSPSummaryEntry"
    ciiLSPSummaryEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiLSPSummaryEntry.EntityData.ParentYangName = "ciiLSPSummaryTable"
    ciiLSPSummaryEntry.EntityData.SegmentPath = "ciiLSPSummaryEntry" + types.AddKeyToken(ciiLSPSummaryEntry.CiiLSPLevel, "ciiLSPLevel") + types.AddKeyToken(ciiLSPSummaryEntry.CiiLSPID, "ciiLSPID")
    ciiLSPSummaryEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiLSPSummaryEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiLSPSummaryEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiLSPSummaryEntry.EntityData.Children = types.NewOrderedMap()
    ciiLSPSummaryEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPLevel", types.YLeaf{"CiiLSPLevel", ciiLSPSummaryEntry.CiiLSPLevel})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPID", types.YLeaf{"CiiLSPID", ciiLSPSummaryEntry.CiiLSPID})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPSeq", types.YLeaf{"CiiLSPSeq", ciiLSPSummaryEntry.CiiLSPSeq})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPZeroLife", types.YLeaf{"CiiLSPZeroLife", ciiLSPSummaryEntry.CiiLSPZeroLife})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPChecksum", types.YLeaf{"CiiLSPChecksum", ciiLSPSummaryEntry.CiiLSPChecksum})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPLifetimeRemain", types.YLeaf{"CiiLSPLifetimeRemain", ciiLSPSummaryEntry.CiiLSPLifetimeRemain})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPPDULength", types.YLeaf{"CiiLSPPDULength", ciiLSPSummaryEntry.CiiLSPPDULength})
    ciiLSPSummaryEntry.EntityData.Leafs.Append("ciiLSPAttributes", types.YLeaf{"CiiLSPAttributes", ciiLSPSummaryEntry.CiiLSPAttributes})

    ciiLSPSummaryEntry.EntityData.YListKeys = []string {"CiiLSPLevel", "CiiLSPID"}

    return &(ciiLSPSummaryEntry.EntityData)
}

// CISCOIETFISISMIB_CiiLSPTLVTable
// The contents of each LSP.
type CISCOIETFISISMIB_CiiLSPTLVTable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Each entry describes an LSP current stored in the system. The type is slice
    // of CISCOIETFISISMIB_CiiLSPTLVTable_CiiLSPTLVEntry.
    CiiLSPTLVEntry []*CISCOIETFISISMIB_CiiLSPTLVTable_CiiLSPTLVEntry
}

func (ciiLSPTLVTable *CISCOIETFISISMIB_CiiLSPTLVTable) GetEntityData() *types.CommonEntityData {
    ciiLSPTLVTable.EntityData.YFilter = ciiLSPTLVTable.YFilter
    ciiLSPTLVTable.EntityData.YangName = "ciiLSPTLVTable"
    ciiLSPTLVTable.EntityData.BundleName = "cisco_ios_xe"
    ciiLSPTLVTable.EntityData.ParentYangName = "CISCO-IETF-ISIS-MIB"
    ciiLSPTLVTable.EntityData.SegmentPath = "ciiLSPTLVTable"
    ciiLSPTLVTable.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiLSPTLVTable.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiLSPTLVTable.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiLSPTLVTable.EntityData.Children = types.NewOrderedMap()
    ciiLSPTLVTable.EntityData.Children.Append("ciiLSPTLVEntry", types.YChild{"CiiLSPTLVEntry", nil})
    for i := range ciiLSPTLVTable.CiiLSPTLVEntry {
        ciiLSPTLVTable.EntityData.Children.Append(types.GetSegmentPath(ciiLSPTLVTable.CiiLSPTLVEntry[i]), types.YChild{"CiiLSPTLVEntry", ciiLSPTLVTable.CiiLSPTLVEntry[i]})
    }
    ciiLSPTLVTable.EntityData.Leafs = types.NewOrderedMap()

    ciiLSPTLVTable.EntityData.YListKeys = []string {}

    return &(ciiLSPTLVTable.EntityData)
}

// CISCOIETFISISMIB_CiiLSPTLVTable_CiiLSPTLVEntry
// Each entry describes an LSP current stored in the
// system.
type CISCOIETFISISMIB_CiiLSPTLVTable_CiiLSPTLVEntry struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // This attribute is a key. The type is CiiISLevel. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry_CiiLSPLevel
    CiiLSPLevel interface{}

    // This attribute is a key. The type is string with length: 0 | 8. Refers to
    // cisco_ietf_isis_mib.CISCOIETFISISMIB_CiiLSPSummaryTable_CiiLSPSummaryEntry_CiiLSPID
    CiiLSPID interface{}

    // This attribute is a key. The index of this TLV in the LSP.  The first TLV
    // has index 1 and the Nth TLV has an index of N. The type is interface{} with
    // range: 0..4294967295.
    CiiLSPTLVIndex interface{}

    // The sequence number for this LSP. The type is interface{} with range:
    // 0..4294967295.
    CiiLSPTLVSeq interface{}

    // The 16 bit Fletcher Checksum. The type is interface{} with range: 0..65535.
    CiiLSPTLVChecksum interface{}

    // The type of this TLV. The type is interface{} with range: 0..255.
    CiiLSPTLVType interface{}

    // The length of this TLV. The type is interface{} with range: 0..255.
    CiiLSPTLVLen interface{}

    // The value of this TLV. The type is string with length: 0..255.
    CiiLSPTLVValue interface{}
}

func (ciiLSPTLVEntry *CISCOIETFISISMIB_CiiLSPTLVTable_CiiLSPTLVEntry) GetEntityData() *types.CommonEntityData {
    ciiLSPTLVEntry.EntityData.YFilter = ciiLSPTLVEntry.YFilter
    ciiLSPTLVEntry.EntityData.YangName = "ciiLSPTLVEntry"
    ciiLSPTLVEntry.EntityData.BundleName = "cisco_ios_xe"
    ciiLSPTLVEntry.EntityData.ParentYangName = "ciiLSPTLVTable"
    ciiLSPTLVEntry.EntityData.SegmentPath = "ciiLSPTLVEntry" + types.AddKeyToken(ciiLSPTLVEntry.CiiLSPLevel, "ciiLSPLevel") + types.AddKeyToken(ciiLSPTLVEntry.CiiLSPID, "ciiLSPID") + types.AddKeyToken(ciiLSPTLVEntry.CiiLSPTLVIndex, "ciiLSPTLVIndex")
    ciiLSPTLVEntry.EntityData.CapabilitiesTable = cisco_ios_xe.GetCapabilities()
    ciiLSPTLVEntry.EntityData.NamespaceTable = cisco_ios_xe.GetNamespaces()
    ciiLSPTLVEntry.EntityData.BundleYangModelsLocation = cisco_ios_xe.GetModelsPath()

    ciiLSPTLVEntry.EntityData.Children = types.NewOrderedMap()
    ciiLSPTLVEntry.EntityData.Leafs = types.NewOrderedMap()
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPLevel", types.YLeaf{"CiiLSPLevel", ciiLSPTLVEntry.CiiLSPLevel})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPID", types.YLeaf{"CiiLSPID", ciiLSPTLVEntry.CiiLSPID})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVIndex", types.YLeaf{"CiiLSPTLVIndex", ciiLSPTLVEntry.CiiLSPTLVIndex})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVSeq", types.YLeaf{"CiiLSPTLVSeq", ciiLSPTLVEntry.CiiLSPTLVSeq})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVChecksum", types.YLeaf{"CiiLSPTLVChecksum", ciiLSPTLVEntry.CiiLSPTLVChecksum})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVType", types.YLeaf{"CiiLSPTLVType", ciiLSPTLVEntry.CiiLSPTLVType})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVLen", types.YLeaf{"CiiLSPTLVLen", ciiLSPTLVEntry.CiiLSPTLVLen})
    ciiLSPTLVEntry.EntityData.Leafs.Append("ciiLSPTLVValue", types.YLeaf{"CiiLSPTLVValue", ciiLSPTLVEntry.CiiLSPTLVValue})

    ciiLSPTLVEntry.EntityData.YListKeys = []string {"CiiLSPLevel", "CiiLSPID", "CiiLSPTLVIndex"}

    return &(ciiLSPTLVEntry.EntityData)
}

